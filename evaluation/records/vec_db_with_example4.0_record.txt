Running test case: Monitors the rate of specific hardware interrupts and logs the interrupt sources
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Monitors the rate of specific hardware interrupts and logs the interrupt sources

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces key VFS calls, counts the number of times each call is invoked, and prints a per-second summary.

```
BEGIN
{
	printf("Tracing key VFS calls... Hit Ctrl-C to end.\n");

}

kprobe:vfs_read*,
kprobe:vfs_write*,
kprobe:vfs_fsync,
kprobe:vfs_open,
kprobe:vfs_create
{
	@[func] = count();
}

interval:s:1
{
	time();
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Monitors the rate of specific hardware interrupts and logs the interrupt sources

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN { printf("Monitoring hardware interrupts... Hit Ctrl-C to end.\\n"); } tracepoint:irq:irq_handler_entry { @[args->irq] = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Monitoring hardware interrupts... Hit Ctrl-C to end.\n"); } tracepoint:irq:irq_handler_entry { @[args->irq] = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }
Attaching 4 probes...
Monitoring hardware interrupts... Hit Ctrl-C to end.
10:50:01
@[17]: 2
@[19]: 14
10:50:02
@[57]: 1
@[56]: 1
@[19]: 23
10:50:03
@[19]: 4
10:50:04
@[56]: 1
@[19]: 5
10:50:05
@[17]: 1
@[19]: 4
10:50:06
@[56]: 1
@[17]: 5
@[19]: 35
10:50:07
@[19]: 28
10:50:08
@[56]: 1
@[19]: 67
10:50:09
@[19]: 5
10:50:10
@[56]: 1
@[17]: 1
@[19]: 32
10:50:11
@[17]: 2
@[19]: 13
10:50:12
@[56]: 1
@[57]: 2
@[19]: 99
10:50:13
@[19]: 4
10:50:14
@[56]: 1
@[19]: 29
10:50:15
@[19]: 9
10:50:16
@[56]: 1
@[19]: 5
10:50:17
@[17]: 2
@[19]: 11
10:50:18
@[19]: 8
10:50:19
@[56]: 1
@[17]: 5
@[19]: 10



kill process 16530
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Monitoring hardware interrupts... Hit Ctrl-C to end.\\n\"); } tracepoint:irq:irq_handler_entry { @[args->irq] = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }", "stdout": "Attaching 4 probes...\nMonitoring hardware interrupts... Hit Ctrl-C to end.\n10:50:01\n@[17]: 2\n@[19]: 14\n10:50:02\n@[57]: 1\n@[56]: 1\n@[19]: 23\n10:50:03\n@[19]: 4\n10:50:04\n@[56]: 1\n@[19]: 5\n10:50:05\n@[17]: 1\n@[19]: 4\n10:50:06\n@[56]: 1\n@[17]: 5\n@[19]: 35\n10:50:07\n@[19]: 28\n10:50:08\n@[56]: 1\n@[19]: 67\n10:50:09\n@[19]: 5\n10:50:10\n@[56]: 1\n@[17]: 1\n@[19]: 32\n10:50:11\n@[17]: 2\n@[19]: 13\n10:50:12\n@[56]: 1\n@[57]: 2\n@[19]: 99\n10:50:13\n@[19]: 4\n10:50:14\n@[56]: 1\n@[19]: 29\n10:50:15\n@[19]: 9\n10:50:16\n@[56]: 1\n@[19]: 5\n10:50:17\n@[17]: 2\n@[19]: 11\n10:50:18\n@[19]: 8\n10:50:19\n@[56]: 1\n@[17]: 5\n@[19]: 10\n\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Monitoring hardware interrupts... Hit Ctrl-C to end.\\n"); } tracepoint:irq:irq_handler_entry { @[args->irq] = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }', 'stdout': 'Attaching 4 probes...\nMonitoring hardware interrupts... Hit Ctrl-C to end.\n10:50:01\n@[17]: 2\n@[19]: 14\n10:50:02\n@[57]: 1\n@[56]: 1\n@[19]: 23\n10:50:03\n@[19]: 4\n10:50:04\n@[56]: 1\n@[19]: 5\n10:50:05\n@[17]: 1\n@[19]: 4\n10:50:06\n@[56]: 1\n@[17]: 5\n@[19]: 35\n10:50:07\n@[19]: 28\n10:50:08\n@[56]: 1\n@[19]: 67\n10:50:09\n@[19]: 5\n10:50:10\n@[56]: 1\n@[17]: 1\n@[19]: 32\n10:50:11\n@[17]: 2\n@[19]: 13\n10:50:12\n@[56]: 1\n@[57]: 2\n@[19]: 99\n10:50:13\n@[19]: 4\n10:50:14\n@[56]: 1\n@[19]: 29\n10:50:15\n@[19]: 9\n10:50:16\n@[56]: 1\n@[19]: 5\n10:50:17\n@[17]: 2\n@[19]: 11\n10:50:18\n@[19]: 8\n10:50:19\n@[56]: 1\n@[17]: 5\n@[19]: 10\n\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 1 out of 40 test cases so far.

Running test case: Traces process forking events and logs the parent and child process IDs and command names.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Traces process forking events and logs the parent and child process IDs and command names.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces new processes created via the exec() system call, providing the timestamp, process ID, and arguments of the executed command.

```
BEGIN
{
	printf("%-10s %-5s %s\n", "TIME(ms)", "PID", "ARGS");
}

tracepoint:syscalls:sys_enter_exec*
{
	printf("%-10u %-5d ", elapsed / 1e6, pid);
	join(args.argv);
}

```

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Traces process forking events and logs the parent and child process IDs and command names.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:sched:sched_process_fork\n{\n    printf("Parent PID: %d, Parent CMD: %s, Child PID: %d, Child CMD: %s\\n", pid, comm, args->child_pid, args->child_comm);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:sched:sched_process_fork
{
    printf("Parent PID: %d, Parent CMD: %s, Child PID: %d, Child CMD: %s\n", pid, comm, args->child_pid, args->child_comm);
}
Attaching 1 probe...
Parent PID: 1624, Parent CMD: node, Child PID: 16688, Child CMD: node
Parent PID: 16688, Parent CMD: git, Child PID: 16689, Child CMD: git
Parent PID: 1624, Parent CMD: node, Child PID: 16690, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16691, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16692, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16693, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16694, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16695, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16696, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16697, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16698, Child CMD: node
Parent PID: 16698, Parent CMD: git, Child PID: 16699, Child CMD: git
Parent PID: 16699, Parent CMD: sh, Child PID: 16700, Child CMD: sh
Parent PID: 16700, Parent CMD: git-editor.sh, Child PID: 16701, Child CMD: git-editor.sh
Parent PID: 16701, Parent CMD: node, Child PID: 16702, Child CMD: node
Parent PID: 16701, Parent CMD: node, Child PID: 16703, Child CMD: node
Parent PID: 16701, Parent CMD: node, Child PID: 16704, Child CMD: node
Parent PID: 16701, Parent CMD: node, Child PID: 16705, Child CMD: node
Parent PID: 16701, Parent CMD: node, Child PID: 16706, Child CMD: node
Parent PID: 16701, Parent CMD: node, Child PID: 16707, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16708, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16709, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16710, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16711, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16712, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16713, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16714, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16715, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16716, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16717, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16718, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16719, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16720, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16721, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16722, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16723, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16724, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16725, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16726, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16727, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16728, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16729, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16730, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16731, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16732, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16733, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16734, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16735, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16736, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16737, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16738, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16739, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16740, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16741, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16742, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16743, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16744, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16745, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16746, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16747, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16748, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16749, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16750, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16751, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16752, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16753, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16754, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16755, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16756, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16757, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16758, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16759, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16760, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16761, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16762, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16763, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16764, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16765, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16766, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16767, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16768, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16769, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16770, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16771, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16772, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16773, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16774, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16775, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16776, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16777, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16778, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16779, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16780, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16781, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16782, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16783, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16784, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16785, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16786, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16787, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16788, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16789, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16790, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16791, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16792, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16793, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16794, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16795, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16796, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16797, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16798, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16799, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16800, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16801, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16802, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16803, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16804, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16805, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16806, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16807, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16808, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16809, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16810, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16811, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16812, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16813, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16814, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16815, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16816, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16817, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16818, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16819, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16820, Child CMD: node
Parent PID: 1624, Parent CMD: node, Child PID: 16821, Child CMD: node
Parent PID: 16821, Parent CMD: git, Child PID: 16822, Child CMD: git
Parent PID: 16822, Parent CMD: git, Child PID: 16823, Child CMD: git
Parent PID: 16823, Parent CMD: git-remote-http, Child PID: 16824, Child CMD: git-remote-http
Parent PID: 16824, Parent CMD: askpass.sh, Child PID: 16825, Child CMD: askpass.sh
Parent PID: 16824, Parent CMD: askpass.sh, Child PID: 16826, Child CMD: askpass.sh
Parent PID: 16826, Parent CMD: node, Child PID: 16827, Child CMD: node
Parent PID: 16826, Parent CMD: node, Child PID: 16828, Child CMD: node
Parent PID: 16826, Parent CMD: node, Child PID: 16829, Child CMD: node
Parent PID: 16826, Parent CMD: node, Child PID: 16830, Child CMD: node
Parent PID: 16826, Parent CMD: node, Child PID: 16831, Child CMD: node
Parent PID: 16826, Parent CMD: node, Child PID: 16832, Child CMD: node
Parent PID: 16824, Parent CMD: askpass.sh, Child PID: 16833, Child CMD: askpass.sh
Parent PID: 16824, Parent CMD: askpass.sh, Child PID: 16834, Child CMD: askpass.sh
Parent PID: 16823, Parent CMD: git-remote-http, Child PID: 16835, Child CMD: git-remote-http
Parent PID: 16835, Parent CMD: askpass.sh, Child PID: 16836, Child CMD: askpass.sh
Parent PID: 16835, Parent CMD: askpass.sh, Child PID: 16837, Child CMD: askpass.sh
Parent PID: 16837, Parent CMD: node, Child PID: 16838, Child CMD: node
Parent PID: 16837, Parent CMD: node, Child PID: 16839, Child CMD: node
Parent PID: 16837, Parent CMD: node, Child PID: 16840, Child CMD: node
Parent PID: 16837, Parent CMD: node, Child PID: 16841, Child CMD: node
Parent PID: 16837, Parent CMD: node, Child PID: 16842, Child CMD: node
Parent PID: 16837, Parent CMD: node, Child PID: 16843, Child CMD: node
Parent PID: 16835, Parent CMD: askpass.sh, Child PID: 16844, Child CMD: askpass.sh
Parent PID: 16835, Parent CMD: askpass.sh, Child PID: 16845, Child CMD: askpass.sh


kill process 16677
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:sched:sched_process_fork\n{\n    printf(\"Parent PID: %d, Parent CMD: %s, Child PID: %d, Child CMD: %s\\n\", pid, comm, args->child_pid, args->child_comm);\n}", "stdout": "Attaching 1 probe...\nParent PID: 1624, Parent CMD: node, Child PID: 16688, Child CMD: node\nParent PID: 16688, Parent CMD: git, Child PID: 16689, Child CMD: git\nParent PID: 1624, Parent CMD: node, Child PID: 16690, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16691, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16692, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16693, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16694, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16695, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16696, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16697, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16698, Child CMD: node\nParent PID: 16698, Parent CMD: git, Child PID: 16699, Child CMD: git\nParent PID: 16699, Parent CMD: sh, Child PID: 16700, Child CMD: sh\nParent PID: 16700, Parent CMD: git-editor.sh, Child PID: 16701, Child CMD: git-editor.sh\nParent PID: 16701, Parent CMD: node, Child PID: 16702, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16703, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16704, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16705, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16706, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16707, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16708, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16709, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16710, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16711, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16712, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16713, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16714, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16715, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16716, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16717, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16718, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16719, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16720, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16721, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16722, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16723, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16724, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16725, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16726, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16727, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16728, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16729, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16730, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16731, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16732, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16733, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16734, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16735, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16736, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16737, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16738, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16739, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16740, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16741, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16742, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16743, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16744, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16745, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16746, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16747, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16748, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16749, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16750, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16751, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16752, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16753, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16754, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16755, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16756, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16757, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16758, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16759, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16760, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16761, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16762, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16763, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16764, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16765, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16766, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16767, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16768, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16769, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16770, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16771, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16772, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16773, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16774, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16775, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16776, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16777, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16778, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16779, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16780, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16781, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16782, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16783, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16784, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16785, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16786, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16787, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16788, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16789, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16790, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16791, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16792, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16793, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16794, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16795, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16796, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16797, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16798, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16799, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16800, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16801, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16802, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16803, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16804, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16805, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16806, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16807, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16808, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16809, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16810, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16811, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16812, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16813, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16814, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16815, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16816, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16817, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16818, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16819, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16820, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16821, Child CMD: node\nParent PID: 16821, Parent CMD: git, Child PID: 16822, Child CMD: git\nParent PID: 16822, Parent CMD: git, Child PID: 16823, Child CMD: git\nParent PID: 16823, Parent CMD: git-remote-http, Child PID: 16824, Child CMD: git-remote-http\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16825, Child CMD: askpass.sh\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16826, Child CMD: askpass.sh\nParent PID: 16826, Parent CMD: node, Child PID: 16827, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16828, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16829, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16830, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16831, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16832, Child CMD: node\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16833, Child CMD: askpass.sh\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16834, Child CMD: askpass.sh\nParent PID: 16823, Parent CMD: git-remote-http, Child PID: 16835, Child CMD: git-remote-http\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16836, Child CMD: askpass.sh\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16837, Child CMD: askpass.sh\nParent PID: 16837, Parent CMD: node, Child PID: 16838, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16839, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16840, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16841, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16842, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16843, Child CMD: node\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16844, Child CMD: askpass.sh\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16845, Child CMD: askpass.sh\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:sched:sched_process_fork\n{\n    printf("Parent PID: %d, Parent CMD: %s, Child PID: %d, Child CMD: %s\\n", pid, comm, args->child_pid, args->child_comm);\n}', 'stdout': 'Attaching 1 probe...\nParent PID: 1624, Parent CMD: node, Child PID: 16688, Child CMD: node\nParent PID: 16688, Parent CMD: git, Child PID: 16689, Child CMD: git\nParent PID: 1624, Parent CMD: node, Child PID: 16690, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16691, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16692, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16693, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16694, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16695, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16696, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16697, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16698, Child CMD: node\nParent PID: 16698, Parent CMD: git, Child PID: 16699, Child CMD: git\nParent PID: 16699, Parent CMD: sh, Child PID: 16700, Child CMD: sh\nParent PID: 16700, Parent CMD: git-editor.sh, Child PID: 16701, Child CMD: git-editor.sh\nParent PID: 16701, Parent CMD: node, Child PID: 16702, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16703, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16704, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16705, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16706, Child CMD: node\nParent PID: 16701, Parent CMD: node, Child PID: 16707, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16708, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16709, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16710, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16711, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16712, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16713, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16714, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16715, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16716, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16717, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16718, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16719, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16720, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16721, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16722, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16723, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16724, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16725, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16726, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16727, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16728, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16729, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16730, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16731, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16732, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16733, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16734, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16735, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16736, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16737, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16738, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16739, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16740, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16741, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16742, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16743, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16744, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16745, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16746, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16747, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16748, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16749, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16750, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16751, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16752, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16753, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16754, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16755, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16756, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16757, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16758, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16759, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16760, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16761, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16762, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16763, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16764, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16765, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16766, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16767, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16768, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16769, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16770, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16771, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16772, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16773, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16774, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16775, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16776, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16777, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16778, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16779, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16780, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16781, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16782, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16783, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16784, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16785, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16786, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16787, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16788, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16789, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16790, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16791, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16792, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16793, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16794, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16795, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16796, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16797, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16798, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16799, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16800, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16801, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16802, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16803, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16804, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16805, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16806, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16807, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16808, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16809, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16810, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16811, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16812, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16813, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16814, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16815, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16816, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16817, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16818, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16819, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16820, Child CMD: node\nParent PID: 1624, Parent CMD: node, Child PID: 16821, Child CMD: node\nParent PID: 16821, Parent CMD: git, Child PID: 16822, Child CMD: git\nParent PID: 16822, Parent CMD: git, Child PID: 16823, Child CMD: git\nParent PID: 16823, Parent CMD: git-remote-http, Child PID: 16824, Child CMD: git-remote-http\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16825, Child CMD: askpass.sh\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16826, Child CMD: askpass.sh\nParent PID: 16826, Parent CMD: node, Child PID: 16827, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16828, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16829, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16830, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16831, Child CMD: node\nParent PID: 16826, Parent CMD: node, Child PID: 16832, Child CMD: node\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16833, Child CMD: askpass.sh\nParent PID: 16824, Parent CMD: askpass.sh, Child PID: 16834, Child CMD: askpass.sh\nParent PID: 16823, Parent CMD: git-remote-http, Child PID: 16835, Child CMD: git-remote-http\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16836, Child CMD: askpass.sh\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16837, Child CMD: askpass.sh\nParent PID: 16837, Parent CMD: node, Child PID: 16838, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16839, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16840, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16841, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16842, Child CMD: node\nParent PID: 16837, Parent CMD: node, Child PID: 16843, Child CMD: node\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16844, Child CMD: askpass.sh\nParent PID: 16835, Parent CMD: askpass.sh, Child PID: 16845, Child CMD: askpass.sh\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 2 out of 40 test cases so far.

Running test case: Monitors the rate of memory allocations in the kernel and print histogram of the allocation sizes.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Monitors the rate of memory allocations in the kernel and print histogram of the allocation sizes.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the kernel OOM killer and prints basic details, including the system load averages, providing context on the system state at the time of the OOM.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/oom.h>
#endif

BEGIN
{
	printf("Tracing oom_kill_process()... Hit Ctrl-C to end.\n");
}

kprobe:oom_kill_process
{
	$oc = (struct oom_control *)arg0;
	time("%H:%M:%S ");
	printf("Triggered by PID %d (\"%s\"), ", pid, comm);
	printf("OOM kill of PID %d (\"%s\"), %d pages, loadavg: ",
	    $oc->chosen->pid, $oc->chosen->comm, $oc->totalpages);
	cat("/proc/loadavg");
}

```

example: Write a BPF code that traces block device I/O and creates histograms of I/O size in bytes for each process.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

tracepoint:block:block_rq_issue
{
	@[args.comm] = hist(args.bytes);
}

END
{
	printf("\nI/O size (bytes) histograms by process name:");
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Monitors the rate of memory allocations in the kernel and print histogram of the allocation sizes.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'kprobe:kmalloc { @[comm] = hist(arg0); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmalloc { @[comm] = hist(arg0); }
Attaching 1 probe...
kill process 16863
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmalloc { @[comm] = hist(arg0); }", "stdout": "Attaching 1 probe...\n", "stderr": "stdin:1:1-15: WARNING: kmalloc is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nkprobe:kmalloc { @[comm] = hist(arg0); }\n~~~~~~~~~~~~~~\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kprobe:kmalloc'\n", "returncode": 255}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmalloc { @[comm] = hist(arg0); }', 'stdout': 'Attaching 1 probe...\n', 'stderr': 'stdin:1:1-15: WARNING: kmalloc is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nkprobe:kmalloc { @[comm] = hist(arg0); }\n~~~~~~~~~~~~~~\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: \'kprobe:kmalloc\'\n', 'returncode': 255}
Test case completed. Output saved to: output.json

Passed 2 out of 40 test cases so far.

Running test case: Traces process resource limits (e.g., memory, file descriptors) and logs when limits are exceeded.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Traces process resource limits (e.g., memory, file descriptors) and logs when limits are exceeded.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces block device I/O and creates histograms of I/O size in bytes for each process.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

tracepoint:block:block_rq_issue
{
	@[args.comm] = hist(args.bytes);
}

END
{
	printf("\nI/O size (bytes) histograms by process name:");
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Traces process resource limits (e.g., memory, file descriptors) and logs when limits are exceeded.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN { printf("Tracing process resource limits... Hit Ctrl-C to end.\\n"); }\n\ntracepoint:syscalls:sys_enter_setrlimit, tracepoint:syscalls:sys_enter_prlimit64 { @limits[comm, args->resource] = args->rlim->rlim_cur; }\n\ntracepoint:syscalls:sys_enter_open { @files[comm] = count(); if (@files[comm] > @limits[comm, RLIMIT_NOFILE]) { printf("%s exceeded file descriptor limit\\n", comm); } }\n\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf("%s exceeded memory limit\\n", comm); } }\n\nEND { clear(@limits); clear(@files); clear(@mem); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Tracing process resource limits... Hit Ctrl-C to end.\n"); }

tracepoint:syscalls:sys_enter_setrlimit, tracepoint:syscalls:sys_enter_prlimit64 { @limits[comm, args->resource] = args->rlim->rlim_cur; }

tracepoint:syscalls:sys_enter_open { @files[comm] = count(); if (@files[comm] > @limits[comm, RLIMIT_NOFILE]) { printf("%s exceeded file descriptor limit\n", comm); } }

tracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf("%s exceeded memory limit\n", comm); } }

END { clear(@limits); clear(@files); clear(@mem); }
kill process 16915
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Tracing process resource limits... Hit Ctrl-C to end.\\n\"); }\n\ntracepoint:syscalls:sys_enter_setrlimit, tracepoint:syscalls:sys_enter_prlimit64 { @limits[comm, args->resource] = args->rlim->rlim_cur; }\n\ntracepoint:syscalls:sys_enter_open { @files[comm] = count(); if (@files[comm] > @limits[comm, RLIMIT_NOFILE]) { printf(\"%s exceeded file descriptor limit\\n\", comm); } }\n\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf(\"%s exceeded memory limit\\n\", comm); } }\n\nEND { clear(@limits); clear(@files); clear(@mem); }", "stdout": "", "stderr": "stdin:3:116-126: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_prlimit64' does not contain a field named 'rlim'\ntracepoint:syscalls:sys_enter_setrlimit, tracepoint:syscalls:sys_enter_prlimit64 { @limits[comm, args->resource] = args->rlim->rlim_cur; }\n                                                                                                                   ~~~~~~~~~~\nstdin:5:95-108: ERROR: Unknown identifier: 'RLIMIT_NOFILE'\ntracepoint:syscalls:sys_enter_open { @files[comm] = count(); if (@files[comm] > @limits[comm, RLIMIT_NOFILE]) { printf(\"%s exceeded file descriptor limit\\n\", comm); } }\n                                                                                              ~~~~~~~~~~~~~\nstdin:7:86-99: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_brk' does not contain a field named 'len'\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf(\"%s exceeded memory limit\\n\", comm); } }\n                                                                                     ~~~~~~~~~~~~~\nstdin:7:133-142: ERROR: Unknown identifier: 'RLIMIT_AS'\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf(\"%s exceeded memory limit\\n\", comm); } }\n                                                                                                                                    ~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Tracing process resource limits... Hit Ctrl-C to end.\\n"); }\n\ntracepoint:syscalls:sys_enter_setrlimit, tracepoint:syscalls:sys_enter_prlimit64 { @limits[comm, args->resource] = args->rlim->rlim_cur; }\n\ntracepoint:syscalls:sys_enter_open { @files[comm] = count(); if (@files[comm] > @limits[comm, RLIMIT_NOFILE]) { printf("%s exceeded file descriptor limit\\n", comm); } }\n\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf("%s exceeded memory limit\\n", comm); } }\n\nEND { clear(@limits); clear(@files); clear(@mem); }', 'stdout': '', 'stderr': 'stdin:3:116-126: ERROR: Struct/union of type \'struct _tracepoint_syscalls_sys_enter_prlimit64\' does not contain a field named \'rlim\'\ntracepoint:syscalls:sys_enter_setrlimit, tracepoint:syscalls:sys_enter_prlimit64 { @limits[comm, args->resource] = args->rlim->rlim_cur; }\n                                                                                                                   ~~~~~~~~~~\nstdin:5:95-108: ERROR: Unknown identifier: \'RLIMIT_NOFILE\'\ntracepoint:syscalls:sys_enter_open { @files[comm] = count(); if (@files[comm] > @limits[comm, RLIMIT_NOFILE]) { printf("%s exceeded file descriptor limit\\n", comm); } }\n                                                                                              ~~~~~~~~~~~~~\nstdin:7:86-99: ERROR: Struct/union of type \'struct _tracepoint_syscalls_sys_enter_brk\' does not contain a field named \'len\'\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf("%s exceeded memory limit\\n", comm); } }\n                                                                                     ~~~~~~~~~~~~~\nstdin:7:133-142: ERROR: Unknown identifier: \'RLIMIT_AS\'\ntracepoint:syscalls:sys_enter_brk, tracepoint:syscalls:sys_enter_mmap { @mem[comm] = sum(args->len); if (@mem[comm] > @limits[comm, RLIMIT_AS]) { printf("%s exceeded memory limit\\n", comm); } }\n                                                                                                                                    ~~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 2 out of 40 test cases so far.

Running test case: Traces process signals and logs the signal names and process IDs affected.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Traces process signals and logs the signal names and process IDs affected.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Please write a BPF code that traces signals issued by the kill() syscall and prints information such as the timestamp, process ID, command, signal, target process ID, and the result of the kill() syscall.

```
BEGIN
{
	printf("Tracing kill() signals... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %-4s %-6s %s\n", "TIME", "PID", "COMM", "SIG",
	    "TPID", "RESULT");
}

tracepoint:syscalls:sys_enter_kill
{
	@tpid[tid] = args.pid;
	@tsig[tid] = args.sig;
}

tracepoint:syscalls:sys_exit_kill
/@tpid[tid]/
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %-4d %-6d %d\n", pid, comm, @tsig[tid], @tpid[tid],
	    args.ret);
	delete(@tpid[tid]);
	delete(@tsig[tid]);
}

```

example: Write a BPF code that counts the number of system calls and the number of processes. It also prints the top 10 system call IDs and the top 10 processes at the end.

```
BEGIN
{
	printf("Counting syscalls... Hit Ctrl-C to end.\n");
	// ausyscall --dump | awk 'NR > 1 { printf("\t@sysname[%d] = \"%s\";\n", $1, $2); }'
}

tracepoint:raw_syscalls:sys_enter
{
	@syscall[args.id] = count();
	@process[comm] = count();
}

END
{
	printf("\nTop 10 syscalls IDs:\n");
	print(@syscall, 10);
	clear(@syscall);

	printf("\nTop 10 processes:\n");
	print(@process, 10);
	clear(@process);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Traces process signals and logs the signal names and process IDs affected.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:signal:signal_deliver { printf("Signal %s delivered to PID %d\\n", str(sig), pid); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:signal:signal_deliver { printf("Signal %s delivered to PID %d\n", str(sig), pid); }
kill process 16930
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:signal:signal_deliver { printf(\"Signal %s delivered to PID %d\\n\", str(sig), pid); }", "stdout": "", "stderr": "stdin:1:78-85: ERROR: Unknown identifier: 'sig'\ntracepoint:signal:signal_deliver { printf(\"Signal %s delivered to PID %d\\n\", str(sig), pid); }\n                                                                             ~~~~~~~\nstdin:1:78-86: ERROR: str() expects an integer or a pointer type as first argument (none provided)\ntracepoint:signal:signal_deliver { printf(\"Signal %s delivered to PID %d\\n\", str(sig), pid); }\n                                                                             ~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:signal:signal_deliver { printf("Signal %s delivered to PID %d\\n", str(sig), pid); }', 'stdout': '', 'stderr': 'stdin:1:78-85: ERROR: Unknown identifier: \'sig\'\ntracepoint:signal:signal_deliver { printf("Signal %s delivered to PID %d\\n", str(sig), pid); }\n                                                                             ~~~~~~~\nstdin:1:78-86: ERROR: str() expects an integer or a pointer type as first argument (none provided)\ntracepoint:signal:signal_deliver { printf("Signal %s delivered to PID %d\\n", str(sig), pid); }\n                                                                             ~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 2 out of 40 test cases so far.

Running test case: Monitors the rate of system call errors (e.g., ENOENT, EACCES) for specific processes
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Monitors the rate of system call errors (e.g., ENOENT, EACCES) for specific processes

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces the syscalls statfs(), statx(), newstat(), and newlstat(), providing information about the PID, process name, error code, and path being accessed.

```
BEGIN
{
	printf("Tracing stat syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %3s %s\n", "PID", "COMM", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_statfs
{
	@filename[tid] = args.pathname;
}

tracepoint:syscalls:sys_enter_statx,
tracepoint:syscalls:sys_enter_newstat,
tracepoint:syscalls:sys_enter_newlstat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_statfs,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_newstat,
tracepoint:syscalls:sys_exit_newlstat
/@filename[tid]/
{
	$ret = args.ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %3d %s\n", pid, comm, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Monitors the rate of system call errors (e.g., ENOENT, EACCES) for specific processes

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing syscall errors... Hit Ctrl-C to end.\\n");\n\tprintf("%-6s %-16s %-6s %-16s\\n", "PID", "COMM", "ERR", "SYSCALL");\n}\n\ntracepoint:syscalls:sys_enter\n{\n\t@syscall[tid] = args->id;\n}\n\ntracepoint:syscalls:sys_exit\n/@syscall[tid]/\n{\n\t$ret = args->ret;\n\t$errno = $ret >= 0 ? 0 : - $ret;\n\n\tif ($errno != 0) {\n\t\tprintf("%-6d %-16s %-6d %-16s\\n", pid, comm, $errno, syscall(@syscall[tid]));\n\t\t@err_count[comm, syscall(@syscall[tid])] = count();\n\t}\n\n\tdelete(@syscall[tid]);\n}\n\ninterval:s:1\n{\n\tprintf("\\n%-16s %-16s %-6s\\n", "COMM", "SYSCALL", "COUNT");\n\tprint(@err_count);\n\tclear(@err_count);\n}\n\nEND\n{\n\tclear(@syscall);\n\tclear(@err_count);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing syscall errors... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %-6s %-16s\n", "PID", "COMM", "ERR", "SYSCALL");
}

tracepoint:syscalls:sys_enter
{
	@syscall[tid] = args->id;
}

tracepoint:syscalls:sys_exit
/@syscall[tid]/
{
	$ret = args->ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	if ($errno != 0) {
		printf("%-6d %-16s %-6d %-16s\n", pid, comm, $errno, syscall(@syscall[tid]));
		@err_count[comm, syscall(@syscall[tid])] = count();
	}

	delete(@syscall[tid]);
}

interval:s:1
{
	printf("\n%-16s %-16s %-6s\n", "COMM", "SYSCALL", "COUNT");
	print(@err_count);
	clear(@err_count);
}

END
{
	clear(@syscall);
	clear(@err_count);
}
kill process 16945
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing syscall errors... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-6s %-16s %-6s %-16s\\n\", \"PID\", \"COMM\", \"ERR\", \"SYSCALL\");\n}\n\ntracepoint:syscalls:sys_enter\n{\n\t@syscall[tid] = args->id;\n}\n\ntracepoint:syscalls:sys_exit\n/@syscall[tid]/\n{\n\t$ret = args->ret;\n\t$errno = $ret >= 0 ? 0 : - $ret;\n\n\tif ($errno != 0) {\n\t\tprintf(\"%-6d %-16s %-6d %-16s\\n\", pid, comm, $errno, syscall(@syscall[tid]));\n\t\t@err_count[comm, syscall(@syscall[tid])] = count();\n\t}\n\n\tdelete(@syscall[tid]);\n}\n\ninterval:s:1\n{\n\tprintf(\"\\n%-16s %-16s %-6s\\n\", \"COMM\", \"SYSCALL\", \"COUNT\");\n\tprint(@err_count);\n\tclear(@err_count);\n}\n\nEND\n{\n\tclear(@syscall);\n\tclear(@err_count);\n}", "stdout": "", "stderr": "stdin:19:56-63: ERROR: Unknown function: syscall\n        printf(\"%-6d %-16s %-6d %-16s\\n\", pid, comm, $errno, syscall(@syscall[tid]));\n                                                             ~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing syscall errors... Hit Ctrl-C to end.\\n");\n\tprintf("%-6s %-16s %-6s %-16s\\n", "PID", "COMM", "ERR", "SYSCALL");\n}\n\ntracepoint:syscalls:sys_enter\n{\n\t@syscall[tid] = args->id;\n}\n\ntracepoint:syscalls:sys_exit\n/@syscall[tid]/\n{\n\t$ret = args->ret;\n\t$errno = $ret >= 0 ? 0 : - $ret;\n\n\tif ($errno != 0) {\n\t\tprintf("%-6d %-16s %-6d %-16s\\n", pid, comm, $errno, syscall(@syscall[tid]));\n\t\t@err_count[comm, syscall(@syscall[tid])] = count();\n\t}\n\n\tdelete(@syscall[tid]);\n}\n\ninterval:s:1\n{\n\tprintf("\\n%-16s %-16s %-6s\\n", "COMM", "SYSCALL", "COUNT");\n\tprint(@err_count);\n\tclear(@err_count);\n}\n\nEND\n{\n\tclear(@syscall);\n\tclear(@err_count);\n}', 'stdout': '', 'stderr': 'stdin:19:56-63: ERROR: Unknown function: syscall\n        printf("%-6d %-16s %-6d %-16s\\n", pid, comm, $errno, syscall(@syscall[tid]));\n                                                             ~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 2 out of 40 test cases so far.

Running test case: Captures TCP SYN packets and logs the source and destination IP addresses and ports
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Captures TCP SYN packets and logs the source and destination IP addresses and ports

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces TCP connections by dynamically tracing kernel functions and prints out the time, PID, and addresses and ports of the source and destination of each connection.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
  printf("Tracing tcp connections. Hit Ctrl-C to end.\n");
  printf("%-8s %-8s %-16s ", "TIME", "PID", "COMM");
  printf("%-39s %-6s %-39s %-6s\n", "SADDR", "SPORT", "DADDR", "DPORT");
}

kprobe:tcp_connect
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = bswap($dport);

    time("%H:%M:%S ");
    printf("%-8d %-16s ", pid, comm);
    printf("%-39s %-6d %-39s %-6d\n", $saddr, $lport, $daddr, $dport);
  }
}

```

example: Write a BPF code that traces the TCP SYN backlog size and creates a histogram of the backlog sizes, also indicating if any SYN packets are being dropped.

```
#ifndef BPFTRACE_HAVE_BTF
#include <net/sock.h>
#endif

BEGIN
{
	printf("Tracing SYN backlog size. Ctrl-C to end.\n");
}

kprobe:tcp_v4_syn_recv_sock,
kprobe:tcp_v6_syn_recv_sock
{
	$sock = (struct sock *)arg0;
	@backlog[$sock->sk_max_ack_backlog & 0xffffffff] =
	    hist($sock->sk_ack_backlog);
	if ($sock->sk_ack_backlog > $sock->sk_max_ack_backlog) {
		time("%H:%M:%S dropping a SYN.\n");
	}
}

END
{
	printf("\n@backlog[backlog limit]: histogram of backlog size\n");
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Captures TCP SYN packets and logs the source and destination IP addresses and ports

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <net/sock.h>\n#include <bcc/proto.h>\n\nkprobe:tcp_v4_connect\n{\n  $sk = (struct sock *)arg0;\n  $daddr = inet_ntoa($sk->__sk_common.skc_daddr);\n  $saddr = inet_ntoa($sk->__sk_common.skc_rcv_saddr);\n  $dport = ntohs($sk->__sk_common.skc_dport);\n  $sport = $sk->__sk_common.skc_num;\n  printf("%s:%d -> %s:%d\\n", $saddr, $sport, $daddr, $dport);\n}\n\nkprobe:tcp_v6_connect\n{\n  $sk = (struct sock *)arg0;\n  $daddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr32);\n  $saddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr32);\n  $dport = ntohs($sk->__sk_common.skc_dport);\n  $sport = $sk->__sk_common.skc_num;\n  printf("%s:%d -> %s:%d\\n", $saddr, $sport, $daddr, $dport);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>
#include <bcc/proto.h>

kprobe:tcp_v4_connect
{
  $sk = (struct sock *)arg0;
  $daddr = inet_ntoa($sk->__sk_common.skc_daddr);
  $saddr = inet_ntoa($sk->__sk_common.skc_rcv_saddr);
  $dport = ntohs($sk->__sk_common.skc_dport);
  $sport = $sk->__sk_common.skc_num;
  printf("%s:%d -> %s:%d\n", $saddr, $sport, $daddr, $dport);
}

kprobe:tcp_v6_connect
{
  $sk = (struct sock *)arg0;
  $daddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr32);
  $saddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr32);
  $dport = ntohs($sk->__sk_common.skc_dport);
  $sport = $sk->__sk_common.skc_num;
  printf("%s:%d -> %s:%d\n", $saddr, $sport, $daddr, $dport);
}
kill process 16952
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>\n#include <bcc/proto.h>\n\nkprobe:tcp_v4_connect\n{\n  $sk = (struct sock *)arg0;\n  $daddr = inet_ntoa($sk->__sk_common.skc_daddr);\n  $saddr = inet_ntoa($sk->__sk_common.skc_rcv_saddr);\n  $dport = ntohs($sk->__sk_common.skc_dport);\n  $sport = $sk->__sk_common.skc_num;\n  printf(\"%s:%d -> %s:%d\\n\", $saddr, $sport, $daddr, $dport);\n}\n\nkprobe:tcp_v6_connect\n{\n  $sk = (struct sock *)arg0;\n  $daddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr32);\n  $saddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr32);\n  $dport = ntohs($sk->__sk_common.skc_dport);\n  $sport = $sk->__sk_common.skc_num;\n  printf(\"%s:%d -> %s:%d\\n\", $saddr, $sport, $daddr, $dport);\n}", "stdout": "", "stderr": "stdin:7:12-21: ERROR: Unknown function: inet_ntoa\n  $daddr = inet_ntoa($sk->__sk_common.skc_daddr);\n           ~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>\n#include <bcc/proto.h>\n\nkprobe:tcp_v4_connect\n{\n  $sk = (struct sock *)arg0;\n  $daddr = inet_ntoa($sk->__sk_common.skc_daddr);\n  $saddr = inet_ntoa($sk->__sk_common.skc_rcv_saddr);\n  $dport = ntohs($sk->__sk_common.skc_dport);\n  $sport = $sk->__sk_common.skc_num;\n  printf("%s:%d -> %s:%d\\n", $saddr, $sport, $daddr, $dport);\n}\n\nkprobe:tcp_v6_connect\n{\n  $sk = (struct sock *)arg0;\n  $daddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr32);\n  $saddr = inet_ntop(AF_INET6, $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr32);\n  $dport = ntohs($sk->__sk_common.skc_dport);\n  $sport = $sk->__sk_common.skc_num;\n  printf("%s:%d -> %s:%d\\n", $saddr, $sport, $daddr, $dport);\n}', 'stdout': '', 'stderr': 'stdin:7:12-21: ERROR: Unknown function: inet_ntoa\n  $daddr = inet_ntoa($sk->__sk_common.skc_daddr);\n           ~~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 2 out of 40 test cases so far.

Running test case: monitors the rate of system calls made by specific user-space processes and identifies heavily used system calls
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

monitors the rate of system calls made by specific user-space processes and identifies heavily used system calls

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that counts the number of system calls and the number of processes. It also prints the top 10 system call IDs and the top 10 processes at the end.

```
BEGIN
{
	printf("Counting syscalls... Hit Ctrl-C to end.\n");
	// ausyscall --dump | awk 'NR > 1 { printf("\t@sysname[%d] = \"%s\";\n", $1, $2); }'
}

tracepoint:raw_syscalls:sys_enter
{
	@syscall[args.id] = count();
	@process[comm] = count();
}

END
{
	printf("\nTop 10 syscalls IDs:\n");
	print(@syscall, 10);
	clear(@syscall);

	printf("\nTop 10 processes:\n");
	print(@process, 10);
	clear(@process);
}

```

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

monitors the rate of system calls made by specific user-space processes and identifies heavily used system calls

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN { printf("Monitoring system calls... Hit Ctrl-C to end.\\n"); }\n\ntracepoint:raw_syscalls:sys_enter { @syscall[comm, args->id] = count(); }\n\ninterval:s:1 { printf("\\n"); time("%H:%M:%S  "); print(@syscall); clear(@syscall); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Monitoring system calls... Hit Ctrl-C to end.\n"); }

tracepoint:raw_syscalls:sys_enter { @syscall[comm, args->id] = count(); }

interval:s:1 { printf("\n"); time("%H:%M:%S  "); print(@syscall); clear(@syscall); }
Attaching 3 probes...
Monitoring system calls... Hit Ctrl-C to end.

10:51:46  @syscall[bpftrace, 298]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[containerd, 1]: 1
@syscall[node, 39]: 1
@syscall[HangDetector, 202]: 1
@syscall[bpftrace, 8]: 1
@syscall[containerd, 0]: 1
@syscall[node, 47]: 1
@syscall[node, 280]: 1
@syscall[bpftrace, 32]: 1
@syscall[node, 332]: 1
@syscall[node, 230]: 1
@syscall[cpptools, 202]: 2
@syscall[bpftrace, 262]: 2
@syscall[bpftrace, 1]: 2
@syscall[bpftrace, 186]: 2
@syscall[bpftrace, 33]: 2
@syscall[node, 62]: 2
@syscall[bpftrace, 0]: 2
@syscall[python3, 0]: 2
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[multipathd, 1]: 2
@syscall[bpftrace, 257]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 0]: 3
@syscall[bpftrace, 3]: 3
@syscall[sshd, 1]: 3
@syscall[bpftrace, 16]: 3
@syscall[node, 262]: 5
@syscall[node, 16]: 5
@syscall[node, 3]: 6
@syscall[node, 257]: 6
@syscall[sshd, 271]: 6
@syscall[bpftrace, 232]: 11
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 16
@syscall[node, 0]: 22
@syscall[bpftrace, 321]: 26
@syscall[containerd, 35]: 29
@syscall[node, 202]: 39
@syscall[node, 232]: 52
@syscall[vmtoolsd, 100]: 54
@syscall[containerd, 202]: 88
@syscall[containerd, 281]: 89

10:51:47  @syscall[HangDetector, 202]: 1
@syscall[node, 230]: 1
@syscall[multipathd, 230]: 1
@syscall[containerd, 234]: 1
@syscall[dockerd, 35]: 1
@syscall[bpftrace, 1]: 1
@syscall[python3, 0]: 1
@syscall[bpftrace, 186]: 1
@syscall[containerd, 39]: 1
@syscall[containerd, 15]: 1
@syscall[node, 280]: 1
@syscall[node, 332]: 1
@syscall[node, 4]: 1
@syscall[vmtoolsd, 262]: 2
@syscall[dockerd, 281]: 2
@syscall[node, 7]: 2
@syscall[node, 47]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 39]: 3
@syscall[multipathd, 202]: 3
@syscall[dockerd, 202]: 3
@syscall[sshd, 318]: 4
@syscall[node, 62]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 0]: 7
@syscall[sshd, 1]: 7
@syscall[cpptools, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 271]: 14
@syscall[sshd, 14]: 28
@syscall[node, 1]: 29
@syscall[containerd, 35]: 30
@syscall[node, 0]: 34
@syscall[vmtoolsd, 100]: 54
@syscall[bpftrace, 321]: 58
@syscall[node, 202]: 77
@syscall[node, 232]: 86
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 99

10:51:48  @syscall[HangDetector, 202]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 1]: 1
@syscall[containerd, 0]: 1
@syscall[cpptools, 19]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[containerd, 1]: 1
@syscall[multipathd, 230]: 1
@syscall[cpptools, 0]: 1
@syscall[node, 47]: 1
@syscall[node, 280]: 1
@syscall[python3, 0]: 2
@syscall[sshd, 318]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 332]: 2
@syscall[sshd, 0]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[node, 7]: 3
@syscall[node, 39]: 3
@syscall[node, 62]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[cpptools, 202]: 6
@syscall[sshd, 271]: 6
@syscall[node, 257]: 7
@syscall[node, 3]: 7
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 31
@syscall[node, 232]: 47
@syscall[bpftrace, 321]: 51
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 64
@syscall[containerd, 202]: 92
@syscall[containerd, 281]: 94

10:51:49  @syscall[node, 230]: 1
@syscall[node, 332]: 1
@syscall[bpftrace, 1]: 1
@syscall[node, 280]: 1
@syscall[node, 47]: 1
@syscall[bpftrace, 186]: 1
@syscall[python3, 0]: 1
@syscall[HangDetector, 202]: 1
@syscall[node, 39]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[node, 62]: 2
@syscall[containerd, 0]: 2
@syscall[containerd, 1]: 2
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[multipathd, 1]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[sshd, 0]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 271]: 6
@syscall[cpptools, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 10
@syscall[sshd, 14]: 12
@syscall[node, 1]: 16
@syscall[node, 0]: 22
@syscall[containerd, 35]: 29
@syscall[node, 232]: 40
@syscall[vmtoolsd, 100]: 49
@syscall[bpftrace, 321]: 50
@syscall[node, 202]: 59
@syscall[containerd, 202]: 88
@syscall[containerd, 281]: 91

10:51:50  @syscall[node, 230]: 1
@syscall[systemd, 232]: 1
@syscall[cpptools, 0]: 1
@syscall[systemd-timesyn, 41]: 1
@syscall[python3, 0]: 1
@syscall[multipathd, 230]: 1
@syscall[systemd-timesyn, 104]: 1
@syscall[systemd, 16]: 1
@syscall[systemd-timesyn, 102]: 1
@syscall[systemd, 257]: 1
@syscall[systemd, 47]: 1
@syscall[systemd, 186]: 1
@syscall[systemd-timesyn, 262]: 1
@syscall[node, 4]: 1
@syscall[bpftrace, 1]: 1
@syscall[cpptools, 19]: 1
@syscall[systemd-timesyn, 108]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 39]: 1
@syscall[systemd, 262]: 1
@syscall[node, 280]: 1
@syscall[systemd-timesyn, 107]: 1
@syscall[node, 47]: 1
@syscall[systemd-timesyn, 257]: 1
@syscall[systemd-timesyn, 280]: 1
@syscall[systemd-timesyn, 232]: 1
@syscall[HangDetector, 202]: 1
@syscall[systemd-timesyn, 0]: 1
@syscall[systemd, 3]: 1
@syscall[systemd-timesyn, 186]: 1
@syscall[systemd-timesyn, 46]: 1
@syscall[containerd, 15]: 2
@syscall[node, 62]: 2
@syscall[systemd-timesyn, 55]: 2
@syscall[containerd, 39]: 2
@syscall[systemd, 0]: 2
@syscall[node, 7]: 2
@syscall[systemd-timesyn, 3]: 2
@syscall[systemd-timesyn, 286]: 2
@syscall[systemd-timesyn, 54]: 2
@syscall[sshd, 318]: 2
@syscall[node, 332]: 2
@syscall[containerd, 234]: 2
@syscall[sshd, 0]: 3
@syscall[sshd, 1]: 3
@syscall[multipathd, 1]: 3
@syscall[containerd, 1]: 3
@syscall[containerd, 0]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[sshd, 271]: 6
@syscall[cpptools, 202]: 6
@syscall[node, 3]: 7
@syscall[node, 257]: 7
@syscall[multipathd, 202]: 8
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 32
@syscall[node, 232]: 44
@syscall[vmtoolsd, 100]: 54
@syscall[bpftrace, 321]: 56
@syscall[node, 202]: 66
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 96

10:51:51  @syscall[systemd-timesyn, 46]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[python3, 0]: 1
@syscall[systemd-timesyn, 41]: 1
@syscall[systemd-timesyn, 44]: 1
@syscall[systemd-timesyn, 47]: 1
@syscall[systemd-timesyn, 0]: 1
@syscall[HangDetector, 202]: 1
@syscall[node, 280]: 1
@syscall[systemd-timesyn, 305]: 1
@syscall[node, 332]: 1
@syscall[dbus-daemon, 232]: 1
@syscall[systemd-timesyn, 49]: 1
@syscall[bpftrace, 1]: 1
@syscall[node, 47]: 1
@syscall[sshd, 318]: 2
@syscall[dbus-daemon, 47]: 2
@syscall[systemd-timesyn, 262]: 2
@syscall[containerd, 0]: 2
@syscall[multipathd, 1]: 2
@syscall[systemd-timesyn, 286]: 2
@syscall[systemd-timesyn, 280]: 2
@syscall[systemd-timesyn, 232]: 2
@syscall[containerd, 1]: 2
@syscall[systemd-timesyn, 54]: 2
@syscall[systemd-timesyn, 186]: 2
@syscall[systemd-timesyn, 257]: 2
@syscall[systemd-timesyn, 233]: 2
@syscall[node, 39]: 3
@syscall[multipathd, 202]: 3
@syscall[systemd-timesyn, 3]: 3
@syscall[node, 7]: 3
@syscall[sshd, 1]: 3
@syscall[sshd, 0]: 3
@syscall[node, 62]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 271]: 6
@syscall[cpptools, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 16
@syscall[node, 0]: 22
@syscall[containerd, 35]: 31
@syscall[node, 232]: 44
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 59
@syscall[bpftrace, 321]: 81
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 93

10:51:52  @syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[containerd, 234]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 1]: 1
@syscall[HangDetector, 202]: 1
@syscall[containerd, 15]: 1
@syscall[containerd, 39]: 1
@syscall[irqbalance, 7]: 1
@syscall[node, 280]: 1
@syscall[node, 332]: 1
@syscall[node, 7]: 2
@syscall[vmtoolsd, 262]: 2
@syscall[irqbalance, 3]: 2
@syscall[node, 47]: 2
@syscall[multipathd, 1]: 2
@syscall[irqbalance, 257]: 2
@syscall[irqbalance, 262]: 2
@syscall[cpptools, 202]: 2
@syscall[node, 39]: 3
@syscall[sshd, 318]: 4
@syscall[node, 62]: 4
@syscall[containerd, 1]: 5
@syscall[node, 16]: 5
@syscall[containerd, 0]: 5
@syscall[node, 262]: 5
@syscall[multipathd, 202]: 6
@syscall[node, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 0]: 7
@syscall[sshd, 1]: 7
@syscall[irqbalance, 0]: 7
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 271]: 12
@syscall[sshd, 14]: 24
@syscall[node, 1]: 29
@syscall[containerd, 35]: 30
@syscall[node, 0]: 34
@syscall[vmtoolsd, 100]: 54
@syscall[node, 232]: 70
@syscall[bpftrace, 321]: 72
@syscall[containerd, 202]: 86
@syscall[containerd, 281]: 92
@syscall[node, 202]: 109

10:51:53  @syscall[node, 39]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 1]: 1
@syscall[cpptools, 19]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[containerd, 234]: 1
@syscall[HangDetector, 202]: 1
@syscall[cpptools, 0]: 1
@syscall[containerd, 15]: 1
@syscall[containerd, 39]: 1
@syscall[node, 47]: 1
@syscall[node, 280]: 1
@syscall[python3, 0]: 2
@syscall[sshd, 318]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 332]: 2
@syscall[node, 62]: 2
@syscall[sshd, 0]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[node, 7]: 3
@syscall[containerd, 0]: 4
@syscall[containerd, 1]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[sshd, 271]: 6
@syscall[node, 3]: 7
@syscall[node, 257]: 7
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[cpptools, 202]: 13
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 31
@syscall[node, 232]: 43
@syscall[bpftrace, 321]: 53
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 68
@syscall[containerd, 202]: 92
@syscall[containerd, 281]: 102

10:51:54  @syscall[node, 230]: 1
@syscall[node, 332]: 1
@syscall[bpftrace, 1]: 1
@syscall[node, 280]: 1
@syscall[node, 47]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[python3, 0]: 1
@syscall[HangDetector, 202]: 1
@syscall[multipathd, 230]: 1
@syscall[cpptools, 202]: 2
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[multipathd, 1]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[sshd, 0]: 3
@syscall[node, 39]: 3
@syscall[node, 62]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 257]: 6
@syscall[sshd, 271]: 6
@syscall[node, 3]: 6
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 10
@syscall[sshd, 14]: 12
@syscall[node, 1]: 16
@syscall[node, 0]: 22
@syscall[containerd, 35]: 30
@syscall[node, 232]: 42
@syscall[vmtoolsd, 100]: 49
@syscall[bpftrace, 321]: 52
@syscall[node, 202]: 63
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 93

10:51:55  @syscall[bpftrace, 1]: 1
@syscall[node, 230]: 1
@syscall[node, 280]: 1
@syscall[cpptools, 19]: 1
@syscall[node, 47]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[cpptools, 0]: 1
@syscall[HangDetector, 202]: 1
@syscall[multipathd, 230]: 1
@syscall[node, 39]: 1
@syscall[python3, 0]: 1
@syscall[snapd, 281]: 2
@syscall[node, 62]: 2
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[snapd, 35]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 332]: 2
@syscall[sshd, 0]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[sshd, 271]: 6
@syscall[node, 3]: 7
@syscall[node, 257]: 7
@syscall[snapd, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[cpptools, 202]: 13
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 30
@syscall[node, 232]: 41
@syscall[bpftrace, 321]: 48
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 68
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 92

10:51:56  @syscall[node, 332]: 1
@syscall[node, 280]: 1
@syscall[node, 230]: 1
@syscall[node, 47]: 1
@syscall[python3, 0]: 1
@syscall[multipathd, 230]: 1
@syscall[node, 4]: 1
@syscall[HangDetector, 202]: 1
@syscall[bpftrace, 1]: 1
@syscall[bpftrace, 186]: 1
@syscall[cpptools, 202]: 2
@syscall[node, 62]: 2
@syscall[node, 39]: 2
@syscall[sshd, 318]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[sshd, 0]: 3
@syscall[multipathd, 1]: 3
@syscall[node, 7]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 3]: 6
@syscall[sshd, 271]: 6
@syscall[node, 257]: 6
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[node, 28]: 12
@syscall[sshd, 14]: 12
@syscall[node, 1]: 17
@syscall[node, 0]: 22
@syscall[node, 10]: 24
@syscall[containerd, 35]: 30
@syscall[node, 232]: 45
@syscall[bpftrace, 321]: 50
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 86
@syscall[containerd, 202]: 89
@syscall[containerd, 281]: 90

10:51:57  @syscall[dockerd, 0]: 1
@syscall[node, 4]: 1
@syscall[dockerd, 1]: 1
@syscall[bpftrace, 186]: 1
@syscall[bpftrace, 1]: 1
@syscall[multipathd, 230]: 1
@syscall[vmtoolsd, 41]: 1
@syscall[node, 230]: 1
@syscall[python3, 0]: 1
@syscall[dockerd, 35]: 1
@syscall[vmtoolsd, 3]: 1
@syscall[HangDetector, 202]: 1
@syscall[vmtoolsd, 51]: 1
@syscall[node, 332]: 1
@syscall[node, 280]: 1
@syscall[vmtoolsd, 49]: 1
@syscall[vmtoolsd, 45]: 2
@syscall[multipathd, 1]: 2
@syscall[vmtoolsd, 262]: 2
@syscall[node, 47]: 2
@syscall[node, 7]: 2
@syscall[dockerd, 202]: 3
@syscall[multipathd, 202]: 3
@syscall[vmtoolsd, 44]: 3
@syscall[sshd, 318]: 4
@syscall[node, 262]: 5
@syscall[node, 16]: 5
@syscall[dockerd, 281]: 5
@syscall[node, 39]: 5
@syscall[node, 62]: 6
@syscall[vmtoolsd, 47]: 6
@syscall[node, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 1]: 7
@syscall[sshd, 0]: 7
@syscall[cpptools, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[sshd, 271]: 14
@syscall[vmtoolsd, 7]: 14
@syscall[sshd, 14]: 28
@syscall[node, 1]: 29
@syscall[containerd, 35]: 30
@syscall[node, 0]: 34
@syscall[bpftrace, 321]: 56
@syscall[vmtoolsd, 100]: 72
@syscall[node, 232]: 75
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 91
@syscall[node, 202]: 105

10:51:58  @syscall[bpftrace, 1]: 1
@syscall[node, 230]: 1
@syscall[node, 280]: 1
@syscall[node, 47]: 1
@syscall[cpptools, 19]: 1
@syscall[bpftrace, 186]: 1
@syscall[cpptools, 0]: 1
@syscall[HangDetector, 202]: 1
@syscall[node, 39]: 1
@syscall[python3, 0]: 1
@syscall[multipathd, 230]: 1
@syscall[node, 4]: 1
@syscall[containerd, 1]: 2
@syscall[node, 62]: 2
@syscall[containerd, 0]: 2
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 332]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 0]: 3
@syscall[sshd, 1]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[cpptools, 202]: 6
@syscall[sshd, 271]: 6
@syscall[node, 3]: 7
@syscall[node, 257]: 7
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 30
@syscall[node, 232]: 45
@syscall[vmtoolsd, 100]: 54
@syscall[bpftrace, 321]: 55
@syscall[node, 202]: 62
@syscall[containerd, 202]: 92
@syscall[containerd, 281]: 97

10:51:59  @syscall[node, 230]: 1
@syscall[node, 332]: 1
@syscall[bpftrace, 1]: 1
@syscall[node, 280]: 1
@syscall[node, 47]: 1
@syscall[bpftrace, 186]: 1
@syscall[python3, 0]: 1
@syscall[multipathd, 230]: 1
@syscall[HangDetector, 202]: 1
@syscall[node, 39]: 1
@syscall[node, 4]: 1
@syscall[node, 62]: 2
@syscall[sshd, 318]: 2
@syscall[multipathd, 1]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[sshd, 0]: 3
@syscall[node, 7]: 3
@syscall[node, 16]: 4
@syscall[node, 262]: 4
@syscall[node, 3]: 5
@syscall[node, 257]: 5
@syscall[sshd, 271]: 6
@syscall[cpptools, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[sshd, 14]: 12
@syscall[vmtoolsd, 7]: 13
@syscall[node, 1]: 16
@syscall[node, 0]: 21
@syscall[containerd, 35]: 29
@syscall[node, 232]: 41
@syscall[bpftrace, 321]: 50
@syscall[node, 202]: 57
@syscall[vmtoolsd, 100]: 68
@syscall[containerd, 202]: 88
@syscall[containerd, 281]: 89

10:52:00  @syscall[HangDetector, 202]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 1]: 1
@syscall[containerd, 0]: 1
@syscall[cpptools, 19]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[containerd, 1]: 1
@syscall[multipathd, 230]: 1
@syscall[python3, 0]: 1
@syscall[cpptools, 0]: 1
@syscall[node, 47]: 1
@syscall[node, 280]: 1
@syscall[sshd, 318]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 332]: 2
@syscall[sshd, 0]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[node, 7]: 3
@syscall[node, 39]: 3
@syscall[node, 62]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[cpptools, 202]: 6
@syscall[sshd, 271]: 6
@syscall[node, 257]: 7
@syscall[node, 3]: 7
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 30
@syscall[bpftrace, 321]: 46
@syscall[node, 232]: 52
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 61
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 91

10:52:01  @syscall[node, 230]: 1
@syscall[node, 332]: 1
@syscall[bpftrace, 1]: 1
@syscall[node, 280]: 1
@syscall[node, 47]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[HangDetector, 202]: 1
@syscall[node, 39]: 1
@syscall[node, 62]: 2
@syscall[python3, 0]: 2
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[multipathd, 1]: 2
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[sshd, 0]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 271]: 6
@syscall[cpptools, 202]: 9
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 16
@syscall[node, 0]: 22
@syscall[containerd, 35]: 32
@syscall[node, 232]: 46
@syscall[bpftrace, 321]: 50
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 55
@syscall[containerd, 281]: 93
@syscall[containerd, 202]: 102

10:52:02  @syscall[cron, 230]: 1
@syscall[bpftrace, 186]: 1
@syscall[HangDetector, 202]: 1
@syscall[python3, 0]: 1
@syscall[containerd, 15]: 1
@syscall[bpftrace, 1]: 1
@syscall[containerd, 234]: 1
@syscall[containerd, 39]: 1
@syscall[multipathd, 230]: 1
@syscall[irqbalance, 7]: 1
@syscall[vmtoolsd, 44]: 1
@syscall[node, 280]: 1
@syscall[node, 4]: 1
@syscall[node, 332]: 1
@syscall[node, 230]: 1
@syscall[cpptools, 202]: 2
@syscall[irqbalance, 262]: 2
@syscall[irqbalance, 257]: 2
@syscall[irqbalance, 3]: 2
@syscall[vmtoolsd, 45]: 2
@syscall[node, 7]: 2
@syscall[node, 47]: 2
@syscall[node, 39]: 3
@syscall[multipathd, 1]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 318]: 4
@syscall[node, 62]: 4
@syscall[containerd, 1]: 5
@syscall[node, 262]: 5
@syscall[containerd, 0]: 5
@syscall[node, 16]: 5
@syscall[cron, 262]: 5
@syscall[node, 257]: 6
@syscall[vmtoolsd, 3]: 6
@syscall[vmtoolsd, 257]: 6
@syscall[node, 3]: 6
@syscall[sshd, 1]: 7
@syscall[sshd, 0]: 7
@syscall[irqbalance, 0]: 7
@syscall[vmtoolsd, 262]: 8
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 12
@syscall[sshd, 271]: 14
@syscall[vmtoolsd, 21]: 15
@syscall[vmtoolsd, 0]: 22
@syscall[sshd, 14]: 28
@syscall[node, 1]: 29
@syscall[containerd, 35]: 32
@syscall[node, 0]: 34
@syscall[vmtoolsd, 100]: 58
@syscall[bpftrace, 321]: 60
@syscall[node, 232]: 80
@syscall[containerd, 202]: 92
@syscall[node, 202]: 93
@syscall[containerd, 281]: 97

10:52:03  @syscall[HangDetector, 202]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 1]: 1
@syscall[cpptools, 19]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[python3, 0]: 1
@syscall[cpptools, 0]: 1
@syscall[node, 47]: 1
@syscall[node, 280]: 1
@syscall[sshd, 318]: 2
@syscall[containerd, 1]: 2
@syscall[multipathd, 1]: 2
@syscall[containerd, 0]: 2
@syscall[node, 332]: 2
@syscall[sshd, 0]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[node, 7]: 3
@syscall[node, 39]: 3
@syscall[node, 62]: 4
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[sshd, 271]: 6
@syscall[node, 3]: 7
@syscall[node, 257]: 7
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 10
@syscall[sshd, 14]: 12
@syscall[cpptools, 202]: 13
@syscall[node, 1]: 19
@syscall[node, 0]: 24
@syscall[containerd, 35]: 30
@syscall[vmtoolsd, 100]: 49
@syscall[node, 232]: 52
@syscall[bpftrace, 321]: 58
@syscall[node, 202]: 58
@syscall[containerd, 202]: 92
@syscall[containerd, 281]: 93

10:52:04  @syscall[HangDetector, 202]: 1
@syscall[node, 230]: 1
@syscall[bpftrace, 1]: 1
@syscall[bpftrace, 186]: 1
@syscall[node, 4]: 1
@syscall[multipathd, 230]: 1
@syscall[node, 39]: 1
@syscall[python3, 0]: 1
@syscall[node, 47]: 1
@syscall[node, 280]: 1
@syscall[node, 332]: 1
@syscall[sshd, 318]: 2
@syscall[node, 7]: 2
@syscall[multipathd, 1]: 2
@syscall[cpptools, 202]: 2
@syscall[node, 62]: 2
@syscall[sshd, 0]: 3
@syscall[multipathd, 202]: 3
@syscall[sshd, 1]: 3
@syscall[node, 16]: 5
@syscall[node, 262]: 5
@syscall[node, 3]: 6
@syscall[sshd, 271]: 6
@syscall[node, 257]: 6
@syscall[bpftrace, 232]: 10
@syscall[vmtoolsd, 7]: 11
@syscall[sshd, 14]: 12
@syscall[node, 1]: 16
@syscall[node, 0]: 22
@syscall[containerd, 35]: 30
@syscall[node, 232]: 42
@syscall[bpftrace, 321]: 50
@syscall[vmtoolsd, 100]: 54
@syscall[node, 202]: 55
@syscall[containerd, 202]: 90
@syscall[containerd, 281]: 92


@syscall[containerd, 1]: 1
@syscall[cpptools, 202]: 1
@syscall[containerd, 0]: 1
@syscall[bpftrace, 16]: 1
@syscall[bpftrace, 15]: 1
@syscall[timeout, 130]: 1
@syscall[timeout, 15]: 1
@syscall[bpftrace, 3]: 1
@syscall[HangDetector, 202]: 1
@syscall[multipathd, 230]: 1
@syscall[timeout, 61]: 1
@syscall[containerd, 15]: 1
@syscall[containerd, 234]: 1
@syscall[node, 7]: 1
@syscall[python3, 0]: 1
@syscall[containerd, 39]: 1
@syscall[timeout, 13]: 2
@syscall[node, 257]: 2
@syscall[node, 16]: 2
@syscall[node, 262]: 2
@syscall[node, 0]: 2
@syscall[multipathd, 1]: 2
@syscall[node, 3]: 2
@syscall[multipathd, 202]: 3
@syscall[timeout, 62]: 4
@syscall[node, 232]: 4
@syscall[bpftrace, 232]: 5
@syscall[vmtoolsd, 7]: 5
@syscall[containerd, 35]: 15
@syscall[vmtoolsd, 100]: 25
@syscall[bpftrace, 321]: 27
@syscall[containerd, 202]: 42
@syscall[containerd, 281]: 44
kill process 16959
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Monitoring system calls... Hit Ctrl-C to end.\\n\"); }\n\ntracepoint:raw_syscalls:sys_enter { @syscall[comm, args->id] = count(); }\n\ninterval:s:1 { printf(\"\\n\"); time(\"%H:%M:%S  \"); print(@syscall); clear(@syscall); }", "stdout": "Attaching 3 probes...\nMonitoring system calls... Hit Ctrl-C to end.\n\n10:51:46  @syscall[bpftrace, 298]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 1]: 1\n@syscall[node, 39]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[bpftrace, 8]: 1\n@syscall[containerd, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[bpftrace, 32]: 1\n@syscall[node, 332]: 1\n@syscall[node, 230]: 1\n@syscall[cpptools, 202]: 2\n@syscall[bpftrace, 262]: 2\n@syscall[bpftrace, 1]: 2\n@syscall[bpftrace, 186]: 2\n@syscall[bpftrace, 33]: 2\n@syscall[node, 62]: 2\n@syscall[bpftrace, 0]: 2\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[bpftrace, 257]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 0]: 3\n@syscall[bpftrace, 3]: 3\n@syscall[sshd, 1]: 3\n@syscall[bpftrace, 16]: 3\n@syscall[node, 262]: 5\n@syscall[node, 16]: 5\n@syscall[node, 3]: 6\n@syscall[node, 257]: 6\n@syscall[sshd, 271]: 6\n@syscall[bpftrace, 232]: 11\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[bpftrace, 321]: 26\n@syscall[containerd, 35]: 29\n@syscall[node, 202]: 39\n@syscall[node, 232]: 52\n@syscall[vmtoolsd, 100]: 54\n@syscall[containerd, 202]: 88\n@syscall[containerd, 281]: 89\n\n10:51:47  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 234]: 1\n@syscall[dockerd, 35]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[python3, 0]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[containerd, 39]: 1\n@syscall[containerd, 15]: 1\n@syscall[node, 280]: 1\n@syscall[node, 332]: 1\n@syscall[node, 4]: 1\n@syscall[vmtoolsd, 262]: 2\n@syscall[dockerd, 281]: 2\n@syscall[node, 7]: 2\n@syscall[node, 47]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 39]: 3\n@syscall[multipathd, 202]: 3\n@syscall[dockerd, 202]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 0]: 7\n@syscall[sshd, 1]: 7\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 271]: 14\n@syscall[sshd, 14]: 28\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 30\n@syscall[node, 0]: 34\n@syscall[vmtoolsd, 100]: 54\n@syscall[bpftrace, 321]: 58\n@syscall[node, 202]: 77\n@syscall[node, 232]: 86\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 99\n\n10:51:48  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[containerd, 0]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[containerd, 1]: 1\n@syscall[multipathd, 230]: 1\n@syscall[cpptools, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[cpptools, 202]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 7\n@syscall[node, 3]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 31\n@syscall[node, 232]: 47\n@syscall[bpftrace, 321]: 51\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 64\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 94\n\n10:51:49  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[python3, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 62]: 2\n@syscall[containerd, 0]: 2\n@syscall[containerd, 1]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 10\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 29\n@syscall[node, 232]: 40\n@syscall[vmtoolsd, 100]: 49\n@syscall[bpftrace, 321]: 50\n@syscall[node, 202]: 59\n@syscall[containerd, 202]: 88\n@syscall[containerd, 281]: 91\n\n10:51:50  @syscall[node, 230]: 1\n@syscall[systemd, 232]: 1\n@syscall[cpptools, 0]: 1\n@syscall[systemd-timesyn, 41]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[systemd-timesyn, 104]: 1\n@syscall[systemd, 16]: 1\n@syscall[systemd-timesyn, 102]: 1\n@syscall[systemd, 257]: 1\n@syscall[systemd, 47]: 1\n@syscall[systemd, 186]: 1\n@syscall[systemd-timesyn, 262]: 1\n@syscall[node, 4]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[cpptools, 19]: 1\n@syscall[systemd-timesyn, 108]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 39]: 1\n@syscall[systemd, 262]: 1\n@syscall[node, 280]: 1\n@syscall[systemd-timesyn, 107]: 1\n@syscall[node, 47]: 1\n@syscall[systemd-timesyn, 257]: 1\n@syscall[systemd-timesyn, 280]: 1\n@syscall[systemd-timesyn, 232]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[systemd-timesyn, 0]: 1\n@syscall[systemd, 3]: 1\n@syscall[systemd-timesyn, 186]: 1\n@syscall[systemd-timesyn, 46]: 1\n@syscall[containerd, 15]: 2\n@syscall[node, 62]: 2\n@syscall[systemd-timesyn, 55]: 2\n@syscall[containerd, 39]: 2\n@syscall[systemd, 0]: 2\n@syscall[node, 7]: 2\n@syscall[systemd-timesyn, 3]: 2\n@syscall[systemd-timesyn, 286]: 2\n@syscall[systemd-timesyn, 54]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 332]: 2\n@syscall[containerd, 234]: 2\n@syscall[sshd, 0]: 3\n@syscall[sshd, 1]: 3\n@syscall[multipathd, 1]: 3\n@syscall[containerd, 1]: 3\n@syscall[containerd, 0]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[multipathd, 202]: 8\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 32\n@syscall[node, 232]: 44\n@syscall[vmtoolsd, 100]: 54\n@syscall[bpftrace, 321]: 56\n@syscall[node, 202]: 66\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 96\n\n10:51:51  @syscall[systemd-timesyn, 46]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[systemd-timesyn, 41]: 1\n@syscall[systemd-timesyn, 44]: 1\n@syscall[systemd-timesyn, 47]: 1\n@syscall[systemd-timesyn, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 280]: 1\n@syscall[systemd-timesyn, 305]: 1\n@syscall[node, 332]: 1\n@syscall[dbus-daemon, 232]: 1\n@syscall[systemd-timesyn, 49]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 47]: 1\n@syscall[sshd, 318]: 2\n@syscall[dbus-daemon, 47]: 2\n@syscall[systemd-timesyn, 262]: 2\n@syscall[containerd, 0]: 2\n@syscall[multipathd, 1]: 2\n@syscall[systemd-timesyn, 286]: 2\n@syscall[systemd-timesyn, 280]: 2\n@syscall[systemd-timesyn, 232]: 2\n@syscall[containerd, 1]: 2\n@syscall[systemd-timesyn, 54]: 2\n@syscall[systemd-timesyn, 186]: 2\n@syscall[systemd-timesyn, 257]: 2\n@syscall[systemd-timesyn, 233]: 2\n@syscall[node, 39]: 3\n@syscall[multipathd, 202]: 3\n@syscall[systemd-timesyn, 3]: 3\n@syscall[node, 7]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 31\n@syscall[node, 232]: 44\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 59\n@syscall[bpftrace, 321]: 81\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 93\n\n10:51:52  @syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 234]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[containerd, 15]: 1\n@syscall[containerd, 39]: 1\n@syscall[irqbalance, 7]: 1\n@syscall[node, 280]: 1\n@syscall[node, 332]: 1\n@syscall[node, 7]: 2\n@syscall[vmtoolsd, 262]: 2\n@syscall[irqbalance, 3]: 2\n@syscall[node, 47]: 2\n@syscall[multipathd, 1]: 2\n@syscall[irqbalance, 257]: 2\n@syscall[irqbalance, 262]: 2\n@syscall[cpptools, 202]: 2\n@syscall[node, 39]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 62]: 4\n@syscall[containerd, 1]: 5\n@syscall[node, 16]: 5\n@syscall[containerd, 0]: 5\n@syscall[node, 262]: 5\n@syscall[multipathd, 202]: 6\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 0]: 7\n@syscall[sshd, 1]: 7\n@syscall[irqbalance, 0]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 271]: 12\n@syscall[sshd, 14]: 24\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 30\n@syscall[node, 0]: 34\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 232]: 70\n@syscall[bpftrace, 321]: 72\n@syscall[containerd, 202]: 86\n@syscall[containerd, 281]: 92\n@syscall[node, 202]: 109\n\n10:51:53  @syscall[node, 39]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 234]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[cpptools, 0]: 1\n@syscall[containerd, 15]: 1\n@syscall[containerd, 39]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[node, 62]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[containerd, 0]: 4\n@syscall[containerd, 1]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[cpptools, 202]: 13\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 31\n@syscall[node, 232]: 43\n@syscall[bpftrace, 321]: 53\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 68\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 102\n\n10:51:54  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[python3, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[multipathd, 230]: 1\n@syscall[cpptools, 202]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 6\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 10\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 42\n@syscall[vmtoolsd, 100]: 49\n@syscall[bpftrace, 321]: 52\n@syscall[node, 202]: 63\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 93\n\n10:51:55  @syscall[bpftrace, 1]: 1\n@syscall[node, 230]: 1\n@syscall[node, 280]: 1\n@syscall[cpptools, 19]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[cpptools, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 39]: 1\n@syscall[python3, 0]: 1\n@syscall[snapd, 281]: 2\n@syscall[node, 62]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[snapd, 35]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[snapd, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[cpptools, 202]: 13\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 41\n@syscall[bpftrace, 321]: 48\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 68\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 92\n\n10:51:56  @syscall[node, 332]: 1\n@syscall[node, 280]: 1\n@syscall[node, 230]: 1\n@syscall[node, 47]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 4]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[cpptools, 202]: 2\n@syscall[node, 62]: 2\n@syscall[node, 39]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 6\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[node, 28]: 12\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 17\n@syscall[node, 0]: 22\n@syscall[node, 10]: 24\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 45\n@syscall[bpftrace, 321]: 50\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 86\n@syscall[containerd, 202]: 89\n@syscall[containerd, 281]: 90\n\n10:51:57  @syscall[dockerd, 0]: 1\n@syscall[node, 4]: 1\n@syscall[dockerd, 1]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[multipathd, 230]: 1\n@syscall[vmtoolsd, 41]: 1\n@syscall[node, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[dockerd, 35]: 1\n@syscall[vmtoolsd, 3]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[vmtoolsd, 51]: 1\n@syscall[node, 332]: 1\n@syscall[node, 280]: 1\n@syscall[vmtoolsd, 49]: 1\n@syscall[vmtoolsd, 45]: 2\n@syscall[multipathd, 1]: 2\n@syscall[vmtoolsd, 262]: 2\n@syscall[node, 47]: 2\n@syscall[node, 7]: 2\n@syscall[dockerd, 202]: 3\n@syscall[multipathd, 202]: 3\n@syscall[vmtoolsd, 44]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 262]: 5\n@syscall[node, 16]: 5\n@syscall[dockerd, 281]: 5\n@syscall[node, 39]: 5\n@syscall[node, 62]: 6\n@syscall[vmtoolsd, 47]: 6\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 1]: 7\n@syscall[sshd, 0]: 7\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[sshd, 271]: 14\n@syscall[vmtoolsd, 7]: 14\n@syscall[sshd, 14]: 28\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 30\n@syscall[node, 0]: 34\n@syscall[bpftrace, 321]: 56\n@syscall[vmtoolsd, 100]: 72\n@syscall[node, 232]: 75\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 91\n@syscall[node, 202]: 105\n\n10:51:58  @syscall[bpftrace, 1]: 1\n@syscall[node, 230]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[cpptools, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 4]: 1\n@syscall[containerd, 1]: 2\n@syscall[node, 62]: 2\n@syscall[containerd, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 0]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[cpptools, 202]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 45\n@syscall[vmtoolsd, 100]: 54\n@syscall[bpftrace, 321]: 55\n@syscall[node, 202]: 62\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 97\n\n10:51:59  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[node, 4]: 1\n@syscall[node, 62]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 7]: 3\n@syscall[node, 16]: 4\n@syscall[node, 262]: 4\n@syscall[node, 3]: 5\n@syscall[node, 257]: 5\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[sshd, 14]: 12\n@syscall[vmtoolsd, 7]: 13\n@syscall[node, 1]: 16\n@syscall[node, 0]: 21\n@syscall[containerd, 35]: 29\n@syscall[node, 232]: 41\n@syscall[bpftrace, 321]: 50\n@syscall[node, 202]: 57\n@syscall[vmtoolsd, 100]: 68\n@syscall[containerd, 202]: 88\n@syscall[containerd, 281]: 89\n\n10:52:00  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[containerd, 0]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[containerd, 1]: 1\n@syscall[multipathd, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[cpptools, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[cpptools, 202]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 7\n@syscall[node, 3]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[bpftrace, 321]: 46\n@syscall[node, 232]: 52\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 61\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 91\n\n10:52:01  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[node, 62]: 2\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 32\n@syscall[node, 232]: 46\n@syscall[bpftrace, 321]: 50\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 55\n@syscall[containerd, 281]: 93\n@syscall[containerd, 202]: 102\n\n10:52:02  @syscall[cron, 230]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[python3, 0]: 1\n@syscall[containerd, 15]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[containerd, 234]: 1\n@syscall[containerd, 39]: 1\n@syscall[multipathd, 230]: 1\n@syscall[irqbalance, 7]: 1\n@syscall[vmtoolsd, 44]: 1\n@syscall[node, 280]: 1\n@syscall[node, 4]: 1\n@syscall[node, 332]: 1\n@syscall[node, 230]: 1\n@syscall[cpptools, 202]: 2\n@syscall[irqbalance, 262]: 2\n@syscall[irqbalance, 257]: 2\n@syscall[irqbalance, 3]: 2\n@syscall[vmtoolsd, 45]: 2\n@syscall[node, 7]: 2\n@syscall[node, 47]: 2\n@syscall[node, 39]: 3\n@syscall[multipathd, 1]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 62]: 4\n@syscall[containerd, 1]: 5\n@syscall[node, 262]: 5\n@syscall[containerd, 0]: 5\n@syscall[node, 16]: 5\n@syscall[cron, 262]: 5\n@syscall[node, 257]: 6\n@syscall[vmtoolsd, 3]: 6\n@syscall[vmtoolsd, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 1]: 7\n@syscall[sshd, 0]: 7\n@syscall[irqbalance, 0]: 7\n@syscall[vmtoolsd, 262]: 8\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 12\n@syscall[sshd, 271]: 14\n@syscall[vmtoolsd, 21]: 15\n@syscall[vmtoolsd, 0]: 22\n@syscall[sshd, 14]: 28\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 32\n@syscall[node, 0]: 34\n@syscall[vmtoolsd, 100]: 58\n@syscall[bpftrace, 321]: 60\n@syscall[node, 232]: 80\n@syscall[containerd, 202]: 92\n@syscall[node, 202]: 93\n@syscall[containerd, 281]: 97\n\n10:52:03  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[cpptools, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[sshd, 318]: 2\n@syscall[containerd, 1]: 2\n@syscall[multipathd, 1]: 2\n@syscall[containerd, 0]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 10\n@syscall[sshd, 14]: 12\n@syscall[cpptools, 202]: 13\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[vmtoolsd, 100]: 49\n@syscall[node, 232]: 52\n@syscall[bpftrace, 321]: 58\n@syscall[node, 202]: 58\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 93\n\n10:52:04  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 39]: 1\n@syscall[python3, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[node, 332]: 1\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[cpptools, 202]: 2\n@syscall[node, 62]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 6\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 42\n@syscall[bpftrace, 321]: 50\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 55\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 92\n\n\n@syscall[containerd, 1]: 1\n@syscall[cpptools, 202]: 1\n@syscall[containerd, 0]: 1\n@syscall[bpftrace, 16]: 1\n@syscall[bpftrace, 15]: 1\n@syscall[timeout, 130]: 1\n@syscall[timeout, 15]: 1\n@syscall[bpftrace, 3]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[multipathd, 230]: 1\n@syscall[timeout, 61]: 1\n@syscall[containerd, 15]: 1\n@syscall[containerd, 234]: 1\n@syscall[node, 7]: 1\n@syscall[python3, 0]: 1\n@syscall[containerd, 39]: 1\n@syscall[timeout, 13]: 2\n@syscall[node, 257]: 2\n@syscall[node, 16]: 2\n@syscall[node, 262]: 2\n@syscall[node, 0]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 3]: 2\n@syscall[multipathd, 202]: 3\n@syscall[timeout, 62]: 4\n@syscall[node, 232]: 4\n@syscall[bpftrace, 232]: 5\n@syscall[vmtoolsd, 7]: 5\n@syscall[containerd, 35]: 15\n@syscall[vmtoolsd, 100]: 25\n@syscall[bpftrace, 321]: 27\n@syscall[containerd, 202]: 42\n@syscall[containerd, 281]: 44\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Monitoring system calls... Hit Ctrl-C to end.\\n"); }\n\ntracepoint:raw_syscalls:sys_enter { @syscall[comm, args->id] = count(); }\n\ninterval:s:1 { printf("\\n"); time("%H:%M:%S  "); print(@syscall); clear(@syscall); }', 'stdout': 'Attaching 3 probes...\nMonitoring system calls... Hit Ctrl-C to end.\n\n10:51:46  @syscall[bpftrace, 298]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 1]: 1\n@syscall[node, 39]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[bpftrace, 8]: 1\n@syscall[containerd, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[bpftrace, 32]: 1\n@syscall[node, 332]: 1\n@syscall[node, 230]: 1\n@syscall[cpptools, 202]: 2\n@syscall[bpftrace, 262]: 2\n@syscall[bpftrace, 1]: 2\n@syscall[bpftrace, 186]: 2\n@syscall[bpftrace, 33]: 2\n@syscall[node, 62]: 2\n@syscall[bpftrace, 0]: 2\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[bpftrace, 257]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 0]: 3\n@syscall[bpftrace, 3]: 3\n@syscall[sshd, 1]: 3\n@syscall[bpftrace, 16]: 3\n@syscall[node, 262]: 5\n@syscall[node, 16]: 5\n@syscall[node, 3]: 6\n@syscall[node, 257]: 6\n@syscall[sshd, 271]: 6\n@syscall[bpftrace, 232]: 11\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[bpftrace, 321]: 26\n@syscall[containerd, 35]: 29\n@syscall[node, 202]: 39\n@syscall[node, 232]: 52\n@syscall[vmtoolsd, 100]: 54\n@syscall[containerd, 202]: 88\n@syscall[containerd, 281]: 89\n\n10:51:47  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 234]: 1\n@syscall[dockerd, 35]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[python3, 0]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[containerd, 39]: 1\n@syscall[containerd, 15]: 1\n@syscall[node, 280]: 1\n@syscall[node, 332]: 1\n@syscall[node, 4]: 1\n@syscall[vmtoolsd, 262]: 2\n@syscall[dockerd, 281]: 2\n@syscall[node, 7]: 2\n@syscall[node, 47]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 39]: 3\n@syscall[multipathd, 202]: 3\n@syscall[dockerd, 202]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 0]: 7\n@syscall[sshd, 1]: 7\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 271]: 14\n@syscall[sshd, 14]: 28\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 30\n@syscall[node, 0]: 34\n@syscall[vmtoolsd, 100]: 54\n@syscall[bpftrace, 321]: 58\n@syscall[node, 202]: 77\n@syscall[node, 232]: 86\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 99\n\n10:51:48  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[containerd, 0]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[containerd, 1]: 1\n@syscall[multipathd, 230]: 1\n@syscall[cpptools, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[cpptools, 202]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 7\n@syscall[node, 3]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 31\n@syscall[node, 232]: 47\n@syscall[bpftrace, 321]: 51\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 64\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 94\n\n10:51:49  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[python3, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 62]: 2\n@syscall[containerd, 0]: 2\n@syscall[containerd, 1]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 10\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 29\n@syscall[node, 232]: 40\n@syscall[vmtoolsd, 100]: 49\n@syscall[bpftrace, 321]: 50\n@syscall[node, 202]: 59\n@syscall[containerd, 202]: 88\n@syscall[containerd, 281]: 91\n\n10:51:50  @syscall[node, 230]: 1\n@syscall[systemd, 232]: 1\n@syscall[cpptools, 0]: 1\n@syscall[systemd-timesyn, 41]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[systemd-timesyn, 104]: 1\n@syscall[systemd, 16]: 1\n@syscall[systemd-timesyn, 102]: 1\n@syscall[systemd, 257]: 1\n@syscall[systemd, 47]: 1\n@syscall[systemd, 186]: 1\n@syscall[systemd-timesyn, 262]: 1\n@syscall[node, 4]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[cpptools, 19]: 1\n@syscall[systemd-timesyn, 108]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 39]: 1\n@syscall[systemd, 262]: 1\n@syscall[node, 280]: 1\n@syscall[systemd-timesyn, 107]: 1\n@syscall[node, 47]: 1\n@syscall[systemd-timesyn, 257]: 1\n@syscall[systemd-timesyn, 280]: 1\n@syscall[systemd-timesyn, 232]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[systemd-timesyn, 0]: 1\n@syscall[systemd, 3]: 1\n@syscall[systemd-timesyn, 186]: 1\n@syscall[systemd-timesyn, 46]: 1\n@syscall[containerd, 15]: 2\n@syscall[node, 62]: 2\n@syscall[systemd-timesyn, 55]: 2\n@syscall[containerd, 39]: 2\n@syscall[systemd, 0]: 2\n@syscall[node, 7]: 2\n@syscall[systemd-timesyn, 3]: 2\n@syscall[systemd-timesyn, 286]: 2\n@syscall[systemd-timesyn, 54]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 332]: 2\n@syscall[containerd, 234]: 2\n@syscall[sshd, 0]: 3\n@syscall[sshd, 1]: 3\n@syscall[multipathd, 1]: 3\n@syscall[containerd, 1]: 3\n@syscall[containerd, 0]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[multipathd, 202]: 8\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 32\n@syscall[node, 232]: 44\n@syscall[vmtoolsd, 100]: 54\n@syscall[bpftrace, 321]: 56\n@syscall[node, 202]: 66\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 96\n\n10:51:51  @syscall[systemd-timesyn, 46]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[systemd-timesyn, 41]: 1\n@syscall[systemd-timesyn, 44]: 1\n@syscall[systemd-timesyn, 47]: 1\n@syscall[systemd-timesyn, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 280]: 1\n@syscall[systemd-timesyn, 305]: 1\n@syscall[node, 332]: 1\n@syscall[dbus-daemon, 232]: 1\n@syscall[systemd-timesyn, 49]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 47]: 1\n@syscall[sshd, 318]: 2\n@syscall[dbus-daemon, 47]: 2\n@syscall[systemd-timesyn, 262]: 2\n@syscall[containerd, 0]: 2\n@syscall[multipathd, 1]: 2\n@syscall[systemd-timesyn, 286]: 2\n@syscall[systemd-timesyn, 280]: 2\n@syscall[systemd-timesyn, 232]: 2\n@syscall[containerd, 1]: 2\n@syscall[systemd-timesyn, 54]: 2\n@syscall[systemd-timesyn, 186]: 2\n@syscall[systemd-timesyn, 257]: 2\n@syscall[systemd-timesyn, 233]: 2\n@syscall[node, 39]: 3\n@syscall[multipathd, 202]: 3\n@syscall[systemd-timesyn, 3]: 3\n@syscall[node, 7]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 31\n@syscall[node, 232]: 44\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 59\n@syscall[bpftrace, 321]: 81\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 93\n\n10:51:52  @syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 234]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[containerd, 15]: 1\n@syscall[containerd, 39]: 1\n@syscall[irqbalance, 7]: 1\n@syscall[node, 280]: 1\n@syscall[node, 332]: 1\n@syscall[node, 7]: 2\n@syscall[vmtoolsd, 262]: 2\n@syscall[irqbalance, 3]: 2\n@syscall[node, 47]: 2\n@syscall[multipathd, 1]: 2\n@syscall[irqbalance, 257]: 2\n@syscall[irqbalance, 262]: 2\n@syscall[cpptools, 202]: 2\n@syscall[node, 39]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 62]: 4\n@syscall[containerd, 1]: 5\n@syscall[node, 16]: 5\n@syscall[containerd, 0]: 5\n@syscall[node, 262]: 5\n@syscall[multipathd, 202]: 6\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 0]: 7\n@syscall[sshd, 1]: 7\n@syscall[irqbalance, 0]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 271]: 12\n@syscall[sshd, 14]: 24\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 30\n@syscall[node, 0]: 34\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 232]: 70\n@syscall[bpftrace, 321]: 72\n@syscall[containerd, 202]: 86\n@syscall[containerd, 281]: 92\n@syscall[node, 202]: 109\n\n10:51:53  @syscall[node, 39]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[containerd, 234]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[cpptools, 0]: 1\n@syscall[containerd, 15]: 1\n@syscall[containerd, 39]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[node, 62]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[containerd, 0]: 4\n@syscall[containerd, 1]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[cpptools, 202]: 13\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 31\n@syscall[node, 232]: 43\n@syscall[bpftrace, 321]: 53\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 68\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 102\n\n10:51:54  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[python3, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[multipathd, 230]: 1\n@syscall[cpptools, 202]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 6\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 10\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 42\n@syscall[vmtoolsd, 100]: 49\n@syscall[bpftrace, 321]: 52\n@syscall[node, 202]: 63\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 93\n\n10:51:55  @syscall[bpftrace, 1]: 1\n@syscall[node, 230]: 1\n@syscall[node, 280]: 1\n@syscall[cpptools, 19]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[cpptools, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 39]: 1\n@syscall[python3, 0]: 1\n@syscall[snapd, 281]: 2\n@syscall[node, 62]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[snapd, 35]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[snapd, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[cpptools, 202]: 13\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 41\n@syscall[bpftrace, 321]: 48\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 68\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 92\n\n10:51:56  @syscall[node, 332]: 1\n@syscall[node, 280]: 1\n@syscall[node, 230]: 1\n@syscall[node, 47]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 4]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[cpptools, 202]: 2\n@syscall[node, 62]: 2\n@syscall[node, 39]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 6\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[node, 28]: 12\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 17\n@syscall[node, 0]: 22\n@syscall[node, 10]: 24\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 45\n@syscall[bpftrace, 321]: 50\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 86\n@syscall[containerd, 202]: 89\n@syscall[containerd, 281]: 90\n\n10:51:57  @syscall[dockerd, 0]: 1\n@syscall[node, 4]: 1\n@syscall[dockerd, 1]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[multipathd, 230]: 1\n@syscall[vmtoolsd, 41]: 1\n@syscall[node, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[dockerd, 35]: 1\n@syscall[vmtoolsd, 3]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[vmtoolsd, 51]: 1\n@syscall[node, 332]: 1\n@syscall[node, 280]: 1\n@syscall[vmtoolsd, 49]: 1\n@syscall[vmtoolsd, 45]: 2\n@syscall[multipathd, 1]: 2\n@syscall[vmtoolsd, 262]: 2\n@syscall[node, 47]: 2\n@syscall[node, 7]: 2\n@syscall[dockerd, 202]: 3\n@syscall[multipathd, 202]: 3\n@syscall[vmtoolsd, 44]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 262]: 5\n@syscall[node, 16]: 5\n@syscall[dockerd, 281]: 5\n@syscall[node, 39]: 5\n@syscall[node, 62]: 6\n@syscall[vmtoolsd, 47]: 6\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 1]: 7\n@syscall[sshd, 0]: 7\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[sshd, 271]: 14\n@syscall[vmtoolsd, 7]: 14\n@syscall[sshd, 14]: 28\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 30\n@syscall[node, 0]: 34\n@syscall[bpftrace, 321]: 56\n@syscall[vmtoolsd, 100]: 72\n@syscall[node, 232]: 75\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 91\n@syscall[node, 202]: 105\n\n10:51:58  @syscall[bpftrace, 1]: 1\n@syscall[node, 230]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[cpptools, 0]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 4]: 1\n@syscall[containerd, 1]: 2\n@syscall[node, 62]: 2\n@syscall[containerd, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 0]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[cpptools, 202]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 45\n@syscall[vmtoolsd, 100]: 54\n@syscall[bpftrace, 321]: 55\n@syscall[node, 202]: 62\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 97\n\n10:51:59  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[python3, 0]: 1\n@syscall[multipathd, 230]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[node, 4]: 1\n@syscall[node, 62]: 2\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 7]: 3\n@syscall[node, 16]: 4\n@syscall[node, 262]: 4\n@syscall[node, 3]: 5\n@syscall[node, 257]: 5\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[sshd, 14]: 12\n@syscall[vmtoolsd, 7]: 13\n@syscall[node, 1]: 16\n@syscall[node, 0]: 21\n@syscall[containerd, 35]: 29\n@syscall[node, 232]: 41\n@syscall[bpftrace, 321]: 50\n@syscall[node, 202]: 57\n@syscall[vmtoolsd, 100]: 68\n@syscall[containerd, 202]: 88\n@syscall[containerd, 281]: 89\n\n10:52:00  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[containerd, 0]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[containerd, 1]: 1\n@syscall[multipathd, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[cpptools, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[sshd, 318]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[cpptools, 202]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 7\n@syscall[node, 3]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[bpftrace, 321]: 46\n@syscall[node, 232]: 52\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 61\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 91\n\n10:52:01  @syscall[node, 230]: 1\n@syscall[node, 332]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[node, 280]: 1\n@syscall[node, 47]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[node, 39]: 1\n@syscall[node, 62]: 2\n@syscall[python3, 0]: 2\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[sshd, 0]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[cpptools, 202]: 9\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 32\n@syscall[node, 232]: 46\n@syscall[bpftrace, 321]: 50\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 55\n@syscall[containerd, 281]: 93\n@syscall[containerd, 202]: 102\n\n10:52:02  @syscall[cron, 230]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[python3, 0]: 1\n@syscall[containerd, 15]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[containerd, 234]: 1\n@syscall[containerd, 39]: 1\n@syscall[multipathd, 230]: 1\n@syscall[irqbalance, 7]: 1\n@syscall[vmtoolsd, 44]: 1\n@syscall[node, 280]: 1\n@syscall[node, 4]: 1\n@syscall[node, 332]: 1\n@syscall[node, 230]: 1\n@syscall[cpptools, 202]: 2\n@syscall[irqbalance, 262]: 2\n@syscall[irqbalance, 257]: 2\n@syscall[irqbalance, 3]: 2\n@syscall[vmtoolsd, 45]: 2\n@syscall[node, 7]: 2\n@syscall[node, 47]: 2\n@syscall[node, 39]: 3\n@syscall[multipathd, 1]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 318]: 4\n@syscall[node, 62]: 4\n@syscall[containerd, 1]: 5\n@syscall[node, 262]: 5\n@syscall[containerd, 0]: 5\n@syscall[node, 16]: 5\n@syscall[cron, 262]: 5\n@syscall[node, 257]: 6\n@syscall[vmtoolsd, 3]: 6\n@syscall[vmtoolsd, 257]: 6\n@syscall[node, 3]: 6\n@syscall[sshd, 1]: 7\n@syscall[sshd, 0]: 7\n@syscall[irqbalance, 0]: 7\n@syscall[vmtoolsd, 262]: 8\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 12\n@syscall[sshd, 271]: 14\n@syscall[vmtoolsd, 21]: 15\n@syscall[vmtoolsd, 0]: 22\n@syscall[sshd, 14]: 28\n@syscall[node, 1]: 29\n@syscall[containerd, 35]: 32\n@syscall[node, 0]: 34\n@syscall[vmtoolsd, 100]: 58\n@syscall[bpftrace, 321]: 60\n@syscall[node, 232]: 80\n@syscall[containerd, 202]: 92\n@syscall[node, 202]: 93\n@syscall[containerd, 281]: 97\n\n10:52:03  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[cpptools, 19]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[python3, 0]: 1\n@syscall[cpptools, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[sshd, 318]: 2\n@syscall[containerd, 1]: 2\n@syscall[multipathd, 1]: 2\n@syscall[containerd, 0]: 2\n@syscall[node, 332]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 7]: 3\n@syscall[node, 39]: 3\n@syscall[node, 62]: 4\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[sshd, 271]: 6\n@syscall[node, 3]: 7\n@syscall[node, 257]: 7\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 10\n@syscall[sshd, 14]: 12\n@syscall[cpptools, 202]: 13\n@syscall[node, 1]: 19\n@syscall[node, 0]: 24\n@syscall[containerd, 35]: 30\n@syscall[vmtoolsd, 100]: 49\n@syscall[node, 232]: 52\n@syscall[bpftrace, 321]: 58\n@syscall[node, 202]: 58\n@syscall[containerd, 202]: 92\n@syscall[containerd, 281]: 93\n\n10:52:04  @syscall[HangDetector, 202]: 1\n@syscall[node, 230]: 1\n@syscall[bpftrace, 1]: 1\n@syscall[bpftrace, 186]: 1\n@syscall[node, 4]: 1\n@syscall[multipathd, 230]: 1\n@syscall[node, 39]: 1\n@syscall[python3, 0]: 1\n@syscall[node, 47]: 1\n@syscall[node, 280]: 1\n@syscall[node, 332]: 1\n@syscall[sshd, 318]: 2\n@syscall[node, 7]: 2\n@syscall[multipathd, 1]: 2\n@syscall[cpptools, 202]: 2\n@syscall[node, 62]: 2\n@syscall[sshd, 0]: 3\n@syscall[multipathd, 202]: 3\n@syscall[sshd, 1]: 3\n@syscall[node, 16]: 5\n@syscall[node, 262]: 5\n@syscall[node, 3]: 6\n@syscall[sshd, 271]: 6\n@syscall[node, 257]: 6\n@syscall[bpftrace, 232]: 10\n@syscall[vmtoolsd, 7]: 11\n@syscall[sshd, 14]: 12\n@syscall[node, 1]: 16\n@syscall[node, 0]: 22\n@syscall[containerd, 35]: 30\n@syscall[node, 232]: 42\n@syscall[bpftrace, 321]: 50\n@syscall[vmtoolsd, 100]: 54\n@syscall[node, 202]: 55\n@syscall[containerd, 202]: 90\n@syscall[containerd, 281]: 92\n\n\n@syscall[containerd, 1]: 1\n@syscall[cpptools, 202]: 1\n@syscall[containerd, 0]: 1\n@syscall[bpftrace, 16]: 1\n@syscall[bpftrace, 15]: 1\n@syscall[timeout, 130]: 1\n@syscall[timeout, 15]: 1\n@syscall[bpftrace, 3]: 1\n@syscall[HangDetector, 202]: 1\n@syscall[multipathd, 230]: 1\n@syscall[timeout, 61]: 1\n@syscall[containerd, 15]: 1\n@syscall[containerd, 234]: 1\n@syscall[node, 7]: 1\n@syscall[python3, 0]: 1\n@syscall[containerd, 39]: 1\n@syscall[timeout, 13]: 2\n@syscall[node, 257]: 2\n@syscall[node, 16]: 2\n@syscall[node, 262]: 2\n@syscall[node, 0]: 2\n@syscall[multipathd, 1]: 2\n@syscall[node, 3]: 2\n@syscall[multipathd, 202]: 3\n@syscall[timeout, 62]: 4\n@syscall[node, 232]: 4\n@syscall[bpftrace, 232]: 5\n@syscall[vmtoolsd, 7]: 5\n@syscall[containerd, 35]: 15\n@syscall[vmtoolsd, 100]: 25\n@syscall[bpftrace, 321]: 27\n@syscall[containerd, 202]: 42\n@syscall[containerd, 281]: 44\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 3 out of 40 test cases so far.

Running test case: Monitors the rate of syscall by second globally
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Monitors the rate of syscall by second globally

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces key VFS calls, counts the number of times each call is invoked, and prints a per-second summary.

```
BEGIN
{
	printf("Tracing key VFS calls... Hit Ctrl-C to end.\n");

}

kprobe:vfs_read*,
kprobe:vfs_write*,
kprobe:vfs_fsync,
kprobe:vfs_open,
kprobe:vfs_create
{
	@[func] = count();
}

interval:s:1
{
	time();
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Monitors the rate of syscall by second globally

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN { printf("Tracing syscalls... Hit Ctrl-C to end.\\n"); } tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Tracing syscalls... Hit Ctrl-C to end.\n"); } tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }
Attaching 4 probes...
Tracing syscalls... Hit Ctrl-C to end.
10:52:12
@: 913
10:52:13
@: 537
10:52:14
@: 529
10:52:15
@: 538
10:52:16
@: 495
10:52:17
@: 673
10:52:18
@: 582
10:52:19
@: 502
10:52:20
@: 515
10:52:21
@: 511
10:52:22
@: 735
10:52:23
@: 534
10:52:24
@: 506
10:52:25
@: 639
10:52:26
@: 503
10:52:27
@: 1794
10:52:28
@: 2770
10:52:29
@: 1483
10:52:30
@: 3564


@: 0
kill process 16974
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Tracing syscalls... Hit Ctrl-C to end.\\n\"); } tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }", "stdout": "Attaching 4 probes...\nTracing syscalls... Hit Ctrl-C to end.\n10:52:12\n@: 913\n10:52:13\n@: 537\n10:52:14\n@: 529\n10:52:15\n@: 538\n10:52:16\n@: 495\n10:52:17\n@: 673\n10:52:18\n@: 582\n10:52:19\n@: 502\n10:52:20\n@: 515\n10:52:21\n@: 511\n10:52:22\n@: 735\n10:52:23\n@: 534\n10:52:24\n@: 506\n10:52:25\n@: 639\n10:52:26\n@: 503\n10:52:27\n@: 1794\n10:52:28\n@: 2770\n10:52:29\n@: 1483\n10:52:30\n@: 3564\n\n\n@: 0\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Tracing syscalls... Hit Ctrl-C to end.\\n"); } tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { time(); print(@); clear(@); } END { clear(@); }', 'stdout': 'Attaching 4 probes...\nTracing syscalls... Hit Ctrl-C to end.\n10:52:12\n@: 913\n10:52:13\n@: 537\n10:52:14\n@: 529\n10:52:15\n@: 538\n10:52:16\n@: 495\n10:52:17\n@: 673\n10:52:18\n@: 582\n10:52:19\n@: 502\n10:52:20\n@: 515\n10:52:21\n@: 511\n10:52:22\n@: 735\n10:52:23\n@: 534\n10:52:24\n@: 506\n10:52:25\n@: 639\n10:52:26\n@: 503\n10:52:27\n@: 1794\n10:52:28\n@: 2770\n10:52:29\n@: 1483\n10:52:30\n@: 3564\n\n\n@: 0\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 4 out of 40 test cases so far.

Running test case: traces socket operations and logs the socket types and process IDs involved.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

traces socket operations and logs the socket types and process IDs involved.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces TCP accept()s by dynamically tracing the kernel inet_csk_accept() socket function and prints information such as the time, process ID, communication, remote and local addresses and ports, and backlog length.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
	printf("Tracing TCP accepts. Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-14s ", "TIME", "PID", "COMM");
	printf("%-39s %-5s %-39s %-5s %s\n", "RADDR", "RPORT", "LADDR",
	    "LPORT", "BL");
}

kretprobe:inet_csk_accept
{
	$sk = (struct sock *)retval;
	$inet_family = $sk->__sk_common.skc_family;

	if ($inet_family == AF_INET || $inet_family == AF_INET6) {
		// initialize variable type:
		$daddr = ntop(0);
		$saddr = ntop(0);
		if ($inet_family == AF_INET) {
			$daddr = ntop($sk->__sk_common.skc_daddr);
			$saddr = ntop($sk->__sk_common.skc_rcv_saddr);
		} else {
			$daddr = ntop(
			    $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
			$saddr = ntop(
			    $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
		}
		$lport = $sk->__sk_common.skc_num;
		$dport = $sk->__sk_common.skc_dport;
		$qlen  = $sk->sk_ack_backlog;
		$qmax  = $sk->sk_max_ack_backlog;

		// Destination port is big endian, it must be flipped
		$dport = bswap($dport);

		time("%H:%M:%S ");
		printf("%-6d %-14s ", pid, comm);
		printf("%-39s %-5d %-39s %-5d ", $daddr, $dport, $saddr,
		    $lport);
		printf("%d/%d\n", $qlen, $qmax);
	}
}

```

example: Write a BPF code that traces TCP connections by dynamically tracing kernel functions and prints out the time, PID, and addresses and ports of the source and destination of each connection.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
  printf("Tracing tcp connections. Hit Ctrl-C to end.\n");
  printf("%-8s %-8s %-16s ", "TIME", "PID", "COMM");
  printf("%-39s %-6s %-39s %-6s\n", "SADDR", "SPORT", "DADDR", "DPORT");
}

kprobe:tcp_connect
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = bswap($dport);

    time("%H:%M:%S ");
    printf("%-8d %-16s ", pid, comm);
    printf("%-39s %-6d %-39s %-6d\n", $saddr, $lport, $daddr, $dport);
  }
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

traces socket operations and logs the socket types and process IDs involved.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <net/sock.h>\n\nBEGIN\n{\n  printf("Tracing socket operations. Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-14s %-6s\\n", "TIME", "PID", "COMM", "SOCK_TYPE");\n}\n\nkprobe:sock_init_data\n{\n  $sock = (struct sock *)arg0;\n  $type = $sock->__sk_common.skc_type;\n\n  time("%H:%M:%S ");\n  printf("%-6d %-14s %-6d\\n", pid, comm, $type);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>

BEGIN
{
  printf("Tracing socket operations. Hit Ctrl-C to end.\n");
  printf("%-8s %-6s %-14s %-6s\n", "TIME", "PID", "COMM", "SOCK_TYPE");
}

kprobe:sock_init_data
{
  $sock = (struct sock *)arg0;
  $type = $sock->__sk_common.skc_type;

  time("%H:%M:%S ");
  printf("%-6d %-14s %-6d\n", pid, comm, $type);
}
kill process 16989
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>\n\nBEGIN\n{\n  printf(\"Tracing socket operations. Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-6s %-14s %-6s\\n\", \"TIME\", \"PID\", \"COMM\", \"SOCK_TYPE\");\n}\n\nkprobe:sock_init_data\n{\n  $sock = (struct sock *)arg0;\n  $type = $sock->__sk_common.skc_type;\n\n  time(\"%H:%M:%S \");\n  printf(\"%-6d %-14s %-6d\\n\", pid, comm, $type);\n}", "stdout": "", "stderr": "stdin:12:11-30: ERROR: Struct/union of type 'struct sock_common' does not contain a field named 'skc_type'\n  $type = $sock->__sk_common.skc_type;\n          ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>\n\nBEGIN\n{\n  printf("Tracing socket operations. Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-14s %-6s\\n", "TIME", "PID", "COMM", "SOCK_TYPE");\n}\n\nkprobe:sock_init_data\n{\n  $sock = (struct sock *)arg0;\n  $type = $sock->__sk_common.skc_type;\n\n  time("%H:%M:%S ");\n  printf("%-6d %-14s %-6d\\n", pid, comm, $type);\n}', 'stdout': '', 'stderr': "stdin:12:11-30: ERROR: Struct/union of type 'struct sock_common' does not contain a field named 'skc_type'\n  $type = $sock->__sk_common.skc_type;\n          ~~~~~~~~~~~~~~~~~~~\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 4 out of 40 test cases so far.

Running test case: traces file read and write events and calculates the I/O size distribution for each file.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

traces file read and write events and calculates the I/O size distribution for each file.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces block device I/O and creates histograms of I/O size in bytes for each process.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

tracepoint:block:block_rq_issue
{
	@[args.comm] = hist(args.bytes);
}

END
{
	printf("\nI/O size (bytes) histograms by process name:");
}

```

example: Write a BPF code that traces block device I/O latency by calculating the time difference between the start and completion of I/O operations and storing them in a histogram.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0]/
{
	@usecs = hist((nsecs - @start[arg0]) / 1000);
	delete(@start[arg0]);
}

END
{
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

traces file read and write events and calculates the I/O size distribution for each file.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN { printf("Tracing file read and write events... Hit Ctrl-C to end.\\n"); }\n\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n\nEND { printf("\\nI/O size (bytes) histograms by file name:"); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Tracing file read and write events... Hit Ctrl-C to end.\n"); }

tracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }

END { printf("\nI/O size (bytes) histograms by file name:"); }
kill process 17005
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Tracing file read and write events... Hit Ctrl-C to end.\\n\"); }\n\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n\nEND { printf(\"\\nI/O size (bytes) histograms by file name:\"); }", "stdout": "", "stderr": "stdin:3:75-100: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_read' does not contain a field named 'filename'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:3:75-100: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_write' does not contain a field named 'filename'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:3:75-101: ERROR: str() expects an integer or a pointer type as first argument (none provided)\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:3:105-120: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_read' does not contain a field named 'size'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                                                        ~~~~~~~~~~~~~~~\nstdin:3:105-120: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_write' does not contain a field named 'size'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                                                        ~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf("Tracing file read and write events... Hit Ctrl-C to end.\\n"); }\n\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n\nEND { printf("\\nI/O size (bytes) histograms by file name:"); }', 'stdout': '', 'stderr': "stdin:3:75-100: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_read' does not contain a field named 'filename'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:3:75-100: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_write' does not contain a field named 'filename'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:3:75-101: ERROR: str() expects an integer or a pointer type as first argument (none provided)\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:3:105-120: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_read' does not contain a field named 'size'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                                                        ~~~~~~~~~~~~~~~\nstdin:3:105-120: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_write' does not contain a field named 'size'\ntracepoint:syscalls:sys_enter_read, tracepoint:syscalls:sys_enter_write { @bytes[str(args->filename)] = hist(args->size); }\n                                                                                                        ~~~~~~~~~~~~~~~\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 4 out of 40 test cases so far.

Running test case: traces file read and write events and summarizes the Read bytes by process.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

traces file read and write events and summarizes the Read bytes by process.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces block device I/O and creates histograms of I/O size in bytes for each process.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

tracepoint:block:block_rq_issue
{
	@[args.comm] = hist(args.bytes);
}

END
{
	printf("\nI/O size (bytes) histograms by process name:");
}

```

example: Write a BPF code that traces file system writeback events, including the time of occurrence, device information, reason, and duration. This code can help identify performance issues related to writeback events.

```
BEGIN
{
	printf("Tracing writeback... Hit Ctrl-C to end.\n");
	printf("%-9s %-8s %-8s %-16s %s\n", "TIME", "DEVICE", "PAGES",
	    "REASON", "ms");

	// see /sys/kernel/debug/tracing/events/writeback/writeback_start/format
	@reason[0] = "background";
	@reason[1] = "vmscan";
	@reason[2] = "sync";
	@reason[3] = "periodic";
	@reason[4] = "laptop_timer";
	@reason[5] = "free_more_memory";
	@reason[6] = "fs_free_space";
	@reason[7] = "forker_thread";
}

tracepoint:writeback:writeback_start
{
	@start[args.sb_dev] = nsecs;
}

tracepoint:writeback:writeback_written
{
	$sb_dev = args.sb_dev;
	$s = @start[$sb_dev];
	delete(@start[$sb_dev]);
	$lat = $s ? (nsecs - $s) / 1000 : 0;

	time("%H:%M:%S  ");
	printf("%-8s %-8d %-16s %d.%03d\n", args.name,
	    args.nr_pages & 0xffff,	// TODO: explain these bitmasks
	    @reason[args.reason & 0xffffffff],
	    $lat / 1000, $lat % 1000);
}

END
{
	clear(@reason);
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

traces file read and write events and summarizes the Read bytes by process.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:syscalls:sys_enter_read /args->fd/ { @read[comm] = sum(args->count); } tracepoint:syscalls:sys_enter_write /args->fd/ { @write[comm] = sum(args->count); } interval:s:1 { printf("Read bytes by process:\n"); print(@read); clear(@read); printf("Write bytes by process:\n"); print(@write); clear(@write); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_read /args->fd/ { @read[comm] = sum(args->count); } tracepoint:syscalls:sys_enter_write /args->fd/ { @write[comm] = sum(args->count); } interval:s:1 { printf("Read bytes by process:
"); print(@read); clear(@read); printf("Write bytes by process:
"); print(@write); clear(@write); }
kill process 17019
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_read /args->fd/ { @read[comm] = sum(args->count); } tracepoint:syscalls:sys_enter_write /args->fd/ { @write[comm] = sum(args->count); } interval:s:1 { printf(\"Read bytes by process:\n\"); print(@read); clear(@read); printf(\"Write bytes by process:\n\"); print(@write); clear(@write); }", "stdout": "", "stderr": "stdin:1:182-213: ERROR: unterminated string\ntracepoint:syscalls:sys_enter_read /args->fd/ { @read[comm] = sum(args->count); } tracepoint:syscalls:sys_enter_write /args->fd/ { @write[comm] = sum(args->count); } interval:s:1 { printf(\"Read bytes by process:\n                                                                                                                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-46: ERROR: syntax error, unexpected identifier, expecting ) or \",\"\n\"); print(@read); clear(@read); printf(\"Write bytes by process:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_read /args->fd/ { @read[comm] = sum(args->count); } tracepoint:syscalls:sys_enter_write /args->fd/ { @write[comm] = sum(args->count); } interval:s:1 { printf("Read bytes by process:\n"); print(@read); clear(@read); printf("Write bytes by process:\n"); print(@write); clear(@write); }', 'stdout': '', 'stderr': 'stdin:1:182-213: ERROR: unterminated string\ntracepoint:syscalls:sys_enter_read /args->fd/ { @read[comm] = sum(args->count); } tracepoint:syscalls:sys_enter_write /args->fd/ { @write[comm] = sum(args->count); } interval:s:1 { printf("Read bytes by process:\n                                                                                                                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-46: ERROR: syntax error, unexpected identifier, expecting ) or ","\n"); print(@read); clear(@read); printf("Write bytes by process:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 4 out of 40 test cases so far.

Running test case: tracks the creation and deletion of network namespaces.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

tracks the creation and deletion of network namespaces.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces block device I/O latency by calculating the time difference between the start and completion of I/O operations and storing them in a histogram.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0]/
{
	@usecs = hist((nsecs - @start[arg0]) / 1000);
	delete(@start[arg0]);
}

END
{
	clear(@start);
}

```

example: Write a BPF code that traces block I/O and measures the latency by initializing stacks, using kprobes and histogram.

```
BEGIN
{
	printf("Tracing block I/O with init stacks. Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@reqstack[arg0] = kstack;
	@reqts[arg0] = nsecs;
}

kprobe:blk_start_request,
kprobe:blk_mq_start_request
/@reqts[arg0]/
{
	@usecs[@reqstack[arg0]] = hist(nsecs - @reqts[arg0]);
	delete(@reqstack[arg0]);
	delete(@reqts[arg0]);
}

END
{
	clear(@reqstack); clear(@reqts);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

tracks the creation and deletion of network namespaces.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'kprobe:copy_net_ns { printf("Network namespace created: %d\\n", arg0); }\nkprobe:free_netdev { printf("Network namespace deleted: %d\\n", arg0); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:copy_net_ns { printf("Network namespace created: %d\n", arg0); }
kprobe:free_netdev { printf("Network namespace deleted: %d\n", arg0); }
Attaching 2 probes...


kill process 17026
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:copy_net_ns { printf(\"Network namespace created: %d\\n\", arg0); }\nkprobe:free_netdev { printf(\"Network namespace deleted: %d\\n\", arg0); }", "stdout": "Attaching 2 probes...\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:copy_net_ns { printf("Network namespace created: %d\\n", arg0); }\nkprobe:free_netdev { printf("Network namespace deleted: %d\\n", arg0); }', 'stdout': 'Attaching 2 probes...\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 5 out of 40 test cases so far.

Running test case: Print files opened events by process
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Print files opened events by process

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces open() and openat() syscalls, displaying the process ID, command name, file descriptor, error code, and file path.

```
BEGIN
{
	printf("Tracing open syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %4s %3s %s\n", "PID", "COMM", "FD", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/@filename[tid]/
{
	$ret = args.ret;
	$fd = $ret >= 0 ? $ret : -1;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %4d %3d %s\n", pid, comm, $fd, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Print files opened events by process

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:syscalls:sys_enter_open, tracepoint:syscalls:sys_enter_openat { printf("%s opened file %s\n", comm, str(args->filename)); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_open, tracepoint:syscalls:sys_enter_openat { printf("%s opened file %s
", comm, str(args->filename)); }
kill process 17036
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_open, tracepoint:syscalls:sys_enter_openat { printf(\"%s opened file %s\n\", comm, str(args->filename)); }", "stdout": "", "stderr": "stdin:1:76-102: ERROR: unterminated string\ntracepoint:syscalls:sys_enter_open, tracepoint:syscalls:sys_enter_openat { printf(\"%s opened file %s\n                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-33: ERROR: unterminated string\n\", comm, str(args->filename)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-33: ERROR: syntax error, unexpected end of file\n\", comm, str(args->filename)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_open, tracepoint:syscalls:sys_enter_openat { printf("%s opened file %s\n", comm, str(args->filename)); }', 'stdout': '', 'stderr': 'stdin:1:76-102: ERROR: unterminated string\ntracepoint:syscalls:sys_enter_open, tracepoint:syscalls:sys_enter_openat { printf("%s opened file %s\n                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-33: ERROR: unterminated string\n", comm, str(args->filename)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-33: ERROR: syntax error, unexpected end of file\n", comm, str(args->filename)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 5 out of 40 test cases so far.

Running test case: Count LLC cache misses by process name
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Count LLC cache misses by process name

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces directory entry cache (dcache) lookups in the Linux kernel. The code uses kernel dynamic tracing of functions lookup_fast() and d_lookup() to capture lookup information and prints the time, process ID, command, and file name for each lookup event.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/fs.h>
#include <linux/sched.h>

// from fs/namei.c:
struct nameidata {
        struct path     path;
        struct qstr     last;
        // [...]
};
#endif

BEGIN
{
	printf("Tracing dcache lookups... Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-16s %1s %s\n", "TIME", "PID", "COMM", "T", "FILE");
}

// comment out this block to avoid showing hits:
kprobe:lookup_fast,
kprobe:lookup_fast.constprop.*
{
	$nd = (struct nameidata *)arg0;
	printf("%-8d %-6d %-16s R %s\n", elapsed / 1e6, pid, comm,
	    str($nd->last.name));
}

kprobe:d_lookup
{
	$name = (struct qstr *)arg1;
	@fname[tid] = $name->name;
}

kretprobe:d_lookup
/@fname[tid]/
{
	printf("%-8d %-6d %-16s M %s\n", elapsed / 1e6, pid, comm,
	    str(@fname[tid]));
	delete(@fname[tid]);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Count LLC cache misses by process name

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'hardware:cache-misses:1000000 { @[comm] = count(); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e hardware:cache-misses:1000000 { @[comm] = count(); }
Attaching 1 probe...
kill process 17043
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e hardware:cache-misses:1000000 { @[comm] = count(); }", "stdout": "Attaching 1 probe...\n", "stderr": "perf_event_open failed: No such file or directory\nERROR: Error attaching probe: hardware:cache-misses:1000000\n", "returncode": 255}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e hardware:cache-misses:1000000 { @[comm] = count(); }', 'stdout': 'Attaching 1 probe...\n', 'stderr': 'perf_event_open failed: No such file or directory\nERROR: Error attaching probe: hardware:cache-misses:1000000\n', 'returncode': 255}
Test case completed. Output saved to: output.json

Passed 5 out of 40 test cases so far.

Running test case: Count page faults events by process
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Count page faults events by process

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that monitors the swapins by process.

```
kprobe:swap_readpage
{
        @[comm, pid] = count();
}

interval:s:1
{
        time();
        print(@);
        clear(@);
}

```

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Count page faults events by process

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'software:faults:1 { @[comm] = count(); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e software:faults:1 { @[comm] = count(); }
Attaching 1 probe...


@[timeout]: 3
@[node]: 1096
kill process 17047
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e software:faults:1 { @[comm] = count(); }", "stdout": "Attaching 1 probe...\n\n\n@[timeout]: 3\n@[node]: 1096\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e software:faults:1 { @[comm] = count(); }', 'stdout': 'Attaching 1 probe...\n\n\n@[timeout]: 3\n@[node]: 1096\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 6 out of 40 test cases so far.

Running test case: Print entered bash commands system wide and the exit code
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Print entered bash commands system wide and the exit code

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that counts the number of system calls and the number of processes. It also prints the top 10 system call IDs and the top 10 processes at the end.

```
BEGIN
{
	printf("Counting syscalls... Hit Ctrl-C to end.\n");
	// ausyscall --dump | awk 'NR > 1 { printf("\t@sysname[%d] = \"%s\";\n", $1, $2); }'
}

tracepoint:raw_syscalls:sys_enter
{
	@syscall[args.id] = count();
	@process[comm] = count();
}

END
{
	printf("\nTop 10 syscalls IDs:\n");
	print(@syscall, 10);
	clear(@syscall);

	printf("\nTop 10 processes:\n");
	print(@process, 10);
	clear(@process);
}

```

example: Write a BPF code that traces the readline function in the /bin/bash program and prints the timestamp, process ID, and command entered by the user.

```
BEGIN
{
	printf("Tracing bash commands... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %s\n", "TIME", "PID", "COMMAND");
}

uretprobe:/bin/bash:readline
{
	time("%H:%M:%S  ");
	printf("%-6d %s\n", pid, str(retval));
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Print entered bash commands system wide and the exit code

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing bash commands and their exit codes... Hit Ctrl-C to end.\\n");\n\tprintf("%-9s %-6s %-6s %s\\n", "TIME", "PID", "EXIT", "COMMAND");\n}\n\nuretprobe:/bin/bash:readline\n{\n\t@command[pid] = str(retval);\n}\n\ntracepoint:syscalls:sys_exit_execve\n{\n\tif (@command[pid]) {\n\t\ttime("%H:%M:%S  ");\n\t\tprintf("%-6d %-6d %s\\n", pid, args->ret, @command[pid]);\n\t\tdelete(@command[pid]);\n\t}\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing bash commands and their exit codes... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-6s %s\n", "TIME", "PID", "EXIT", "COMMAND");
}

uretprobe:/bin/bash:readline
{
	@command[pid] = str(retval);
}

tracepoint:syscalls:sys_exit_execve
{
	if (@command[pid]) {
		time("%H:%M:%S  ");
		printf("%-6d %-6d %s\n", pid, args->ret, @command[pid]);
		delete(@command[pid]);
	}
}
kill process 17057
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing bash commands and their exit codes... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-6s %s\\n\", \"TIME\", \"PID\", \"EXIT\", \"COMMAND\");\n}\n\nuretprobe:/bin/bash:readline\n{\n\t@command[pid] = str(retval);\n}\n\ntracepoint:syscalls:sys_exit_execve\n{\n\tif (@command[pid]) {\n\t\ttime(\"%H:%M:%S  \");\n\t\tprintf(\"%-6d %-6d %s\\n\", pid, args->ret, @command[pid]);\n\t\tdelete(@command[pid]);\n\t}\n}", "stdout": "", "stderr": "stdin:1:1-1: ERROR: Invalid condition in if(): string\nBEGIN\n\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing bash commands and their exit codes... Hit Ctrl-C to end.\\n");\n\tprintf("%-9s %-6s %-6s %s\\n", "TIME", "PID", "EXIT", "COMMAND");\n}\n\nuretprobe:/bin/bash:readline\n{\n\t@command[pid] = str(retval);\n}\n\ntracepoint:syscalls:sys_exit_execve\n{\n\tif (@command[pid]) {\n\t\ttime("%H:%M:%S  ");\n\t\tprintf("%-6d %-6d %s\\n", pid, args->ret, @command[pid]);\n\t\tdelete(@command[pid]);\n\t}\n}', 'stdout': '', 'stderr': 'stdin:1:1-1: ERROR: Invalid condition in if(): string\nBEGIN\n\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 6 out of 40 test cases so far.

Running test case: Trace directory entry cache (dcache) lookups by process
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace directory entry cache (dcache) lookups by process

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces directory entry cache (dcache) lookups in the Linux kernel. The code uses kernel dynamic tracing of functions lookup_fast() and d_lookup() to capture lookup information and prints the time, process ID, command, and file name for each lookup event.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/fs.h>
#include <linux/sched.h>

// from fs/namei.c:
struct nameidata {
        struct path     path;
        struct qstr     last;
        // [...]
};
#endif

BEGIN
{
	printf("Tracing dcache lookups... Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-16s %1s %s\n", "TIME", "PID", "COMM", "T", "FILE");
}

// comment out this block to avoid showing hits:
kprobe:lookup_fast,
kprobe:lookup_fast.constprop.*
{
	$nd = (struct nameidata *)arg0;
	printf("%-8d %-6d %-16s R %s\n", elapsed / 1e6, pid, comm,
	    str($nd->last.name));
}

kprobe:d_lookup
{
	$name = (struct qstr *)arg1;
	@fname[tid] = $name->name;
}

kretprobe:d_lookup
/@fname[tid]/
{
	printf("%-8d %-6d %-16s M %s\n", elapsed / 1e6, pid, comm,
	    str(@fname[tid]));
	delete(@fname[tid]);
}

```

example: Write a BPF code that traces the syscalls statfs(), statx(), newstat(), and newlstat(), providing information about the PID, process name, error code, and path being accessed.

```
BEGIN
{
	printf("Tracing stat syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %3s %s\n", "PID", "COMM", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_statfs
{
	@filename[tid] = args.pathname;
}

tracepoint:syscalls:sys_enter_statx,
tracepoint:syscalls:sys_enter_newstat,
tracepoint:syscalls:sys_enter_newlstat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_statfs,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_newstat,
tracepoint:syscalls:sys_exit_newlstat
/@filename[tid]/
{
	$ret = args.ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %3d %s\n", pid, comm, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace directory entry cache (dcache) lookups by process

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/dcache.h>\n#include <linux/sched.h>\n\nBEGIN\n{\n  printf("Tracing dcache lookups... Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %s\\n", "TIME", "PID", "COMM", "FILE");\n}\n\nkprobe:lookup_fast,\nkprobe:lookup_fast.constprop.*\n{\n  $nd = (struct nameidata *)arg0;\n  printf("%-8d %-6d %-16s %s\\n", elapsed / 1e6, pid, comm, str($nd->last.name));\n}\n\nkprobe:d_lookup\n{\n  $name = (struct qstr *)arg1;\n  @fname[tid] = $name->name;\n}\n\nkretprobe:d_lookup\n/@fname[tid]/\n{\n  printf("%-8d %-6d %-16s %s\\n", elapsed / 1e6, pid, comm, str(@fname[tid]));\n  delete(@fname[tid]);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/dcache.h>
#include <linux/sched.h>

BEGIN
{
  printf("Tracing dcache lookups... Hit Ctrl-C to end.\n");
  printf("%-8s %-6s %-16s %s\n", "TIME", "PID", "COMM", "FILE");
}

kprobe:lookup_fast,
kprobe:lookup_fast.constprop.*
{
  $nd = (struct nameidata *)arg0;
  printf("%-8d %-6d %-16s %s\n", elapsed / 1e6, pid, comm, str($nd->last.name));
}

kprobe:d_lookup
{
  $name = (struct qstr *)arg1;
  @fname[tid] = $name->name;
}

kretprobe:d_lookup
/@fname[tid]/
{
  printf("%-8d %-6d %-16s %s\n", elapsed / 1e6, pid, comm, str(@fname[tid]));
  delete(@fname[tid]);
}
Attaching 4 probes...
Tracing dcache lookups... Hit Ctrl-C to end.
TIME     PID    COMM             FILE
95       1648   node             proc/16490/cmdline
104      1648   node             16490/cmdline
104      1648   node             cmdline
296      1648   node             proc/16490/cmdline
314      1648   node             16490/cmdline
314      1648   node             cmdline
474      1624   node             proc/meminfo
474      1624   node             meminfo
474      1624   node             home/yunwei/.vscode/c_cpp_properties.json
474      1624   node             yunwei/.vscode/c_cpp_properties.json
474      1624   node             .vscode/c_cpp_properties.json
474      1624   node             c_cpp_properties.json
497      1648   node             proc/16490/cmdline
506      1648   node             16490/cmdline
506      1648   node             cmdline
563      1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
563      1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
563      1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
563      1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
563      1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
563      1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
563      1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
563      1624   node             vscode.lock
563      1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
563      1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
563      1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
563      1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
563      1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
563      1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
563      1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
563      1624   node             vscode.lock
563      1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
563      1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
563      1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
563      1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
563      1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
563      1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
563      1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
563      1635   node             vscode.lock
698      1648   node             proc/16490/cmdline
698      1648   node             16490/cmdline
698      1648   node             cmdline
900      1648   node             proc/16490/cmdline
914      1648   node             16490/cmdline
914      1648   node             cmdline
1100     1648   node             proc/16490/cmdline
1100     1648   node             16490/cmdline
1100     1648   node             cmdline
1302     1648   node             proc/16490/cmdline
1321     1648   node             16490/cmdline
1321     1648   node             cmdline
1503     1648   node             proc/16490/cmdline
1513     1648   node             16490/cmdline
1513     1648   node             cmdline
1564     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
1564     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
1564     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
1564     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
1564     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
1564     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
1564     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
1564     1624   node             vscode.lock
1564     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
1564     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
1564     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
1564     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
1564     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
1564     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
1564     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
1564     1624   node             vscode.lock
1564     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
1564     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
1564     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
1564     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
1564     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
1564     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
1564     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
1564     1635   node             vscode.lock
1704     1648   node             proc/16490/cmdline
1708     1648   node             16490/cmdline
1708     1648   node             cmdline
1748     804    irqbalance       proc/interrupts
1769     804    irqbalance       interrupts
1769     804    irqbalance       proc/stat
1769     804    irqbalance       stat
1906     1648   node             proc/16490/cmdline
1906     1648   node             16490/cmdline
1906     1648   node             cmdline
1979     528    vmtoolsd         etc/vmware-tools/tools-global.conf
1979     528    vmtoolsd         vmware-tools/tools-global.conf
1979     528    vmtoolsd         tools-global.conf
1979     528    vmtoolsd         etc/vmware-tools/tools.conf
1979     528    vmtoolsd         vmware-tools/tools.conf
1979     528    vmtoolsd         tools.conf
2108     1648   node             proc/16490/cmdline
2130     1648   node             16490/cmdline
2130     1648   node             cmdline
2309     1648   node             proc/16490/cmdline
2315     1648   node             16490/cmdline
2315     1648   node             cmdline
2510     1648   node             proc/16490/cmdline
2510     1648   node             16490/cmdline
2510     1648   node             cmdline
2565     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
2579     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
2579     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
2579     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
2579     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
2579     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
2579     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
2579     1624   node             vscode.lock
2582     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
2582     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
2582     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
2582     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
2582     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
2582     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
2582     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
2582     1624   node             vscode.lock
2583     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
2583     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
2583     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
2583     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
2583     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
2583     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
2583     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
2583     1635   node             vscode.lock
2711     1648   node             proc/16490/cmdline
2729     1648   node             16490/cmdline
2729     1648   node             cmdline
2913     1648   node             proc/16490/cmdline
2913     1648   node             16490/cmdline
2913     1648   node             cmdline
2974     1624   node             proc/meminfo
3037     1624   node             meminfo
3037     1624   node             home/yunwei/.vscode/c_cpp_properties.json
3037     1624   node             yunwei/.vscode/c_cpp_properties.json
3037     1624   node             .vscode/c_cpp_properties.json
3037     1624   node             c_cpp_properties.json
3116     1648   node             proc/16490/cmdline
3121     1648   node             16490/cmdline
3121     1648   node             cmdline
3316     1648   node             proc/16490/cmdline
3316     1648   node             16490/cmdline
3316     1648   node             cmdline
3517     1648   node             proc/16490/cmdline
3540     1648   node             16490/cmdline
3541     1648   node             cmdline
3566     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
3566     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
3566     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
3566     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
3566     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
3566     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
3566     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
3566     1624   node             vscode.lock
3566     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
3566     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
3566     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
3566     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
3566     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
3566     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
3566     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
3566     1624   node             vscode.lock
3566     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
3566     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
3566     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
3566     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
3566     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
3566     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
3566     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
3566     1635   node             vscode.lock
3719     1648   node             proc/16490/cmdline
3720     1648   node             16490/cmdline
3720     1648   node             cmdline
3922     1648   node             proc/16490/cmdline
3922     1648   node             16490/cmdline
3922     1648   node             cmdline
4125     1648   node             proc/16490/cmdline
4125     1648   node             16490/cmdline
4125     1648   node             cmdline
4327     1648   node             proc/16490/cmdline
4327     1648   node             16490/cmdline
4327     1648   node             cmdline
4528     1648   node             proc/16490/cmdline
4528     1648   node             16490/cmdline
4528     1648   node             cmdline
4565     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
4565     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
4565     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
4565     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
4565     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
4565     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
4565     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
4565     1624   node             vscode.lock
4572     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
4572     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
4572     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
4572     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
4572     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
4572     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
4572     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
4572     1624   node             vscode.lock
4572     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
4572     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
4572     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
4572     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
4572     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
4572     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
4572     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
4572     1635   node             vscode.lock
4730     1648   node             proc/16490/cmdline
4730     1648   node             16490/cmdline
4730     1648   node             cmdline
4932     1648   node             proc/16490/cmdline
4932     1648   node             16490/cmdline
4932     1648   node             cmdline
5133     1648   node             proc/16490/cmdline
5133     1648   node             16490/cmdline
5133     1648   node             cmdline
5334     1648   node             proc/16490/cmdline
5334     1648   node             16490/cmdline
5334     1648   node             cmdline
5476     1624   node             proc/meminfo
5476     1624   node             meminfo
5476     1624   node             home/yunwei/.vscode/c_cpp_properties.json
5476     1624   node             yunwei/.vscode/c_cpp_properties.json
5476     1624   node             .vscode/c_cpp_properties.json
5476     1624   node             c_cpp_properties.json
5535     1648   node             proc/16490/cmdline
5535     1648   node             16490/cmdline
5535     1648   node             cmdline
5568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
5568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
5568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
5568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
5568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
5568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
5568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
5568     1624   node             vscode.lock
5568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
5568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
5568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
5568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
5568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
5568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
5568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
5568     1624   node             vscode.lock
5568     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
5568     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
5568     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
5568     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
5568     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
5568     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
5568     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
5568     1635   node             vscode.lock
5737     1648   node             proc/16490/cmdline
5738     1648   node             16490/cmdline
5738     1648   node             cmdline
5938     1648   node             proc/16490/cmdline
5938     1648   node             16490/cmdline
5938     1648   node             cmdline
6140     1648   node             proc/16490/cmdline
6140     1648   node             16490/cmdline
6140     1648   node             cmdline
6341     1648   node             proc/16490/cmdline
6342     1648   node             16490/cmdline
6342     1648   node             cmdline
6542     1648   node             proc/16490/cmdline
6542     1648   node             16490/cmdline
6542     1648   node             cmdline
6568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
6568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
6568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
6568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
6568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
6568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
6568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
6568     1624   node             vscode.lock
6568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
6568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
6568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
6568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
6568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
6568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
6568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
6568     1624   node             vscode.lock
6568     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
6568     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
6568     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
6568     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
6568     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
6568     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
6568     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
6568     1635   node             vscode.lock
6744     1648   node             proc/16490/cmdline
6744     1648   node             16490/cmdline
6744     1648   node             cmdline
6945     1648   node             proc/16490/cmdline
6945     1648   node             16490/cmdline
6945     1648   node             cmdline
6980     528    vmtoolsd         etc/vmware-tools/tools-global.conf
6980     528    vmtoolsd         vmware-tools/tools-global.conf
6980     528    vmtoolsd         tools-global.conf
6980     528    vmtoolsd         etc/vmware-tools/tools.conf
6980     528    vmtoolsd         vmware-tools/tools.conf
6980     528    vmtoolsd         tools.conf
7146     1648   node             proc/16490/cmdline
7146     1648   node             16490/cmdline
7146     1648   node             cmdline
7348     1648   node             proc/16490/cmdline
7348     1648   node             16490/cmdline
7348     1648   node             cmdline
7550     1648   node             proc/16490/cmdline
7550     1648   node             16490/cmdline
7550     1648   node             cmdline
7569     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
7569     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
7569     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
7569     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
7569     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
7569     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
7569     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
7569     1624   node             vscode.lock
7570     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
7570     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
7570     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
7570     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
7570     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
7570     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
7570     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
7570     1624   node             vscode.lock
7570     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
7570     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
7570     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
7570     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
7570     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
7570     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
7570     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
7570     1635   node             vscode.lock
7750     1648   node             proc/16490/cmdline
7750     1648   node             16490/cmdline
7750     1648   node             cmdline
7951     1648   node             proc/16490/cmdline
7951     1648   node             16490/cmdline
7951     1648   node             cmdline
7978     1624   node             proc/meminfo
7978     1624   node             meminfo
7978     1624   node             home/yunwei/.vscode/c_cpp_properties.json
7978     1624   node             yunwei/.vscode/c_cpp_properties.json
7978     1624   node             .vscode/c_cpp_properties.json
7978     1624   node             c_cpp_properties.json
8153     1648   node             proc/16490/cmdline
8153     1648   node             16490/cmdline
8153     1648   node             cmdline
8355     1648   node             proc/16490/cmdline
8355     1648   node             16490/cmdline
8355     1648   node             cmdline
8557     1648   node             proc/16490/cmdline
8557     1648   node             16490/cmdline
8557     1648   node             cmdline
8571     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
8571     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
8571     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
8571     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
8571     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
8571     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
8571     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
8571     1624   node             vscode.lock
8571     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
8571     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
8571     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
8571     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
8571     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
8571     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
8571     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
8571     1624   node             vscode.lock
8572     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
8572     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
8572     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
8572     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
8572     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
8572     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
8572     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
8572     1635   node             vscode.lock
8758     1648   node             proc/16490/cmdline
8758     1648   node             16490/cmdline
8758     1648   node             cmdline
8960     1648   node             proc/16490/cmdline
8960     1648   node             16490/cmdline
8960     1648   node             cmdline
9161     1648   node             proc/16490/cmdline
9161     1648   node             16490/cmdline
9162     1648   node             cmdline
9363     1648   node             proc/16490/cmdline
9363     1648   node             16490/cmdline
9363     1648   node             cmdline
9563     1648   node             proc/16490/cmdline
9563     1648   node             16490/cmdline
9563     1648   node             cmdline
9572     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
9572     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
9572     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
9572     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
9572     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
9572     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
9572     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
9572     1624   node             vscode.lock
9573     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
9573     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
9573     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
9573     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
9573     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
9573     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
9573     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
9573     1624   node             vscode.lock
9573     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
9573     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
9573     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
9573     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
9573     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
9573     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
9573     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
9573     1635   node             vscode.lock
9765     1648   node             proc/16490/cmdline
9765     1648   node             16490/cmdline
9765     1648   node             cmdline
9965     1648   node             proc/16490/cmdline
9965     1648   node             16490/cmdline
9965     1648   node             cmdline
10168    1648   node             proc/16490/cmdline
10168    1648   node             16490/cmdline
10168    1648   node             cmdline
10369    1648   node             proc/16490/cmdline
10369    1648   node             16490/cmdline
10369    1648   node             cmdline
10480    1624   node             proc/meminfo
10480    1624   node             meminfo
10480    1624   node             home/yunwei/.vscode/c_cpp_properties.json
10480    1624   node             yunwei/.vscode/c_cpp_properties.json
10480    1624   node             .vscode/c_cpp_properties.json
10480    1624   node             c_cpp_properties.json
10570    1648   node             proc/16490/cmdline
10570    1648   node             16490/cmdline
10570    1648   node             cmdline
10574    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
10588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
10588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
10588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
10588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
10588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
10588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
10588    1624   node             vscode.lock
10590    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
10590    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
10590    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
10590    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
10590    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
10590    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
10590    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
10590    1624   node             vscode.lock
10590    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
10590    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
10590    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
10590    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
10590    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
10590    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
10590    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
10590    1635   node             vscode.lock
10771    1648   node             proc/16490/cmdline
10771    1648   node             16490/cmdline
10771    1648   node             cmdline
10975    1648   node             proc/16490/cmdline
10975    1648   node             16490/cmdline
10975    1648   node             cmdline
11175    1648   node             proc/16490/cmdline
11175    1648   node             16490/cmdline
11175    1648   node             cmdline
11375    1648   node             proc/16490/cmdline
11375    1648   node             16490/cmdline
11375    1648   node             cmdline
11578    1648   node             proc/16490/cmdline
11578    1648   node             16490/cmdline
11578    1648   node             cmdline
11578    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
11578    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
11578    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
11578    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
11578    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
11578    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
11578    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
11578    1624   node             vscode.lock
11578    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
11578    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
11578    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
11578    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
11578    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
11578    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
11578    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
11578    1624   node             vscode.lock
11579    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
11579    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
11579    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
11579    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
11579    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
11579    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
11579    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
11579    1635   node             vscode.lock
11658    528    vmtoolsd         etc/mtab
11658    528    vmtoolsd         mtab
11658    528    vmtoolsd         proc/self/mounts
11658    528    vmtoolsd         self/mounts
11658    528    vmtoolsd         528
11658    528    vmtoolsd         mounts
11658    528    vmtoolsd         proc/devices
11658    528    vmtoolsd         devices
11659    528    vmtoolsd         dev
11659    528    vmtoolsd         dev/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         sys/class/block/sda2/slaves
11659    528    vmtoolsd         class/block/sda2/slaves
11659    528    vmtoolsd         block/sda2/slaves
11659    528    vmtoolsd         sda2/slaves
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         slaves
11659    528    vmtoolsd         sys/class/block/sda2/device
11659    528    vmtoolsd         class/block/sda2/device
11659    528    vmtoolsd         block/sda2/device
11659    528    vmtoolsd         sda2/device
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         device
11659    528    vmtoolsd         sys/class/block/sda2/../device
11659    528    vmtoolsd         class/block/sda2/../device
11659    528    vmtoolsd         block/sda2/../device
11659    528    vmtoolsd         sda2/../device
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         device
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         sys
11659    528    vmtoolsd         sys/class
11659    528    vmtoolsd         class
11659    528    vmtoolsd         sys/class/block
11659    528    vmtoolsd         class/block
11659    528    vmtoolsd         block
11659    528    vmtoolsd         sys/class/block/sda2
11659    528    vmtoolsd         class/block/sda2
11659    528    vmtoolsd         block/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         sys/devices
11659    528    vmtoolsd         devices
11659    528    vmtoolsd         sys/devices/pci0000:00
11659    528    vmtoolsd         devices/pci0000:00
11659    528    vmtoolsd         pci0000:00
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0
11659    528    vmtoolsd         0000:00:10.0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32
11659    528    vmtoolsd         0000:00:10.0/host32
11659    528    vmtoolsd         host32
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         host32/target32:0:0
11659    528    vmtoolsd         target32:0:0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         target32:0:0/32:0:0:0
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         32:0:0:0/block
11659    528    vmtoolsd         block
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         32:0:0:0/block/sda
11659    528    vmtoolsd         block/sda
11659    528    vmtoolsd         sda
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         block/sda/sda2/
11659    528    vmtoolsd         sda/sda2/
11659    528    vmtoolsd         sda2/
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/device
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/device
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/device
11659    528    vmtoolsd         32:0:0:0/block/sda/device
11659    528    vmtoolsd         block/sda/device
11659    528    vmtoolsd         sda/device
11659    528    vmtoolsd         device
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         target32:0:0/32:0:0:0
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../sas_port
11659    528    vmtoolsd         class/block/sda2/../device/../../../sas_port
11659    528    vmtoolsd         block/sda2/../device/../../../sas_port
11659    528    vmtoolsd         sda2/../device/../../../sas_port
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         device/../../../sas_port
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         sas_port
11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../class
11659    528    vmtoolsd         class/block/sda2/../device/../../../class
11659    528    vmtoolsd         block/sda2/../device/../../../class
11659    528    vmtoolsd         sda2/../device/../../../class
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         device/../../../class
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         class
11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../class
11659    528    vmtoolsd         class/block/sda2/../device/../../../class
11659    528    vmtoolsd         block/sda2/../device/../../../class
11659    528    vmtoolsd         sda2/../device/../../../class
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         device/../../../class
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         class
11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../label
11659    528    vmtoolsd         class/block/sda2/../device/../../../label
11659    528    vmtoolsd         block/sda2/../device/../../../label
11659    528    vmtoolsd         sda2/../device/../../../label
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         device/../../../label
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         label
11659    528    vmtoolsd         sys
11659    528    vmtoolsd         sys/class
11659    528    vmtoolsd         class
11659    528    vmtoolsd         sys/class/block
11659    528    vmtoolsd         class/block
11659    528    vmtoolsd         block
11659    528    vmtoolsd         sys/class/block/sda2
11659    528    vmtoolsd         class/block/sda2
11659    528    vmtoolsd         block/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         sys/devices
11659    528    vmtoolsd         devices
11659    528    vmtoolsd         sys/devices/pci0000:00
11659    528    vmtoolsd         devices/pci0000:00
11659    528    vmtoolsd         pci0000:00
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0
11659    528    vmtoolsd         0000:00:10.0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32
11659    528    vmtoolsd         0000:00:10.0/host32
11659    528    vmtoolsd         host32
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0
11659    528    vmtoolsd         host32/target32:0:0
11659    528    vmtoolsd         target32:0:0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         target32:0:0/32:0:0:0
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block
11659    528    vmtoolsd         32:0:0:0/block
11659    528    vmtoolsd         block
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda
11659    528    vmtoolsd         32:0:0:0/block/sda
11659    528    vmtoolsd         block/sda
11659    528    vmtoolsd         sda
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2
11659    528    vmtoolsd         block/sda/sda2
11659    528    vmtoolsd         sda/sda2
11659    528    vmtoolsd         sda2
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         32:0:0:0/block/sda/sda2/
11659    528    vmtoolsd         block/sda/sda2/
11659    528    vmtoolsd         sda/sda2/
11659    528    vmtoolsd         sda2/
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/device
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/device
11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/device
11659    528    vmtoolsd         32:0:0:0/block/sda/device
11659    528    vmtoolsd         block/sda/device
11659    528    vmtoolsd         sda/device
11659    528    vmtoolsd         device
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0
11659    528    vmtoolsd         target32:0:0/32:0:0:0
11659    528    vmtoolsd         32:0:0:0
11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:
11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/
11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/
11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/
11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/
11659    528    vmtoolsd         target32:0:0/32:0:0:0/
11659    528    vmtoolsd         32:0:0:0/
11659    528    vmtoolsd         etc/resolv.conf
11659    528    vmtoolsd         resolv.conf
11659    528    vmtoolsd         run/systemd/resolve/stub-resolv.conf
11659    528    vmtoolsd         systemd/resolve/stub-resolv.conf
11660    528    vmtoolsd         resolve/stub-resolv.conf
11660    528    vmtoolsd         stub-resolv.conf
11660    528    vmtoolsd         etc
11660    528    vmtoolsd         etc/resolv.conf
11660    528    vmtoolsd         resolv.conf
11660    528    vmtoolsd         run
11660    528    vmtoolsd         run/systemd
11660    528    vmtoolsd         systemd
11660    528    vmtoolsd         run/systemd/resolve
11660    528    vmtoolsd         systemd/resolve
11660    528    vmtoolsd         resolve
11660    528    vmtoolsd         run/systemd/resolve/stub-resolv.conf
11660    528    vmtoolsd         systemd/resolve/stub-resolv.conf
11660    528    vmtoolsd         resolve/stub-resolv.conf
11660    528    vmtoolsd         stub-resolv.conf
11660    528    vmtoolsd         run/systemd/resolve/resolv.conf
11660    528    vmtoolsd         systemd/resolve/resolv.conf
11660    528    vmtoolsd         resolve/resolv.conf
11660    528    vmtoolsd         resolv.conf
11660    528    vmtoolsd         run/systemd/resolve/resolv.conf
11660    528    vmtoolsd         systemd/resolve/resolv.conf
11660    528    vmtoolsd         resolve/resolv.conf
11660    528    vmtoolsd         resolv.conf
11660    528    vmtoolsd         proc/net/route
11660    528    vmtoolsd         net/route
11660    528    vmtoolsd         self/net
11660    528    vmtoolsd         528
11660    528    vmtoolsd         net
11660    528    vmtoolsd         route
11660    528    vmtoolsd         route
11660    528    vmtoolsd         proc/net/ipv6_route
11660    528    vmtoolsd         net/ipv6_route
11660    528    vmtoolsd         self/net
11660    528    vmtoolsd         528
11660    528    vmtoolsd         net
11660    528    vmtoolsd         ipv6_route
11660    528    vmtoolsd         ipv6_route
11660    528    vmtoolsd         proc/uptime
11660    528    vmtoolsd         uptime
11697    528    vmtoolsd         proc/meminfo
11697    528    vmtoolsd         meminfo
11697    528    vmtoolsd         proc/vmstat
11697    528    vmtoolsd         vmstat
11697    528    vmtoolsd         proc/stat
11697    528    vmtoolsd         stat
11697    528    vmtoolsd         proc/zoneinfo
11697    528    vmtoolsd         zoneinfo
11697    528    vmtoolsd         proc/uptime
11697    528    vmtoolsd         uptime
11697    528    vmtoolsd         proc/diskstats
11697    528    vmtoolsd         diskstats
11698    528    vmtoolsd         sys/block/loop0
11698    528    vmtoolsd         block/loop0
11698    528    vmtoolsd         loop0
11698    528    vmtoolsd         devices/virtual/block/loop0
11698    528    vmtoolsd         virtual/block/loop0
11698    528    vmtoolsd         block/loop0
11698    528    vmtoolsd         loop0
11698    528    vmtoolsd         sys/block/loop1
11698    528    vmtoolsd         block/loop1
11698    528    vmtoolsd         loop1
11698    528    vmtoolsd         devices/virtual/block/loop1
11698    528    vmtoolsd         virtual/block/loop1
11698    528    vmtoolsd         block/loop1
11698    528    vmtoolsd         loop1
11698    528    vmtoolsd         sys/block/loop2
11698    528    vmtoolsd         block/loop2
11698    528    vmtoolsd         loop2
11698    528    vmtoolsd         devices/virtual/block/loop2
11698    528    vmtoolsd         virtual/block/loop2
11698    528    vmtoolsd         block/loop2
11698    528    vmtoolsd         loop2
11698    528    vmtoolsd         sys/block/loop3
11698    528    vmtoolsd         block/loop3
11698    528    vmtoolsd         loop3
11698    528    vmtoolsd         devices/virtual/block/loop3
11698    528    vmtoolsd         virtual/block/loop3
11698    528    vmtoolsd         block/loop3
11698    528    vmtoolsd         loop3
11698    528    vmtoolsd         sys/block/loop4
11698    528    vmtoolsd         block/loop4
11698    528    vmtoolsd         loop4
11698    528    vmtoolsd         devices/virtual/block/loop4
11698    528    vmtoolsd         virtual/block/loop4
11698    528    vmtoolsd         block/loop4
11698    528    vmtoolsd         loop4
11698    528    vmtoolsd         sys/block/loop5
11698    528    vmtoolsd         block/loop5
11698    528    vmtoolsd         loop5
11698    528    vmtoolsd         devices/virtual/block/loop5
11698    528    vmtoolsd         virtual/block/loop5
11698    528    vmtoolsd         block/loop5
11698    528    vmtoolsd         loop5
11698    528    vmtoolsd         sys/block/loop6
11698    528    vmtoolsd         block/loop6
11698    528    vmtoolsd         loop6
11698    528    vmtoolsd         devices/virtual/block/loop6
11698    528    vmtoolsd         virtual/block/loop6
11698    528    vmtoolsd         block/loop6
11698    528    vmtoolsd         loop6
11698    528    vmtoolsd         sys/block/loop7
11698    528    vmtoolsd         block/loop7
11698    528    vmtoolsd         loop7
11698    528    vmtoolsd         devices/virtual/block/loop7
11698    528    vmtoolsd         virtual/block/loop7
11698    528    vmtoolsd         block/loop7
11698    528    vmtoolsd         loop7
11698    528    vmtoolsd         sys/block/sr0
11698    528    vmtoolsd         block/sr0
11698    528    vmtoolsd         sr0
11698    528    vmtoolsd         devices/pci0000:00/0000:00:11.0/0000:02:05.0/ata4/host3/target3
11698    528    vmtoolsd         pci0000:00/0000:00:11.0/0000:02:05.0/ata4/host3/target3:0:0/3:0
11698    528    vmtoolsd         0000:00:11.0/0000:02:05.0/ata4/host3/target3:0:0/3:0:0:0/block/
11698    528    vmtoolsd         0000:02:05.0/ata4/host3/target3:0:0/3:0:0:0/block/sr0
11698    528    vmtoolsd         ata4/host3/target3:0:0/3:0:0:0/block/sr0
11698    528    vmtoolsd         host3/target3:0:0/3:0:0:0/block/sr0
11698    528    vmtoolsd         target3:0:0/3:0:0:0/block/sr0
11698    528    vmtoolsd         3:0:0:0/block/sr0
11698    528    vmtoolsd         block/sr0
11698    528    vmtoolsd         sr0
11698    528    vmtoolsd         sys/block/sda
11698    528    vmtoolsd         block/sda
11698    528    vmtoolsd         sda
11698    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl
11698    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda
11698    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda
11698    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda
11698    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda
11698    528    vmtoolsd         32:0:0:0/block/sda
11698    528    vmtoolsd         block/sda
11698    528    vmtoolsd         sda
11698    528    vmtoolsd         sys/block/sda1
11698    528    vmtoolsd         block/sda1
11698    528    vmtoolsd         sda1
11698    528    vmtoolsd         sys/block/sda2
11698    528    vmtoolsd         block/sda2
11698    528    vmtoolsd         sda2
11698    528    vmtoolsd         sys/block/loop8
11698    528    vmtoolsd         block/loop8
11698    528    vmtoolsd         loop8
11698    528    vmtoolsd         devices/virtual/block/loop8
11698    528    vmtoolsd         virtual/block/loop8
11698    528    vmtoolsd         block/loop8
11698    528    vmtoolsd         loop8
11698    528    vmtoolsd         sys/block/loop9
11698    528    vmtoolsd         block/loop9
11698    528    vmtoolsd         loop9
11698    528    vmtoolsd         devices/virtual/block/loop9
11698    528    vmtoolsd         virtual/block/loop9
11698    528    vmtoolsd         block/loop9
11698    528    vmtoolsd         loop9
11698    528    vmtoolsd         sys/block/loop10
11698    528    vmtoolsd         block/loop10
11698    528    vmtoolsd         loop10
11698    528    vmtoolsd         devices/virtual/block/loop10
11698    528    vmtoolsd         virtual/block/loop10
11698    528    vmtoolsd         block/loop10
11698    528    vmtoolsd         loop10
11753    804    irqbalance       proc/interrupts
11753    804    irqbalance       interrupts
11753    804    irqbalance       proc/stat
11754    804    irqbalance       stat
11781    1648   node             proc/16490/cmdline
11781    1648   node             16490/cmdline
11781    1648   node             cmdline
11984    1648   node             proc/16490/cmdline
11984    1648   node             16490/cmdline
11984    1648   node             cmdline
11984    528    vmtoolsd         etc/vmware-tools/tools-global.conf
11984    528    vmtoolsd         vmware-tools/tools-global.conf
11984    528    vmtoolsd         tools-global.conf
11984    528    vmtoolsd         etc/vmware-tools/tools.conf
11984    528    vmtoolsd         vmware-tools/tools.conf
11984    528    vmtoolsd         tools.conf
12185    1648   node             proc/16490/cmdline
12185    1648   node             16490/cmdline
12185    1648   node             cmdline
12386    1648   node             proc/16490/cmdline
12386    1648   node             16490/cmdline
12386    1648   node             cmdline
12580    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
12580    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
12580    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
12580    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
12580    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
12580    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
12580    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
12580    1624   node             vscode.lock
12581    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
12581    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
12581    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
12581    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
12581    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
12581    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
12581    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
12581    1624   node             vscode.lock
12581    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
12581    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
12581    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
12581    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
12581    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
12581    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
12581    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
12581    1635   node             vscode.lock
12588    1648   node             proc/16490/cmdline
12588    1648   node             16490/cmdline
12588    1648   node             cmdline
12792    1648   node             proc/16490/cmdline
12792    1648   node             16490/cmdline
12792    1648   node             cmdline
12983    1624   node             proc/meminfo
12983    1624   node             meminfo
12983    1624   node             home/yunwei/.vscode/c_cpp_properties.json
12983    1624   node             yunwei/.vscode/c_cpp_properties.json
12983    1624   node             .vscode/c_cpp_properties.json
12983    1624   node             c_cpp_properties.json
12994    1648   node             proc/16490/cmdline
12994    1648   node             16490/cmdline
12994    1648   node             cmdline
13194    1648   node             proc/16490/cmdline
13194    1648   node             16490/cmdline
13194    1648   node             cmdline
13398    1648   node             proc/16490/cmdline
13398    1648   node             16490/cmdline
13398    1648   node             cmdline
13581    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
13581    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
13581    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
13581    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
13581    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
13581    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
13581    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
13581    1624   node             vscode.lock
13582    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
13582    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
13582    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
13582    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
13582    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
13582    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
13582    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
13582    1624   node             vscode.lock
13582    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
13588    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
13588    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
13588    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
13588    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
13588    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
13588    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
13588    1635   node             vscode.lock
13599    1648   node             proc/16490/cmdline
13599    1648   node             16490/cmdline
13599    1648   node             cmdline
13801    1648   node             proc/16490/cmdline
13813    1648   node             16490/cmdline
13813    1648   node             cmdline
14004    1648   node             proc/16490/cmdline
14004    1648   node             16490/cmdline
14004    1648   node             cmdline
14205    1648   node             proc/16490/cmdline
14205    1648   node             16490/cmdline
14205    1648   node             cmdline
14408    1648   node             proc/16490/cmdline
14408    1648   node             16490/cmdline
14408    1648   node             cmdline
14585    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
14585    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
14585    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
14585    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
14585    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
14585    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
14585    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
14585    1624   node             vscode.lock
14586    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
14586    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
14586    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
14586    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
14586    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
14586    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
14586    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
14586    1624   node             vscode.lock
14586    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
14586    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
14586    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
14586    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
14586    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
14586    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
14586    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
14586    1635   node             vscode.lock
14608    1648   node             proc/16490/cmdline
14608    1648   node             16490/cmdline
14608    1648   node             cmdline
14809    1648   node             proc/16490/cmdline
14817    1648   node             16490/cmdline
14817    1648   node             cmdline
15010    1648   node             proc/16490/cmdline
15010    1648   node             16490/cmdline
15010    1648   node             cmdline
15213    1648   node             proc/16490/cmdline
15213    1648   node             16490/cmdline
15213    1648   node             cmdline
15417    1648   node             proc/16490/cmdline
15417    1648   node             16490/cmdline
15417    1648   node             cmdline
15483    1624   node             proc/meminfo
15483    1624   node             meminfo
15484    1624   node             home/yunwei/.vscode/c_cpp_properties.json
15484    1624   node             yunwei/.vscode/c_cpp_properties.json
15484    1624   node             .vscode/c_cpp_properties.json
15484    1624   node             c_cpp_properties.json
15588    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
15588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
15588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
15588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
15588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
15588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
15588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
15588    1624   node             vscode.lock
15588    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
15588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
15588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
15588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
15588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
15588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
15588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
15588    1624   node             vscode.lock
15588    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
15588    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
15588    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
15588    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
15588    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
15588    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
15588    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
15588    1635   node             vscode.lock
15619    1648   node             proc/16490/cmdline
15619    1648   node             16490/cmdline
15619    1648   node             cmdline
15821    1648   node             proc/16490/cmdline
15821    1648   node             16490/cmdline
15821    1648   node             cmdline
16022    1648   node             proc/16490/cmdline
16022    1648   node             16490/cmdline
16022    1648   node             cmdline
16226    1648   node             proc/16490/cmdline
16229    1648   node             16490/cmdline
16229    1648   node             cmdline
16429    1648   node             proc/16490/cmdline
16429    1648   node             16490/cmdline
16429    1648   node             cmdline
16589    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
16589    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
16589    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
16589    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
16589    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
16589    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
16589    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
16589    1624   node             vscode.lock
16590    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
16590    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
16590    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
16590    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
16590    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
16590    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
16590    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
16590    1624   node             vscode.lock
16590    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
16590    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
16590    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
16590    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
16590    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
16590    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
16590    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
16590    1635   node             vscode.lock
16631    1648   node             proc/16490/cmdline
16631    1648   node             16490/cmdline
16631    1648   node             cmdline
16835    1648   node             proc/16490/cmdline
16835    1648   node             16490/cmdline
16835    1648   node             cmdline
16987    528    vmtoolsd         etc/vmware-tools/tools-global.conf
16987    528    vmtoolsd         vmware-tools/tools-global.conf
16987    528    vmtoolsd         tools-global.conf
16987    528    vmtoolsd         etc/vmware-tools/tools.conf
16987    528    vmtoolsd         vmware-tools/tools.conf
16987    528    vmtoolsd         tools.conf
17036    1648   node             proc/16490/cmdline
17036    1648   node             16490/cmdline
17036    1648   node             cmdline
17239    1648   node             proc/16490/cmdline
17239    1648   node             16490/cmdline
17239    1648   node             cmdline
17440    1648   node             proc/16490/cmdline
17440    1648   node             16490/cmdline
17440    1648   node             cmdline
17593    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
17593    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
17593    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
17593    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
17593    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
17593    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
17593    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
17593    1624   node             vscode.lock
17593    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
17593    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
17593    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
17593    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
17593    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
17593    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
17593    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
17593    1624   node             vscode.lock
17593    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573
17593    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba
17593    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4
17593    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc
17593    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l
17593    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock
17593    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock
17593    1635   node             vscode.lock
17642    1648   node             proc/16490/cmdline
17642    1648   node             16490/cmdline
17642    1648   node             cmdline
17845    1648   node             proc/16490/cmdline
17845    1648   node             16490/cmdline
17845    1648   node             cmdline
17986    1624   node             proc/meminfo
17986    1624   node             meminfo
17986    1624   node             home/yunwei/.vscode/c_cpp_properties.json
17986    1624   node             yunwei/.vscode/c_cpp_properties.json
17986    1624   node             .vscode/c_cpp_properties.json
17986    1624   node             c_cpp_properties.json
18047    1648   node             proc/16490/cmdline
18047    1648   node             16490/cmdline
18047    1648   node             cmdline
18247    1648   node             proc/16490/cmdline
18247    1648   node             16490/cmdline
18247    1648   node             cmdline
18448    1648   node             proc/16490/cmdline
18448    1648   node             16490/cmdline
18448    1648   node             cmdline
18495    17075  bpftrace         sys/kernel/debug/tracing
18495    17075  bpftrace         kernel/debug/tracing
18495    17075  bpftrace         debug/tracing
18495    17075  bpftrace         tracing
18495    17075  bpftrace         sys/kernel/debug/tracing/kprobe_events
18495    17075  bpftrace         kernel/debug/tracing/kprobe_events
18495    17075  bpftrace         debug/tracing/kprobe_events
18495    17075  bpftrace         tracing/kprobe_events
18495    17075  bpftrace         kprobe_events
18533    17075  bpftrace         sys/kernel/debug/tracing
18533    17075  bpftrace         kernel/debug/tracing
18533    17075  bpftrace         debug/tracing
18533    17075  bpftrace         tracing
18533    17075  bpftrace         sys/kernel/debug/tracing/kprobe_events
18533    17075  bpftrace         kernel/debug/tracing/kprobe_events
18533    17075  bpftrace         debug/tracing/kprobe_events
18533    17075  bpftrace         tracing/kprobe_events
18533    17075  bpftrace         kprobe_events



kill process 17072
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/dcache.h>\n#include <linux/sched.h>\n\nBEGIN\n{\n  printf(\"Tracing dcache lookups... Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-6s %-16s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"FILE\");\n}\n\nkprobe:lookup_fast,\nkprobe:lookup_fast.constprop.*\n{\n  $nd = (struct nameidata *)arg0;\n  printf(\"%-8d %-6d %-16s %s\\n\", elapsed / 1e6, pid, comm, str($nd->last.name));\n}\n\nkprobe:d_lookup\n{\n  $name = (struct qstr *)arg1;\n  @fname[tid] = $name->name;\n}\n\nkretprobe:d_lookup\n/@fname[tid]/\n{\n  printf(\"%-8d %-6d %-16s %s\\n\", elapsed / 1e6, pid, comm, str(@fname[tid]));\n  delete(@fname[tid]);\n}", "stdout": "Attaching 4 probes...\nTracing dcache lookups... Hit Ctrl-C to end.\nTIME     PID    COMM             FILE\n95       1648   node             proc/16490/cmdline\n104      1648   node             16490/cmdline\n104      1648   node             cmdline\n296      1648   node             proc/16490/cmdline\n314      1648   node             16490/cmdline\n314      1648   node             cmdline\n474      1624   node             proc/meminfo\n474      1624   node             meminfo\n474      1624   node             home/yunwei/.vscode/c_cpp_properties.json\n474      1624   node             yunwei/.vscode/c_cpp_properties.json\n474      1624   node             .vscode/c_cpp_properties.json\n474      1624   node             c_cpp_properties.json\n497      1648   node             proc/16490/cmdline\n506      1648   node             16490/cmdline\n506      1648   node             cmdline\n563      1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n563      1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n563      1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n563      1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n563      1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n563      1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             vscode.lock\n563      1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n563      1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n563      1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n563      1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n563      1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n563      1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             vscode.lock\n563      1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n563      1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n563      1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n563      1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n563      1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n563      1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1635   node             vscode.lock\n698      1648   node             proc/16490/cmdline\n698      1648   node             16490/cmdline\n698      1648   node             cmdline\n900      1648   node             proc/16490/cmdline\n914      1648   node             16490/cmdline\n914      1648   node             cmdline\n1100     1648   node             proc/16490/cmdline\n1100     1648   node             16490/cmdline\n1100     1648   node             cmdline\n1302     1648   node             proc/16490/cmdline\n1321     1648   node             16490/cmdline\n1321     1648   node             cmdline\n1503     1648   node             proc/16490/cmdline\n1513     1648   node             16490/cmdline\n1513     1648   node             cmdline\n1564     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n1564     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n1564     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n1564     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n1564     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n1564     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             vscode.lock\n1564     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n1564     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n1564     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n1564     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n1564     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n1564     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             vscode.lock\n1564     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n1564     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n1564     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n1564     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n1564     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n1564     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1635   node             vscode.lock\n1704     1648   node             proc/16490/cmdline\n1708     1648   node             16490/cmdline\n1708     1648   node             cmdline\n1748     804    irqbalance       proc/interrupts\n1769     804    irqbalance       interrupts\n1769     804    irqbalance       proc/stat\n1769     804    irqbalance       stat\n1906     1648   node             proc/16490/cmdline\n1906     1648   node             16490/cmdline\n1906     1648   node             cmdline\n1979     528    vmtoolsd         etc/vmware-tools/tools-global.conf\n1979     528    vmtoolsd         vmware-tools/tools-global.conf\n1979     528    vmtoolsd         tools-global.conf\n1979     528    vmtoolsd         etc/vmware-tools/tools.conf\n1979     528    vmtoolsd         vmware-tools/tools.conf\n1979     528    vmtoolsd         tools.conf\n2108     1648   node             proc/16490/cmdline\n2130     1648   node             16490/cmdline\n2130     1648   node             cmdline\n2309     1648   node             proc/16490/cmdline\n2315     1648   node             16490/cmdline\n2315     1648   node             cmdline\n2510     1648   node             proc/16490/cmdline\n2510     1648   node             16490/cmdline\n2510     1648   node             cmdline\n2565     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n2579     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n2579     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n2579     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n2579     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n2579     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2579     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2579     1624   node             vscode.lock\n2582     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n2582     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n2582     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n2582     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n2582     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n2582     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2582     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2582     1624   node             vscode.lock\n2583     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n2583     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n2583     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n2583     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n2583     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n2583     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2583     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2583     1635   node             vscode.lock\n2711     1648   node             proc/16490/cmdline\n2729     1648   node             16490/cmdline\n2729     1648   node             cmdline\n2913     1648   node             proc/16490/cmdline\n2913     1648   node             16490/cmdline\n2913     1648   node             cmdline\n2974     1624   node             proc/meminfo\n3037     1624   node             meminfo\n3037     1624   node             home/yunwei/.vscode/c_cpp_properties.json\n3037     1624   node             yunwei/.vscode/c_cpp_properties.json\n3037     1624   node             .vscode/c_cpp_properties.json\n3037     1624   node             c_cpp_properties.json\n3116     1648   node             proc/16490/cmdline\n3121     1648   node             16490/cmdline\n3121     1648   node             cmdline\n3316     1648   node             proc/16490/cmdline\n3316     1648   node             16490/cmdline\n3316     1648   node             cmdline\n3517     1648   node             proc/16490/cmdline\n3540     1648   node             16490/cmdline\n3541     1648   node             cmdline\n3566     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n3566     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n3566     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n3566     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n3566     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n3566     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             vscode.lock\n3566     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n3566     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n3566     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n3566     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n3566     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n3566     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             vscode.lock\n3566     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n3566     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n3566     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n3566     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n3566     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n3566     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1635   node             vscode.lock\n3719     1648   node             proc/16490/cmdline\n3720     1648   node             16490/cmdline\n3720     1648   node             cmdline\n3922     1648   node             proc/16490/cmdline\n3922     1648   node             16490/cmdline\n3922     1648   node             cmdline\n4125     1648   node             proc/16490/cmdline\n4125     1648   node             16490/cmdline\n4125     1648   node             cmdline\n4327     1648   node             proc/16490/cmdline\n4327     1648   node             16490/cmdline\n4327     1648   node             cmdline\n4528     1648   node             proc/16490/cmdline\n4528     1648   node             16490/cmdline\n4528     1648   node             cmdline\n4565     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n4565     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n4565     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n4565     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n4565     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n4565     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4565     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4565     1624   node             vscode.lock\n4572     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n4572     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n4572     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n4572     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n4572     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n4572     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1624   node             vscode.lock\n4572     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n4572     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n4572     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n4572     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n4572     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n4572     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1635   node             vscode.lock\n4730     1648   node             proc/16490/cmdline\n4730     1648   node             16490/cmdline\n4730     1648   node             cmdline\n4932     1648   node             proc/16490/cmdline\n4932     1648   node             16490/cmdline\n4932     1648   node             cmdline\n5133     1648   node             proc/16490/cmdline\n5133     1648   node             16490/cmdline\n5133     1648   node             cmdline\n5334     1648   node             proc/16490/cmdline\n5334     1648   node             16490/cmdline\n5334     1648   node             cmdline\n5476     1624   node             proc/meminfo\n5476     1624   node             meminfo\n5476     1624   node             home/yunwei/.vscode/c_cpp_properties.json\n5476     1624   node             yunwei/.vscode/c_cpp_properties.json\n5476     1624   node             .vscode/c_cpp_properties.json\n5476     1624   node             c_cpp_properties.json\n5535     1648   node             proc/16490/cmdline\n5535     1648   node             16490/cmdline\n5535     1648   node             cmdline\n5568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n5568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n5568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n5568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n5568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n5568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             vscode.lock\n5568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n5568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n5568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n5568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n5568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n5568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             vscode.lock\n5568     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n5568     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n5568     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n5568     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n5568     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n5568     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1635   node             vscode.lock\n5737     1648   node             proc/16490/cmdline\n5738     1648   node             16490/cmdline\n5738     1648   node             cmdline\n5938     1648   node             proc/16490/cmdline\n5938     1648   node             16490/cmdline\n5938     1648   node             cmdline\n6140     1648   node             proc/16490/cmdline\n6140     1648   node             16490/cmdline\n6140     1648   node             cmdline\n6341     1648   node             proc/16490/cmdline\n6342     1648   node             16490/cmdline\n6342     1648   node             cmdline\n6542     1648   node             proc/16490/cmdline\n6542     1648   node             16490/cmdline\n6542     1648   node             cmdline\n6568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n6568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n6568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n6568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n6568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n6568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             vscode.lock\n6568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n6568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n6568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n6568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n6568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n6568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             vscode.lock\n6568     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n6568     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n6568     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n6568     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n6568     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n6568     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1635   node             vscode.lock\n6744     1648   node             proc/16490/cmdline\n6744     1648   node             16490/cmdline\n6744     1648   node             cmdline\n6945     1648   node             proc/16490/cmdline\n6945     1648   node             16490/cmdline\n6945     1648   node             cmdline\n6980     528    vmtoolsd         etc/vmware-tools/tools-global.conf\n6980     528    vmtoolsd         vmware-tools/tools-global.conf\n6980     528    vmtoolsd         tools-global.conf\n6980     528    vmtoolsd         etc/vmware-tools/tools.conf\n6980     528    vmtoolsd         vmware-tools/tools.conf\n6980     528    vmtoolsd         tools.conf\n7146     1648   node             proc/16490/cmdline\n7146     1648   node             16490/cmdline\n7146     1648   node             cmdline\n7348     1648   node             proc/16490/cmdline\n7348     1648   node             16490/cmdline\n7348     1648   node             cmdline\n7550     1648   node             proc/16490/cmdline\n7550     1648   node             16490/cmdline\n7550     1648   node             cmdline\n7569     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n7569     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n7569     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n7569     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n7569     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n7569     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7569     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7569     1624   node             vscode.lock\n7570     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n7570     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n7570     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n7570     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n7570     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n7570     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1624   node             vscode.lock\n7570     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n7570     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n7570     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n7570     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n7570     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n7570     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1635   node             vscode.lock\n7750     1648   node             proc/16490/cmdline\n7750     1648   node             16490/cmdline\n7750     1648   node             cmdline\n7951     1648   node             proc/16490/cmdline\n7951     1648   node             16490/cmdline\n7951     1648   node             cmdline\n7978     1624   node             proc/meminfo\n7978     1624   node             meminfo\n7978     1624   node             home/yunwei/.vscode/c_cpp_properties.json\n7978     1624   node             yunwei/.vscode/c_cpp_properties.json\n7978     1624   node             .vscode/c_cpp_properties.json\n7978     1624   node             c_cpp_properties.json\n8153     1648   node             proc/16490/cmdline\n8153     1648   node             16490/cmdline\n8153     1648   node             cmdline\n8355     1648   node             proc/16490/cmdline\n8355     1648   node             16490/cmdline\n8355     1648   node             cmdline\n8557     1648   node             proc/16490/cmdline\n8557     1648   node             16490/cmdline\n8557     1648   node             cmdline\n8571     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n8571     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n8571     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n8571     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n8571     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n8571     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             vscode.lock\n8571     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n8571     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n8571     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n8571     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n8571     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n8571     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             vscode.lock\n8572     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n8572     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n8572     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n8572     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n8572     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n8572     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8572     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8572     1635   node             vscode.lock\n8758     1648   node             proc/16490/cmdline\n8758     1648   node             16490/cmdline\n8758     1648   node             cmdline\n8960     1648   node             proc/16490/cmdline\n8960     1648   node             16490/cmdline\n8960     1648   node             cmdline\n9161     1648   node             proc/16490/cmdline\n9161     1648   node             16490/cmdline\n9162     1648   node             cmdline\n9363     1648   node             proc/16490/cmdline\n9363     1648   node             16490/cmdline\n9363     1648   node             cmdline\n9563     1648   node             proc/16490/cmdline\n9563     1648   node             16490/cmdline\n9563     1648   node             cmdline\n9572     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n9572     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n9572     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n9572     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n9572     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n9572     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9572     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9572     1624   node             vscode.lock\n9573     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n9573     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n9573     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n9573     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n9573     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n9573     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1624   node             vscode.lock\n9573     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n9573     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n9573     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n9573     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n9573     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n9573     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1635   node             vscode.lock\n9765     1648   node             proc/16490/cmdline\n9765     1648   node             16490/cmdline\n9765     1648   node             cmdline\n9965     1648   node             proc/16490/cmdline\n9965     1648   node             16490/cmdline\n9965     1648   node             cmdline\n10168    1648   node             proc/16490/cmdline\n10168    1648   node             16490/cmdline\n10168    1648   node             cmdline\n10369    1648   node             proc/16490/cmdline\n10369    1648   node             16490/cmdline\n10369    1648   node             cmdline\n10480    1624   node             proc/meminfo\n10480    1624   node             meminfo\n10480    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n10480    1624   node             yunwei/.vscode/c_cpp_properties.json\n10480    1624   node             .vscode/c_cpp_properties.json\n10480    1624   node             c_cpp_properties.json\n10570    1648   node             proc/16490/cmdline\n10570    1648   node             16490/cmdline\n10570    1648   node             cmdline\n10574    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n10588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n10588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n10588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n10588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n10588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10588    1624   node             vscode.lock\n10590    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n10590    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n10590    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n10590    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n10590    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n10590    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1624   node             vscode.lock\n10590    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n10590    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n10590    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n10590    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n10590    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n10590    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1635   node             vscode.lock\n10771    1648   node             proc/16490/cmdline\n10771    1648   node             16490/cmdline\n10771    1648   node             cmdline\n10975    1648   node             proc/16490/cmdline\n10975    1648   node             16490/cmdline\n10975    1648   node             cmdline\n11175    1648   node             proc/16490/cmdline\n11175    1648   node             16490/cmdline\n11175    1648   node             cmdline\n11375    1648   node             proc/16490/cmdline\n11375    1648   node             16490/cmdline\n11375    1648   node             cmdline\n11578    1648   node             proc/16490/cmdline\n11578    1648   node             16490/cmdline\n11578    1648   node             cmdline\n11578    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n11578    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n11578    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n11578    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n11578    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n11578    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             vscode.lock\n11578    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n11578    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n11578    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n11578    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n11578    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n11578    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             vscode.lock\n11579    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n11579    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n11579    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n11579    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n11579    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n11579    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11579    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11579    1635   node             vscode.lock\n11658    528    vmtoolsd         etc/mtab\n11658    528    vmtoolsd         mtab\n11658    528    vmtoolsd         proc/self/mounts\n11658    528    vmtoolsd         self/mounts\n11658    528    vmtoolsd         528\n11658    528    vmtoolsd         mounts\n11658    528    vmtoolsd         proc/devices\n11658    528    vmtoolsd         devices\n11659    528    vmtoolsd         dev\n11659    528    vmtoolsd         dev/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/class/block/sda2/slaves\n11659    528    vmtoolsd         class/block/sda2/slaves\n11659    528    vmtoolsd         block/sda2/slaves\n11659    528    vmtoolsd         sda2/slaves\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         slaves\n11659    528    vmtoolsd         sys/class/block/sda2/device\n11659    528    vmtoolsd         class/block/sda2/device\n11659    528    vmtoolsd         block/sda2/device\n11659    528    vmtoolsd         sda2/device\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         sys/class/block/sda2/../device\n11659    528    vmtoolsd         class/block/sda2/../device\n11659    528    vmtoolsd         block/sda2/../device\n11659    528    vmtoolsd         sda2/../device\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys\n11659    528    vmtoolsd         sys/class\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block\n11659    528    vmtoolsd         class/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/class/block/sda2\n11659    528    vmtoolsd         class/block/sda2\n11659    528    vmtoolsd         block/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices\n11659    528    vmtoolsd         devices\n11659    528    vmtoolsd         sys/devices/pci0000:00\n11659    528    vmtoolsd         devices/pci0000:00\n11659    528    vmtoolsd         pci0000:00\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         0000:00:10.0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         0000:00:10.0/host32\n11659    528    vmtoolsd         host32\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         host32/target32:0:0\n11659    528    vmtoolsd         target32:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         32:0:0:0/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         32:0:0:0/block/sda\n11659    528    vmtoolsd         block/sda\n11659    528    vmtoolsd         sda\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         block/sda/sda2/\n11659    528    vmtoolsd         sda/sda2/\n11659    528    vmtoolsd         sda2/\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         32:0:0:0/block/sda/device\n11659    528    vmtoolsd         block/sda/device\n11659    528    vmtoolsd         sda/device\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../sas_port\n11659    528    vmtoolsd         class/block/sda2/../device/../../../sas_port\n11659    528    vmtoolsd         block/sda2/../device/../../../sas_port\n11659    528    vmtoolsd         sda2/../device/../../../sas_port\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../sas_port\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sas_port\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         block/sda2/../device/../../../class\n11659    528    vmtoolsd         sda2/../device/../../../class\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../class\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         block/sda2/../device/../../../class\n11659    528    vmtoolsd         sda2/../device/../../../class\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../class\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../label\n11659    528    vmtoolsd         class/block/sda2/../device/../../../label\n11659    528    vmtoolsd         block/sda2/../device/../../../label\n11659    528    vmtoolsd         sda2/../device/../../../label\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../label\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         label\n11659    528    vmtoolsd         sys\n11659    528    vmtoolsd         sys/class\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block\n11659    528    vmtoolsd         class/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/class/block/sda2\n11659    528    vmtoolsd         class/block/sda2\n11659    528    vmtoolsd         block/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices\n11659    528    vmtoolsd         devices\n11659    528    vmtoolsd         sys/devices/pci0000:00\n11659    528    vmtoolsd         devices/pci0000:00\n11659    528    vmtoolsd         pci0000:00\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         0000:00:10.0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         0000:00:10.0/host32\n11659    528    vmtoolsd         host32\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         host32/target32:0:0\n11659    528    vmtoolsd         target32:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         32:0:0:0/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         32:0:0:0/block/sda\n11659    528    vmtoolsd         block/sda\n11659    528    vmtoolsd         sda\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         block/sda/sda2/\n11659    528    vmtoolsd         sda/sda2/\n11659    528    vmtoolsd         sda2/\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         32:0:0:0/block/sda/device\n11659    528    vmtoolsd         block/sda/device\n11659    528    vmtoolsd         sda/device\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         32:0:0:0/\n11659    528    vmtoolsd         etc/resolv.conf\n11659    528    vmtoolsd         resolv.conf\n11659    528    vmtoolsd         run/systemd/resolve/stub-resolv.conf\n11659    528    vmtoolsd         systemd/resolve/stub-resolv.conf\n11660    528    vmtoolsd         resolve/stub-resolv.conf\n11660    528    vmtoolsd         stub-resolv.conf\n11660    528    vmtoolsd         etc\n11660    528    vmtoolsd         etc/resolv.conf\n11660    528    vmtoolsd         resolv.conf\n11660    528    vmtoolsd         run\n11660    528    vmtoolsd         run/systemd\n11660    528    vmtoolsd         systemd\n11660    528    vmtoolsd         run/systemd/resolve\n11660    528    vmtoolsd         systemd/resolve\n11660    528    vmtoolsd         resolve\n11660    528    vmtoolsd         run/systemd/resolve/stub-resolv.conf\n11660    528    vmtoolsd         systemd/resolve/stub-resolv.conf\n11660    528    vmtoolsd         resolve/stub-resolv.conf\n11660    528    vmtoolsd         stub-resolv.conf\n11660    528    vmtoolsd         run/systemd/resolve/resolv.conf\n11660    528    vmtoolsd         systemd/resolve/resolv.conf\n11660    528    vmtoolsd         resolve/resolv.conf\n11660    528    vmtoolsd         resolv.conf\n11660    528    vmtoolsd         run/systemd/resolve/resolv.conf\n11660    528    vmtoolsd         systemd/resolve/resolv.conf\n11660    528    vmtoolsd         resolve/resolv.conf\n11660    528    vmtoolsd         resolv.conf\n11660    528    vmtoolsd         proc/net/route\n11660    528    vmtoolsd         net/route\n11660    528    vmtoolsd         self/net\n11660    528    vmtoolsd         528\n11660    528    vmtoolsd         net\n11660    528    vmtoolsd         route\n11660    528    vmtoolsd         route\n11660    528    vmtoolsd         proc/net/ipv6_route\n11660    528    vmtoolsd         net/ipv6_route\n11660    528    vmtoolsd         self/net\n11660    528    vmtoolsd         528\n11660    528    vmtoolsd         net\n11660    528    vmtoolsd         ipv6_route\n11660    528    vmtoolsd         ipv6_route\n11660    528    vmtoolsd         proc/uptime\n11660    528    vmtoolsd         uptime\n11697    528    vmtoolsd         proc/meminfo\n11697    528    vmtoolsd         meminfo\n11697    528    vmtoolsd         proc/vmstat\n11697    528    vmtoolsd         vmstat\n11697    528    vmtoolsd         proc/stat\n11697    528    vmtoolsd         stat\n11697    528    vmtoolsd         proc/zoneinfo\n11697    528    vmtoolsd         zoneinfo\n11697    528    vmtoolsd         proc/uptime\n11697    528    vmtoolsd         uptime\n11697    528    vmtoolsd         proc/diskstats\n11697    528    vmtoolsd         diskstats\n11698    528    vmtoolsd         sys/block/loop0\n11698    528    vmtoolsd         block/loop0\n11698    528    vmtoolsd         loop0\n11698    528    vmtoolsd         devices/virtual/block/loop0\n11698    528    vmtoolsd         virtual/block/loop0\n11698    528    vmtoolsd         block/loop0\n11698    528    vmtoolsd         loop0\n11698    528    vmtoolsd         sys/block/loop1\n11698    528    vmtoolsd         block/loop1\n11698    528    vmtoolsd         loop1\n11698    528    vmtoolsd         devices/virtual/block/loop1\n11698    528    vmtoolsd         virtual/block/loop1\n11698    528    vmtoolsd         block/loop1\n11698    528    vmtoolsd         loop1\n11698    528    vmtoolsd         sys/block/loop2\n11698    528    vmtoolsd         block/loop2\n11698    528    vmtoolsd         loop2\n11698    528    vmtoolsd         devices/virtual/block/loop2\n11698    528    vmtoolsd         virtual/block/loop2\n11698    528    vmtoolsd         block/loop2\n11698    528    vmtoolsd         loop2\n11698    528    vmtoolsd         sys/block/loop3\n11698    528    vmtoolsd         block/loop3\n11698    528    vmtoolsd         loop3\n11698    528    vmtoolsd         devices/virtual/block/loop3\n11698    528    vmtoolsd         virtual/block/loop3\n11698    528    vmtoolsd         block/loop3\n11698    528    vmtoolsd         loop3\n11698    528    vmtoolsd         sys/block/loop4\n11698    528    vmtoolsd         block/loop4\n11698    528    vmtoolsd         loop4\n11698    528    vmtoolsd         devices/virtual/block/loop4\n11698    528    vmtoolsd         virtual/block/loop4\n11698    528    vmtoolsd         block/loop4\n11698    528    vmtoolsd         loop4\n11698    528    vmtoolsd         sys/block/loop5\n11698    528    vmtoolsd         block/loop5\n11698    528    vmtoolsd         loop5\n11698    528    vmtoolsd         devices/virtual/block/loop5\n11698    528    vmtoolsd         virtual/block/loop5\n11698    528    vmtoolsd         block/loop5\n11698    528    vmtoolsd         loop5\n11698    528    vmtoolsd         sys/block/loop6\n11698    528    vmtoolsd         block/loop6\n11698    528    vmtoolsd         loop6\n11698    528    vmtoolsd         devices/virtual/block/loop6\n11698    528    vmtoolsd         virtual/block/loop6\n11698    528    vmtoolsd         block/loop6\n11698    528    vmtoolsd         loop6\n11698    528    vmtoolsd         sys/block/loop7\n11698    528    vmtoolsd         block/loop7\n11698    528    vmtoolsd         loop7\n11698    528    vmtoolsd         devices/virtual/block/loop7\n11698    528    vmtoolsd         virtual/block/loop7\n11698    528    vmtoolsd         block/loop7\n11698    528    vmtoolsd         loop7\n11698    528    vmtoolsd         sys/block/sr0\n11698    528    vmtoolsd         block/sr0\n11698    528    vmtoolsd         sr0\n11698    528    vmtoolsd         devices/pci0000:00/0000:00:11.0/0000:02:05.0/ata4/host3/target3\n11698    528    vmtoolsd         pci0000:00/0000:00:11.0/0000:02:05.0/ata4/host3/target3:0:0/3:0\n11698    528    vmtoolsd         0000:00:11.0/0000:02:05.0/ata4/host3/target3:0:0/3:0:0:0/block/\n11698    528    vmtoolsd         0000:02:05.0/ata4/host3/target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         ata4/host3/target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         host3/target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         3:0:0:0/block/sr0\n11698    528    vmtoolsd         block/sr0\n11698    528    vmtoolsd         sr0\n11698    528    vmtoolsd         sys/block/sda\n11698    528    vmtoolsd         block/sda\n11698    528    vmtoolsd         sda\n11698    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11698    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         32:0:0:0/block/sda\n11698    528    vmtoolsd         block/sda\n11698    528    vmtoolsd         sda\n11698    528    vmtoolsd         sys/block/sda1\n11698    528    vmtoolsd         block/sda1\n11698    528    vmtoolsd         sda1\n11698    528    vmtoolsd         sys/block/sda2\n11698    528    vmtoolsd         block/sda2\n11698    528    vmtoolsd         sda2\n11698    528    vmtoolsd         sys/block/loop8\n11698    528    vmtoolsd         block/loop8\n11698    528    vmtoolsd         loop8\n11698    528    vmtoolsd         devices/virtual/block/loop8\n11698    528    vmtoolsd         virtual/block/loop8\n11698    528    vmtoolsd         block/loop8\n11698    528    vmtoolsd         loop8\n11698    528    vmtoolsd         sys/block/loop9\n11698    528    vmtoolsd         block/loop9\n11698    528    vmtoolsd         loop9\n11698    528    vmtoolsd         devices/virtual/block/loop9\n11698    528    vmtoolsd         virtual/block/loop9\n11698    528    vmtoolsd         block/loop9\n11698    528    vmtoolsd         loop9\n11698    528    vmtoolsd         sys/block/loop10\n11698    528    vmtoolsd         block/loop10\n11698    528    vmtoolsd         loop10\n11698    528    vmtoolsd         devices/virtual/block/loop10\n11698    528    vmtoolsd         virtual/block/loop10\n11698    528    vmtoolsd         block/loop10\n11698    528    vmtoolsd         loop10\n11753    804    irqbalance       proc/interrupts\n11753    804    irqbalance       interrupts\n11753    804    irqbalance       proc/stat\n11754    804    irqbalance       stat\n11781    1648   node             proc/16490/cmdline\n11781    1648   node             16490/cmdline\n11781    1648   node             cmdline\n11984    1648   node             proc/16490/cmdline\n11984    1648   node             16490/cmdline\n11984    1648   node             cmdline\n11984    528    vmtoolsd         etc/vmware-tools/tools-global.conf\n11984    528    vmtoolsd         vmware-tools/tools-global.conf\n11984    528    vmtoolsd         tools-global.conf\n11984    528    vmtoolsd         etc/vmware-tools/tools.conf\n11984    528    vmtoolsd         vmware-tools/tools.conf\n11984    528    vmtoolsd         tools.conf\n12185    1648   node             proc/16490/cmdline\n12185    1648   node             16490/cmdline\n12185    1648   node             cmdline\n12386    1648   node             proc/16490/cmdline\n12386    1648   node             16490/cmdline\n12386    1648   node             cmdline\n12580    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n12580    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n12580    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n12580    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n12580    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n12580    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12580    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12580    1624   node             vscode.lock\n12581    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n12581    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n12581    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n12581    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n12581    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n12581    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1624   node             vscode.lock\n12581    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n12581    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n12581    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n12581    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n12581    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n12581    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1635   node             vscode.lock\n12588    1648   node             proc/16490/cmdline\n12588    1648   node             16490/cmdline\n12588    1648   node             cmdline\n12792    1648   node             proc/16490/cmdline\n12792    1648   node             16490/cmdline\n12792    1648   node             cmdline\n12983    1624   node             proc/meminfo\n12983    1624   node             meminfo\n12983    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n12983    1624   node             yunwei/.vscode/c_cpp_properties.json\n12983    1624   node             .vscode/c_cpp_properties.json\n12983    1624   node             c_cpp_properties.json\n12994    1648   node             proc/16490/cmdline\n12994    1648   node             16490/cmdline\n12994    1648   node             cmdline\n13194    1648   node             proc/16490/cmdline\n13194    1648   node             16490/cmdline\n13194    1648   node             cmdline\n13398    1648   node             proc/16490/cmdline\n13398    1648   node             16490/cmdline\n13398    1648   node             cmdline\n13581    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n13581    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n13581    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n13581    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n13581    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n13581    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13581    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13581    1624   node             vscode.lock\n13582    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n13582    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n13582    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n13582    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n13582    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n13582    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13582    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13582    1624   node             vscode.lock\n13582    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n13588    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n13588    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n13588    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n13588    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n13588    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13588    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13588    1635   node             vscode.lock\n13599    1648   node             proc/16490/cmdline\n13599    1648   node             16490/cmdline\n13599    1648   node             cmdline\n13801    1648   node             proc/16490/cmdline\n13813    1648   node             16490/cmdline\n13813    1648   node             cmdline\n14004    1648   node             proc/16490/cmdline\n14004    1648   node             16490/cmdline\n14004    1648   node             cmdline\n14205    1648   node             proc/16490/cmdline\n14205    1648   node             16490/cmdline\n14205    1648   node             cmdline\n14408    1648   node             proc/16490/cmdline\n14408    1648   node             16490/cmdline\n14408    1648   node             cmdline\n14585    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n14585    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n14585    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n14585    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n14585    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n14585    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14585    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14585    1624   node             vscode.lock\n14586    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n14586    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n14586    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n14586    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n14586    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n14586    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1624   node             vscode.lock\n14586    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n14586    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n14586    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n14586    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n14586    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n14586    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1635   node             vscode.lock\n14608    1648   node             proc/16490/cmdline\n14608    1648   node             16490/cmdline\n14608    1648   node             cmdline\n14809    1648   node             proc/16490/cmdline\n14817    1648   node             16490/cmdline\n14817    1648   node             cmdline\n15010    1648   node             proc/16490/cmdline\n15010    1648   node             16490/cmdline\n15010    1648   node             cmdline\n15213    1648   node             proc/16490/cmdline\n15213    1648   node             16490/cmdline\n15213    1648   node             cmdline\n15417    1648   node             proc/16490/cmdline\n15417    1648   node             16490/cmdline\n15417    1648   node             cmdline\n15483    1624   node             proc/meminfo\n15483    1624   node             meminfo\n15484    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n15484    1624   node             yunwei/.vscode/c_cpp_properties.json\n15484    1624   node             .vscode/c_cpp_properties.json\n15484    1624   node             c_cpp_properties.json\n15588    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n15588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n15588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n15588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n15588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n15588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             vscode.lock\n15588    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n15588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n15588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n15588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n15588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n15588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             vscode.lock\n15588    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n15588    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n15588    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n15588    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n15588    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n15588    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1635   node             vscode.lock\n15619    1648   node             proc/16490/cmdline\n15619    1648   node             16490/cmdline\n15619    1648   node             cmdline\n15821    1648   node             proc/16490/cmdline\n15821    1648   node             16490/cmdline\n15821    1648   node             cmdline\n16022    1648   node             proc/16490/cmdline\n16022    1648   node             16490/cmdline\n16022    1648   node             cmdline\n16226    1648   node             proc/16490/cmdline\n16229    1648   node             16490/cmdline\n16229    1648   node             cmdline\n16429    1648   node             proc/16490/cmdline\n16429    1648   node             16490/cmdline\n16429    1648   node             cmdline\n16589    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n16589    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n16589    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n16589    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n16589    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n16589    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16589    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16589    1624   node             vscode.lock\n16590    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n16590    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n16590    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n16590    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n16590    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n16590    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1624   node             vscode.lock\n16590    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n16590    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n16590    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n16590    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n16590    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n16590    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1635   node             vscode.lock\n16631    1648   node             proc/16490/cmdline\n16631    1648   node             16490/cmdline\n16631    1648   node             cmdline\n16835    1648   node             proc/16490/cmdline\n16835    1648   node             16490/cmdline\n16835    1648   node             cmdline\n16987    528    vmtoolsd         etc/vmware-tools/tools-global.conf\n16987    528    vmtoolsd         vmware-tools/tools-global.conf\n16987    528    vmtoolsd         tools-global.conf\n16987    528    vmtoolsd         etc/vmware-tools/tools.conf\n16987    528    vmtoolsd         vmware-tools/tools.conf\n16987    528    vmtoolsd         tools.conf\n17036    1648   node             proc/16490/cmdline\n17036    1648   node             16490/cmdline\n17036    1648   node             cmdline\n17239    1648   node             proc/16490/cmdline\n17239    1648   node             16490/cmdline\n17239    1648   node             cmdline\n17440    1648   node             proc/16490/cmdline\n17440    1648   node             16490/cmdline\n17440    1648   node             cmdline\n17593    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n17593    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n17593    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n17593    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n17593    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n17593    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             vscode.lock\n17593    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n17593    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n17593    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n17593    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n17593    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n17593    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             vscode.lock\n17593    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n17593    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n17593    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n17593    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n17593    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n17593    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1635   node             vscode.lock\n17642    1648   node             proc/16490/cmdline\n17642    1648   node             16490/cmdline\n17642    1648   node             cmdline\n17845    1648   node             proc/16490/cmdline\n17845    1648   node             16490/cmdline\n17845    1648   node             cmdline\n17986    1624   node             proc/meminfo\n17986    1624   node             meminfo\n17986    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n17986    1624   node             yunwei/.vscode/c_cpp_properties.json\n17986    1624   node             .vscode/c_cpp_properties.json\n17986    1624   node             c_cpp_properties.json\n18047    1648   node             proc/16490/cmdline\n18047    1648   node             16490/cmdline\n18047    1648   node             cmdline\n18247    1648   node             proc/16490/cmdline\n18247    1648   node             16490/cmdline\n18247    1648   node             cmdline\n18448    1648   node             proc/16490/cmdline\n18448    1648   node             16490/cmdline\n18448    1648   node             cmdline\n18495    17075  bpftrace         sys/kernel/debug/tracing\n18495    17075  bpftrace         kernel/debug/tracing\n18495    17075  bpftrace         debug/tracing\n18495    17075  bpftrace         tracing\n18495    17075  bpftrace         sys/kernel/debug/tracing/kprobe_events\n18495    17075  bpftrace         kernel/debug/tracing/kprobe_events\n18495    17075  bpftrace         debug/tracing/kprobe_events\n18495    17075  bpftrace         tracing/kprobe_events\n18495    17075  bpftrace         kprobe_events\n18533    17075  bpftrace         sys/kernel/debug/tracing\n18533    17075  bpftrace         kernel/debug/tracing\n18533    17075  bpftrace         debug/tracing\n18533    17075  bpftrace         tracing\n18533    17075  bpftrace         sys/kernel/debug/tracing/kprobe_events\n18533    17075  bpftrace         kernel/debug/tracing/kprobe_events\n18533    17075  bpftrace         debug/tracing/kprobe_events\n18533    17075  bpftrace         tracing/kprobe_events\n18533    17075  bpftrace         kprobe_events\n\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/dcache.h>\n#include <linux/sched.h>\n\nBEGIN\n{\n  printf("Tracing dcache lookups... Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %s\\n", "TIME", "PID", "COMM", "FILE");\n}\n\nkprobe:lookup_fast,\nkprobe:lookup_fast.constprop.*\n{\n  $nd = (struct nameidata *)arg0;\n  printf("%-8d %-6d %-16s %s\\n", elapsed / 1e6, pid, comm, str($nd->last.name));\n}\n\nkprobe:d_lookup\n{\n  $name = (struct qstr *)arg1;\n  @fname[tid] = $name->name;\n}\n\nkretprobe:d_lookup\n/@fname[tid]/\n{\n  printf("%-8d %-6d %-16s %s\\n", elapsed / 1e6, pid, comm, str(@fname[tid]));\n  delete(@fname[tid]);\n}', 'stdout': 'Attaching 4 probes...\nTracing dcache lookups... Hit Ctrl-C to end.\nTIME     PID    COMM             FILE\n95       1648   node             proc/16490/cmdline\n104      1648   node             16490/cmdline\n104      1648   node             cmdline\n296      1648   node             proc/16490/cmdline\n314      1648   node             16490/cmdline\n314      1648   node             cmdline\n474      1624   node             proc/meminfo\n474      1624   node             meminfo\n474      1624   node             home/yunwei/.vscode/c_cpp_properties.json\n474      1624   node             yunwei/.vscode/c_cpp_properties.json\n474      1624   node             .vscode/c_cpp_properties.json\n474      1624   node             c_cpp_properties.json\n497      1648   node             proc/16490/cmdline\n506      1648   node             16490/cmdline\n506      1648   node             cmdline\n563      1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n563      1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n563      1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n563      1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n563      1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n563      1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             vscode.lock\n563      1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n563      1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n563      1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n563      1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n563      1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n563      1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1624   node             vscode.lock\n563      1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n563      1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n563      1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n563      1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n563      1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n563      1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n563      1635   node             vscode.lock\n698      1648   node             proc/16490/cmdline\n698      1648   node             16490/cmdline\n698      1648   node             cmdline\n900      1648   node             proc/16490/cmdline\n914      1648   node             16490/cmdline\n914      1648   node             cmdline\n1100     1648   node             proc/16490/cmdline\n1100     1648   node             16490/cmdline\n1100     1648   node             cmdline\n1302     1648   node             proc/16490/cmdline\n1321     1648   node             16490/cmdline\n1321     1648   node             cmdline\n1503     1648   node             proc/16490/cmdline\n1513     1648   node             16490/cmdline\n1513     1648   node             cmdline\n1564     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n1564     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n1564     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n1564     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n1564     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n1564     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             vscode.lock\n1564     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n1564     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n1564     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n1564     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n1564     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n1564     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1624   node             vscode.lock\n1564     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n1564     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n1564     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n1564     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n1564     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n1564     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n1564     1635   node             vscode.lock\n1704     1648   node             proc/16490/cmdline\n1708     1648   node             16490/cmdline\n1708     1648   node             cmdline\n1748     804    irqbalance       proc/interrupts\n1769     804    irqbalance       interrupts\n1769     804    irqbalance       proc/stat\n1769     804    irqbalance       stat\n1906     1648   node             proc/16490/cmdline\n1906     1648   node             16490/cmdline\n1906     1648   node             cmdline\n1979     528    vmtoolsd         etc/vmware-tools/tools-global.conf\n1979     528    vmtoolsd         vmware-tools/tools-global.conf\n1979     528    vmtoolsd         tools-global.conf\n1979     528    vmtoolsd         etc/vmware-tools/tools.conf\n1979     528    vmtoolsd         vmware-tools/tools.conf\n1979     528    vmtoolsd         tools.conf\n2108     1648   node             proc/16490/cmdline\n2130     1648   node             16490/cmdline\n2130     1648   node             cmdline\n2309     1648   node             proc/16490/cmdline\n2315     1648   node             16490/cmdline\n2315     1648   node             cmdline\n2510     1648   node             proc/16490/cmdline\n2510     1648   node             16490/cmdline\n2510     1648   node             cmdline\n2565     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n2579     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n2579     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n2579     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n2579     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n2579     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2579     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2579     1624   node             vscode.lock\n2582     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n2582     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n2582     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n2582     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n2582     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n2582     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2582     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2582     1624   node             vscode.lock\n2583     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n2583     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n2583     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n2583     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n2583     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n2583     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2583     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n2583     1635   node             vscode.lock\n2711     1648   node             proc/16490/cmdline\n2729     1648   node             16490/cmdline\n2729     1648   node             cmdline\n2913     1648   node             proc/16490/cmdline\n2913     1648   node             16490/cmdline\n2913     1648   node             cmdline\n2974     1624   node             proc/meminfo\n3037     1624   node             meminfo\n3037     1624   node             home/yunwei/.vscode/c_cpp_properties.json\n3037     1624   node             yunwei/.vscode/c_cpp_properties.json\n3037     1624   node             .vscode/c_cpp_properties.json\n3037     1624   node             c_cpp_properties.json\n3116     1648   node             proc/16490/cmdline\n3121     1648   node             16490/cmdline\n3121     1648   node             cmdline\n3316     1648   node             proc/16490/cmdline\n3316     1648   node             16490/cmdline\n3316     1648   node             cmdline\n3517     1648   node             proc/16490/cmdline\n3540     1648   node             16490/cmdline\n3541     1648   node             cmdline\n3566     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n3566     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n3566     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n3566     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n3566     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n3566     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             vscode.lock\n3566     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n3566     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n3566     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n3566     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n3566     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n3566     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1624   node             vscode.lock\n3566     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n3566     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n3566     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n3566     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n3566     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n3566     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n3566     1635   node             vscode.lock\n3719     1648   node             proc/16490/cmdline\n3720     1648   node             16490/cmdline\n3720     1648   node             cmdline\n3922     1648   node             proc/16490/cmdline\n3922     1648   node             16490/cmdline\n3922     1648   node             cmdline\n4125     1648   node             proc/16490/cmdline\n4125     1648   node             16490/cmdline\n4125     1648   node             cmdline\n4327     1648   node             proc/16490/cmdline\n4327     1648   node             16490/cmdline\n4327     1648   node             cmdline\n4528     1648   node             proc/16490/cmdline\n4528     1648   node             16490/cmdline\n4528     1648   node             cmdline\n4565     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n4565     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n4565     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n4565     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n4565     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n4565     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4565     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4565     1624   node             vscode.lock\n4572     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n4572     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n4572     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n4572     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n4572     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n4572     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1624   node             vscode.lock\n4572     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n4572     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n4572     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n4572     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n4572     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n4572     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n4572     1635   node             vscode.lock\n4730     1648   node             proc/16490/cmdline\n4730     1648   node             16490/cmdline\n4730     1648   node             cmdline\n4932     1648   node             proc/16490/cmdline\n4932     1648   node             16490/cmdline\n4932     1648   node             cmdline\n5133     1648   node             proc/16490/cmdline\n5133     1648   node             16490/cmdline\n5133     1648   node             cmdline\n5334     1648   node             proc/16490/cmdline\n5334     1648   node             16490/cmdline\n5334     1648   node             cmdline\n5476     1624   node             proc/meminfo\n5476     1624   node             meminfo\n5476     1624   node             home/yunwei/.vscode/c_cpp_properties.json\n5476     1624   node             yunwei/.vscode/c_cpp_properties.json\n5476     1624   node             .vscode/c_cpp_properties.json\n5476     1624   node             c_cpp_properties.json\n5535     1648   node             proc/16490/cmdline\n5535     1648   node             16490/cmdline\n5535     1648   node             cmdline\n5568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n5568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n5568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n5568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n5568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n5568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             vscode.lock\n5568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n5568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n5568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n5568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n5568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n5568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1624   node             vscode.lock\n5568     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n5568     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n5568     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n5568     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n5568     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n5568     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n5568     1635   node             vscode.lock\n5737     1648   node             proc/16490/cmdline\n5738     1648   node             16490/cmdline\n5738     1648   node             cmdline\n5938     1648   node             proc/16490/cmdline\n5938     1648   node             16490/cmdline\n5938     1648   node             cmdline\n6140     1648   node             proc/16490/cmdline\n6140     1648   node             16490/cmdline\n6140     1648   node             cmdline\n6341     1648   node             proc/16490/cmdline\n6342     1648   node             16490/cmdline\n6342     1648   node             cmdline\n6542     1648   node             proc/16490/cmdline\n6542     1648   node             16490/cmdline\n6542     1648   node             cmdline\n6568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n6568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n6568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n6568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n6568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n6568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             vscode.lock\n6568     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n6568     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n6568     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n6568     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n6568     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n6568     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1624   node             vscode.lock\n6568     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n6568     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n6568     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n6568     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n6568     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n6568     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n6568     1635   node             vscode.lock\n6744     1648   node             proc/16490/cmdline\n6744     1648   node             16490/cmdline\n6744     1648   node             cmdline\n6945     1648   node             proc/16490/cmdline\n6945     1648   node             16490/cmdline\n6945     1648   node             cmdline\n6980     528    vmtoolsd         etc/vmware-tools/tools-global.conf\n6980     528    vmtoolsd         vmware-tools/tools-global.conf\n6980     528    vmtoolsd         tools-global.conf\n6980     528    vmtoolsd         etc/vmware-tools/tools.conf\n6980     528    vmtoolsd         vmware-tools/tools.conf\n6980     528    vmtoolsd         tools.conf\n7146     1648   node             proc/16490/cmdline\n7146     1648   node             16490/cmdline\n7146     1648   node             cmdline\n7348     1648   node             proc/16490/cmdline\n7348     1648   node             16490/cmdline\n7348     1648   node             cmdline\n7550     1648   node             proc/16490/cmdline\n7550     1648   node             16490/cmdline\n7550     1648   node             cmdline\n7569     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n7569     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n7569     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n7569     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n7569     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n7569     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7569     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7569     1624   node             vscode.lock\n7570     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n7570     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n7570     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n7570     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n7570     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n7570     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1624   node             vscode.lock\n7570     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n7570     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n7570     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n7570     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n7570     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n7570     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n7570     1635   node             vscode.lock\n7750     1648   node             proc/16490/cmdline\n7750     1648   node             16490/cmdline\n7750     1648   node             cmdline\n7951     1648   node             proc/16490/cmdline\n7951     1648   node             16490/cmdline\n7951     1648   node             cmdline\n7978     1624   node             proc/meminfo\n7978     1624   node             meminfo\n7978     1624   node             home/yunwei/.vscode/c_cpp_properties.json\n7978     1624   node             yunwei/.vscode/c_cpp_properties.json\n7978     1624   node             .vscode/c_cpp_properties.json\n7978     1624   node             c_cpp_properties.json\n8153     1648   node             proc/16490/cmdline\n8153     1648   node             16490/cmdline\n8153     1648   node             cmdline\n8355     1648   node             proc/16490/cmdline\n8355     1648   node             16490/cmdline\n8355     1648   node             cmdline\n8557     1648   node             proc/16490/cmdline\n8557     1648   node             16490/cmdline\n8557     1648   node             cmdline\n8571     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n8571     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n8571     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n8571     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n8571     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n8571     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             vscode.lock\n8571     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n8571     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n8571     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n8571     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n8571     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n8571     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8571     1624   node             vscode.lock\n8572     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n8572     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n8572     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n8572     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n8572     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n8572     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8572     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n8572     1635   node             vscode.lock\n8758     1648   node             proc/16490/cmdline\n8758     1648   node             16490/cmdline\n8758     1648   node             cmdline\n8960     1648   node             proc/16490/cmdline\n8960     1648   node             16490/cmdline\n8960     1648   node             cmdline\n9161     1648   node             proc/16490/cmdline\n9161     1648   node             16490/cmdline\n9162     1648   node             cmdline\n9363     1648   node             proc/16490/cmdline\n9363     1648   node             16490/cmdline\n9363     1648   node             cmdline\n9563     1648   node             proc/16490/cmdline\n9563     1648   node             16490/cmdline\n9563     1648   node             cmdline\n9572     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n9572     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n9572     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n9572     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n9572     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n9572     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9572     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9572     1624   node             vscode.lock\n9573     1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n9573     1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n9573     1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n9573     1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n9573     1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n9573     1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1624   node             vscode.lock\n9573     1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n9573     1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n9573     1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n9573     1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n9573     1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n9573     1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n9573     1635   node             vscode.lock\n9765     1648   node             proc/16490/cmdline\n9765     1648   node             16490/cmdline\n9765     1648   node             cmdline\n9965     1648   node             proc/16490/cmdline\n9965     1648   node             16490/cmdline\n9965     1648   node             cmdline\n10168    1648   node             proc/16490/cmdline\n10168    1648   node             16490/cmdline\n10168    1648   node             cmdline\n10369    1648   node             proc/16490/cmdline\n10369    1648   node             16490/cmdline\n10369    1648   node             cmdline\n10480    1624   node             proc/meminfo\n10480    1624   node             meminfo\n10480    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n10480    1624   node             yunwei/.vscode/c_cpp_properties.json\n10480    1624   node             .vscode/c_cpp_properties.json\n10480    1624   node             c_cpp_properties.json\n10570    1648   node             proc/16490/cmdline\n10570    1648   node             16490/cmdline\n10570    1648   node             cmdline\n10574    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n10588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n10588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n10588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n10588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n10588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10588    1624   node             vscode.lock\n10590    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n10590    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n10590    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n10590    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n10590    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n10590    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1624   node             vscode.lock\n10590    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n10590    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n10590    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n10590    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n10590    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n10590    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n10590    1635   node             vscode.lock\n10771    1648   node             proc/16490/cmdline\n10771    1648   node             16490/cmdline\n10771    1648   node             cmdline\n10975    1648   node             proc/16490/cmdline\n10975    1648   node             16490/cmdline\n10975    1648   node             cmdline\n11175    1648   node             proc/16490/cmdline\n11175    1648   node             16490/cmdline\n11175    1648   node             cmdline\n11375    1648   node             proc/16490/cmdline\n11375    1648   node             16490/cmdline\n11375    1648   node             cmdline\n11578    1648   node             proc/16490/cmdline\n11578    1648   node             16490/cmdline\n11578    1648   node             cmdline\n11578    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n11578    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n11578    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n11578    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n11578    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n11578    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             vscode.lock\n11578    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n11578    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n11578    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n11578    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n11578    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n11578    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11578    1624   node             vscode.lock\n11579    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n11579    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n11579    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n11579    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n11579    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n11579    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11579    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n11579    1635   node             vscode.lock\n11658    528    vmtoolsd         etc/mtab\n11658    528    vmtoolsd         mtab\n11658    528    vmtoolsd         proc/self/mounts\n11658    528    vmtoolsd         self/mounts\n11658    528    vmtoolsd         528\n11658    528    vmtoolsd         mounts\n11658    528    vmtoolsd         proc/devices\n11658    528    vmtoolsd         devices\n11659    528    vmtoolsd         dev\n11659    528    vmtoolsd         dev/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/class/block/sda2/slaves\n11659    528    vmtoolsd         class/block/sda2/slaves\n11659    528    vmtoolsd         block/sda2/slaves\n11659    528    vmtoolsd         sda2/slaves\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         slaves\n11659    528    vmtoolsd         sys/class/block/sda2/device\n11659    528    vmtoolsd         class/block/sda2/device\n11659    528    vmtoolsd         block/sda2/device\n11659    528    vmtoolsd         sda2/device\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         sys/class/block/sda2/../device\n11659    528    vmtoolsd         class/block/sda2/../device\n11659    528    vmtoolsd         block/sda2/../device\n11659    528    vmtoolsd         sda2/../device\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys\n11659    528    vmtoolsd         sys/class\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block\n11659    528    vmtoolsd         class/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/class/block/sda2\n11659    528    vmtoolsd         class/block/sda2\n11659    528    vmtoolsd         block/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices\n11659    528    vmtoolsd         devices\n11659    528    vmtoolsd         sys/devices/pci0000:00\n11659    528    vmtoolsd         devices/pci0000:00\n11659    528    vmtoolsd         pci0000:00\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         0000:00:10.0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         0000:00:10.0/host32\n11659    528    vmtoolsd         host32\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         host32/target32:0:0\n11659    528    vmtoolsd         target32:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         32:0:0:0/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         32:0:0:0/block/sda\n11659    528    vmtoolsd         block/sda\n11659    528    vmtoolsd         sda\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         block/sda/sda2/\n11659    528    vmtoolsd         sda/sda2/\n11659    528    vmtoolsd         sda2/\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         32:0:0:0/block/sda/device\n11659    528    vmtoolsd         block/sda/device\n11659    528    vmtoolsd         sda/device\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../sas_port\n11659    528    vmtoolsd         class/block/sda2/../device/../../../sas_port\n11659    528    vmtoolsd         block/sda2/../device/../../../sas_port\n11659    528    vmtoolsd         sda2/../device/../../../sas_port\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../sas_port\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sas_port\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         block/sda2/../device/../../../class\n11659    528    vmtoolsd         sda2/../device/../../../class\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../class\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         class/block/sda2/../device/../../../class\n11659    528    vmtoolsd         block/sda2/../device/../../../class\n11659    528    vmtoolsd         sda2/../device/../../../class\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../class\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block/sda2/../device/../../../label\n11659    528    vmtoolsd         class/block/sda2/../device/../../../label\n11659    528    vmtoolsd         block/sda2/../device/../../../label\n11659    528    vmtoolsd         sda2/../device/../../../label\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         device/../../../label\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         label\n11659    528    vmtoolsd         sys\n11659    528    vmtoolsd         sys/class\n11659    528    vmtoolsd         class\n11659    528    vmtoolsd         sys/class/block\n11659    528    vmtoolsd         class/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/class/block/sda2\n11659    528    vmtoolsd         class/block/sda2\n11659    528    vmtoolsd         block/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices\n11659    528    vmtoolsd         devices\n11659    528    vmtoolsd         sys/devices/pci0000:00\n11659    528    vmtoolsd         devices/pci0000:00\n11659    528    vmtoolsd         pci0000:00\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0\n11659    528    vmtoolsd         0000:00:10.0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32\n11659    528    vmtoolsd         0000:00:10.0/host32\n11659    528    vmtoolsd         host32\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0\n11659    528    vmtoolsd         host32/target32:0:0\n11659    528    vmtoolsd         target32:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block\n11659    528    vmtoolsd         32:0:0:0/block\n11659    528    vmtoolsd         block\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda\n11659    528    vmtoolsd         32:0:0:0/block/sda\n11659    528    vmtoolsd         block/sda\n11659    528    vmtoolsd         sda\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2\n11659    528    vmtoolsd         block/sda/sda2\n11659    528    vmtoolsd         sda/sda2\n11659    528    vmtoolsd         sda2\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         32:0:0:0/block/sda/sda2/\n11659    528    vmtoolsd         block/sda/sda2/\n11659    528    vmtoolsd         sda/sda2/\n11659    528    vmtoolsd         sda2/\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda/device\n11659    528    vmtoolsd         32:0:0:0/block/sda/device\n11659    528    vmtoolsd         block/sda/device\n11659    528    vmtoolsd         sda/device\n11659    528    vmtoolsd         device\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0\n11659    528    vmtoolsd         target32:0:0/32:0:0:0\n11659    528    vmtoolsd         32:0:0:0\n11659    528    vmtoolsd         sys/devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:\n11659    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         host32/target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         target32:0:0/32:0:0:0/\n11659    528    vmtoolsd         32:0:0:0/\n11659    528    vmtoolsd         etc/resolv.conf\n11659    528    vmtoolsd         resolv.conf\n11659    528    vmtoolsd         run/systemd/resolve/stub-resolv.conf\n11659    528    vmtoolsd         systemd/resolve/stub-resolv.conf\n11660    528    vmtoolsd         resolve/stub-resolv.conf\n11660    528    vmtoolsd         stub-resolv.conf\n11660    528    vmtoolsd         etc\n11660    528    vmtoolsd         etc/resolv.conf\n11660    528    vmtoolsd         resolv.conf\n11660    528    vmtoolsd         run\n11660    528    vmtoolsd         run/systemd\n11660    528    vmtoolsd         systemd\n11660    528    vmtoolsd         run/systemd/resolve\n11660    528    vmtoolsd         systemd/resolve\n11660    528    vmtoolsd         resolve\n11660    528    vmtoolsd         run/systemd/resolve/stub-resolv.conf\n11660    528    vmtoolsd         systemd/resolve/stub-resolv.conf\n11660    528    vmtoolsd         resolve/stub-resolv.conf\n11660    528    vmtoolsd         stub-resolv.conf\n11660    528    vmtoolsd         run/systemd/resolve/resolv.conf\n11660    528    vmtoolsd         systemd/resolve/resolv.conf\n11660    528    vmtoolsd         resolve/resolv.conf\n11660    528    vmtoolsd         resolv.conf\n11660    528    vmtoolsd         run/systemd/resolve/resolv.conf\n11660    528    vmtoolsd         systemd/resolve/resolv.conf\n11660    528    vmtoolsd         resolve/resolv.conf\n11660    528    vmtoolsd         resolv.conf\n11660    528    vmtoolsd         proc/net/route\n11660    528    vmtoolsd         net/route\n11660    528    vmtoolsd         self/net\n11660    528    vmtoolsd         528\n11660    528    vmtoolsd         net\n11660    528    vmtoolsd         route\n11660    528    vmtoolsd         route\n11660    528    vmtoolsd         proc/net/ipv6_route\n11660    528    vmtoolsd         net/ipv6_route\n11660    528    vmtoolsd         self/net\n11660    528    vmtoolsd         528\n11660    528    vmtoolsd         net\n11660    528    vmtoolsd         ipv6_route\n11660    528    vmtoolsd         ipv6_route\n11660    528    vmtoolsd         proc/uptime\n11660    528    vmtoolsd         uptime\n11697    528    vmtoolsd         proc/meminfo\n11697    528    vmtoolsd         meminfo\n11697    528    vmtoolsd         proc/vmstat\n11697    528    vmtoolsd         vmstat\n11697    528    vmtoolsd         proc/stat\n11697    528    vmtoolsd         stat\n11697    528    vmtoolsd         proc/zoneinfo\n11697    528    vmtoolsd         zoneinfo\n11697    528    vmtoolsd         proc/uptime\n11697    528    vmtoolsd         uptime\n11697    528    vmtoolsd         proc/diskstats\n11697    528    vmtoolsd         diskstats\n11698    528    vmtoolsd         sys/block/loop0\n11698    528    vmtoolsd         block/loop0\n11698    528    vmtoolsd         loop0\n11698    528    vmtoolsd         devices/virtual/block/loop0\n11698    528    vmtoolsd         virtual/block/loop0\n11698    528    vmtoolsd         block/loop0\n11698    528    vmtoolsd         loop0\n11698    528    vmtoolsd         sys/block/loop1\n11698    528    vmtoolsd         block/loop1\n11698    528    vmtoolsd         loop1\n11698    528    vmtoolsd         devices/virtual/block/loop1\n11698    528    vmtoolsd         virtual/block/loop1\n11698    528    vmtoolsd         block/loop1\n11698    528    vmtoolsd         loop1\n11698    528    vmtoolsd         sys/block/loop2\n11698    528    vmtoolsd         block/loop2\n11698    528    vmtoolsd         loop2\n11698    528    vmtoolsd         devices/virtual/block/loop2\n11698    528    vmtoolsd         virtual/block/loop2\n11698    528    vmtoolsd         block/loop2\n11698    528    vmtoolsd         loop2\n11698    528    vmtoolsd         sys/block/loop3\n11698    528    vmtoolsd         block/loop3\n11698    528    vmtoolsd         loop3\n11698    528    vmtoolsd         devices/virtual/block/loop3\n11698    528    vmtoolsd         virtual/block/loop3\n11698    528    vmtoolsd         block/loop3\n11698    528    vmtoolsd         loop3\n11698    528    vmtoolsd         sys/block/loop4\n11698    528    vmtoolsd         block/loop4\n11698    528    vmtoolsd         loop4\n11698    528    vmtoolsd         devices/virtual/block/loop4\n11698    528    vmtoolsd         virtual/block/loop4\n11698    528    vmtoolsd         block/loop4\n11698    528    vmtoolsd         loop4\n11698    528    vmtoolsd         sys/block/loop5\n11698    528    vmtoolsd         block/loop5\n11698    528    vmtoolsd         loop5\n11698    528    vmtoolsd         devices/virtual/block/loop5\n11698    528    vmtoolsd         virtual/block/loop5\n11698    528    vmtoolsd         block/loop5\n11698    528    vmtoolsd         loop5\n11698    528    vmtoolsd         sys/block/loop6\n11698    528    vmtoolsd         block/loop6\n11698    528    vmtoolsd         loop6\n11698    528    vmtoolsd         devices/virtual/block/loop6\n11698    528    vmtoolsd         virtual/block/loop6\n11698    528    vmtoolsd         block/loop6\n11698    528    vmtoolsd         loop6\n11698    528    vmtoolsd         sys/block/loop7\n11698    528    vmtoolsd         block/loop7\n11698    528    vmtoolsd         loop7\n11698    528    vmtoolsd         devices/virtual/block/loop7\n11698    528    vmtoolsd         virtual/block/loop7\n11698    528    vmtoolsd         block/loop7\n11698    528    vmtoolsd         loop7\n11698    528    vmtoolsd         sys/block/sr0\n11698    528    vmtoolsd         block/sr0\n11698    528    vmtoolsd         sr0\n11698    528    vmtoolsd         devices/pci0000:00/0000:00:11.0/0000:02:05.0/ata4/host3/target3\n11698    528    vmtoolsd         pci0000:00/0000:00:11.0/0000:02:05.0/ata4/host3/target3:0:0/3:0\n11698    528    vmtoolsd         0000:00:11.0/0000:02:05.0/ata4/host3/target3:0:0/3:0:0:0/block/\n11698    528    vmtoolsd         0000:02:05.0/ata4/host3/target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         ata4/host3/target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         host3/target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         target3:0:0/3:0:0:0/block/sr0\n11698    528    vmtoolsd         3:0:0:0/block/sr0\n11698    528    vmtoolsd         block/sr0\n11698    528    vmtoolsd         sr0\n11698    528    vmtoolsd         sys/block/sda\n11698    528    vmtoolsd         block/sda\n11698    528    vmtoolsd         sda\n11698    528    vmtoolsd         devices/pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/bl\n11698    528    vmtoolsd         pci0000:00/0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         0000:00:10.0/host32/target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         host32/target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         target32:0:0/32:0:0:0/block/sda\n11698    528    vmtoolsd         32:0:0:0/block/sda\n11698    528    vmtoolsd         block/sda\n11698    528    vmtoolsd         sda\n11698    528    vmtoolsd         sys/block/sda1\n11698    528    vmtoolsd         block/sda1\n11698    528    vmtoolsd         sda1\n11698    528    vmtoolsd         sys/block/sda2\n11698    528    vmtoolsd         block/sda2\n11698    528    vmtoolsd         sda2\n11698    528    vmtoolsd         sys/block/loop8\n11698    528    vmtoolsd         block/loop8\n11698    528    vmtoolsd         loop8\n11698    528    vmtoolsd         devices/virtual/block/loop8\n11698    528    vmtoolsd         virtual/block/loop8\n11698    528    vmtoolsd         block/loop8\n11698    528    vmtoolsd         loop8\n11698    528    vmtoolsd         sys/block/loop9\n11698    528    vmtoolsd         block/loop9\n11698    528    vmtoolsd         loop9\n11698    528    vmtoolsd         devices/virtual/block/loop9\n11698    528    vmtoolsd         virtual/block/loop9\n11698    528    vmtoolsd         block/loop9\n11698    528    vmtoolsd         loop9\n11698    528    vmtoolsd         sys/block/loop10\n11698    528    vmtoolsd         block/loop10\n11698    528    vmtoolsd         loop10\n11698    528    vmtoolsd         devices/virtual/block/loop10\n11698    528    vmtoolsd         virtual/block/loop10\n11698    528    vmtoolsd         block/loop10\n11698    528    vmtoolsd         loop10\n11753    804    irqbalance       proc/interrupts\n11753    804    irqbalance       interrupts\n11753    804    irqbalance       proc/stat\n11754    804    irqbalance       stat\n11781    1648   node             proc/16490/cmdline\n11781    1648   node             16490/cmdline\n11781    1648   node             cmdline\n11984    1648   node             proc/16490/cmdline\n11984    1648   node             16490/cmdline\n11984    1648   node             cmdline\n11984    528    vmtoolsd         etc/vmware-tools/tools-global.conf\n11984    528    vmtoolsd         vmware-tools/tools-global.conf\n11984    528    vmtoolsd         tools-global.conf\n11984    528    vmtoolsd         etc/vmware-tools/tools.conf\n11984    528    vmtoolsd         vmware-tools/tools.conf\n11984    528    vmtoolsd         tools.conf\n12185    1648   node             proc/16490/cmdline\n12185    1648   node             16490/cmdline\n12185    1648   node             cmdline\n12386    1648   node             proc/16490/cmdline\n12386    1648   node             16490/cmdline\n12386    1648   node             cmdline\n12580    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n12580    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n12580    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n12580    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n12580    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n12580    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12580    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12580    1624   node             vscode.lock\n12581    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n12581    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n12581    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n12581    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n12581    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n12581    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1624   node             vscode.lock\n12581    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n12581    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n12581    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n12581    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n12581    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n12581    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n12581    1635   node             vscode.lock\n12588    1648   node             proc/16490/cmdline\n12588    1648   node             16490/cmdline\n12588    1648   node             cmdline\n12792    1648   node             proc/16490/cmdline\n12792    1648   node             16490/cmdline\n12792    1648   node             cmdline\n12983    1624   node             proc/meminfo\n12983    1624   node             meminfo\n12983    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n12983    1624   node             yunwei/.vscode/c_cpp_properties.json\n12983    1624   node             .vscode/c_cpp_properties.json\n12983    1624   node             c_cpp_properties.json\n12994    1648   node             proc/16490/cmdline\n12994    1648   node             16490/cmdline\n12994    1648   node             cmdline\n13194    1648   node             proc/16490/cmdline\n13194    1648   node             16490/cmdline\n13194    1648   node             cmdline\n13398    1648   node             proc/16490/cmdline\n13398    1648   node             16490/cmdline\n13398    1648   node             cmdline\n13581    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n13581    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n13581    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n13581    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n13581    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n13581    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13581    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13581    1624   node             vscode.lock\n13582    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n13582    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n13582    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n13582    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n13582    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n13582    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13582    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13582    1624   node             vscode.lock\n13582    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n13588    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n13588    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n13588    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n13588    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n13588    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13588    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n13588    1635   node             vscode.lock\n13599    1648   node             proc/16490/cmdline\n13599    1648   node             16490/cmdline\n13599    1648   node             cmdline\n13801    1648   node             proc/16490/cmdline\n13813    1648   node             16490/cmdline\n13813    1648   node             cmdline\n14004    1648   node             proc/16490/cmdline\n14004    1648   node             16490/cmdline\n14004    1648   node             cmdline\n14205    1648   node             proc/16490/cmdline\n14205    1648   node             16490/cmdline\n14205    1648   node             cmdline\n14408    1648   node             proc/16490/cmdline\n14408    1648   node             16490/cmdline\n14408    1648   node             cmdline\n14585    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n14585    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n14585    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n14585    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n14585    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n14585    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14585    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14585    1624   node             vscode.lock\n14586    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n14586    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n14586    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n14586    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n14586    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n14586    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1624   node             vscode.lock\n14586    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n14586    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n14586    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n14586    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n14586    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n14586    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n14586    1635   node             vscode.lock\n14608    1648   node             proc/16490/cmdline\n14608    1648   node             16490/cmdline\n14608    1648   node             cmdline\n14809    1648   node             proc/16490/cmdline\n14817    1648   node             16490/cmdline\n14817    1648   node             cmdline\n15010    1648   node             proc/16490/cmdline\n15010    1648   node             16490/cmdline\n15010    1648   node             cmdline\n15213    1648   node             proc/16490/cmdline\n15213    1648   node             16490/cmdline\n15213    1648   node             cmdline\n15417    1648   node             proc/16490/cmdline\n15417    1648   node             16490/cmdline\n15417    1648   node             cmdline\n15483    1624   node             proc/meminfo\n15483    1624   node             meminfo\n15484    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n15484    1624   node             yunwei/.vscode/c_cpp_properties.json\n15484    1624   node             .vscode/c_cpp_properties.json\n15484    1624   node             c_cpp_properties.json\n15588    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n15588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n15588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n15588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n15588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n15588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             vscode.lock\n15588    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n15588    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n15588    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n15588    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n15588    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n15588    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1624   node             vscode.lock\n15588    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n15588    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n15588    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n15588    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n15588    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n15588    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n15588    1635   node             vscode.lock\n15619    1648   node             proc/16490/cmdline\n15619    1648   node             16490/cmdline\n15619    1648   node             cmdline\n15821    1648   node             proc/16490/cmdline\n15821    1648   node             16490/cmdline\n15821    1648   node             cmdline\n16022    1648   node             proc/16490/cmdline\n16022    1648   node             16490/cmdline\n16022    1648   node             cmdline\n16226    1648   node             proc/16490/cmdline\n16229    1648   node             16490/cmdline\n16229    1648   node             cmdline\n16429    1648   node             proc/16490/cmdline\n16429    1648   node             16490/cmdline\n16429    1648   node             cmdline\n16589    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n16589    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n16589    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n16589    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n16589    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n16589    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16589    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16589    1624   node             vscode.lock\n16590    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n16590    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n16590    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n16590    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n16590    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n16590    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1624   node             vscode.lock\n16590    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n16590    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n16590    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n16590    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n16590    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n16590    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n16590    1635   node             vscode.lock\n16631    1648   node             proc/16490/cmdline\n16631    1648   node             16490/cmdline\n16631    1648   node             cmdline\n16835    1648   node             proc/16490/cmdline\n16835    1648   node             16490/cmdline\n16835    1648   node             cmdline\n16987    528    vmtoolsd         etc/vmware-tools/tools-global.conf\n16987    528    vmtoolsd         vmware-tools/tools-global.conf\n16987    528    vmtoolsd         tools-global.conf\n16987    528    vmtoolsd         etc/vmware-tools/tools.conf\n16987    528    vmtoolsd         vmware-tools/tools.conf\n16987    528    vmtoolsd         tools.conf\n17036    1648   node             proc/16490/cmdline\n17036    1648   node             16490/cmdline\n17036    1648   node             cmdline\n17239    1648   node             proc/16490/cmdline\n17239    1648   node             16490/cmdline\n17239    1648   node             cmdline\n17440    1648   node             proc/16490/cmdline\n17440    1648   node             16490/cmdline\n17440    1648   node             cmdline\n17593    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n17593    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n17593    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n17593    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n17593    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n17593    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             vscode.lock\n17593    1624   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n17593    1624   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n17593    1624   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n17593    1624   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n17593    1624   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n17593    1624   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1624   node             vscode.lock\n17593    1635   node             home/yunwei/.vscode-server/data/User/workspaceStorage/683061573\n17593    1635   node             yunwei/.vscode-server/data/User/workspaceStorage/683061573fc2ba\n17593    1635   node             .vscode-server/data/User/workspaceStorage/683061573fc2bafa947b4\n17593    1635   node             data/User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vsc\n17593    1635   node             User/workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.l\n17593    1635   node             workspaceStorage/683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1635   node             683061573fc2bafa947b4d87342b0cd1/vscode.lock\n17593    1635   node             vscode.lock\n17642    1648   node             proc/16490/cmdline\n17642    1648   node             16490/cmdline\n17642    1648   node             cmdline\n17845    1648   node             proc/16490/cmdline\n17845    1648   node             16490/cmdline\n17845    1648   node             cmdline\n17986    1624   node             proc/meminfo\n17986    1624   node             meminfo\n17986    1624   node             home/yunwei/.vscode/c_cpp_properties.json\n17986    1624   node             yunwei/.vscode/c_cpp_properties.json\n17986    1624   node             .vscode/c_cpp_properties.json\n17986    1624   node             c_cpp_properties.json\n18047    1648   node             proc/16490/cmdline\n18047    1648   node             16490/cmdline\n18047    1648   node             cmdline\n18247    1648   node             proc/16490/cmdline\n18247    1648   node             16490/cmdline\n18247    1648   node             cmdline\n18448    1648   node             proc/16490/cmdline\n18448    1648   node             16490/cmdline\n18448    1648   node             cmdline\n18495    17075  bpftrace         sys/kernel/debug/tracing\n18495    17075  bpftrace         kernel/debug/tracing\n18495    17075  bpftrace         debug/tracing\n18495    17075  bpftrace         tracing\n18495    17075  bpftrace         sys/kernel/debug/tracing/kprobe_events\n18495    17075  bpftrace         kernel/debug/tracing/kprobe_events\n18495    17075  bpftrace         debug/tracing/kprobe_events\n18495    17075  bpftrace         tracing/kprobe_events\n18495    17075  bpftrace         kprobe_events\n18533    17075  bpftrace         sys/kernel/debug/tracing\n18533    17075  bpftrace         kernel/debug/tracing\n18533    17075  bpftrace         debug/tracing\n18533    17075  bpftrace         tracing\n18533    17075  bpftrace         sys/kernel/debug/tracing/kprobe_events\n18533    17075  bpftrace         kernel/debug/tracing/kprobe_events\n18533    17075  bpftrace         debug/tracing/kprobe_events\n18533    17075  bpftrace         tracing/kprobe_events\n18533    17075  bpftrace         kprobe_events\n\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 7 out of 40 test cases so far.

Running test case: Trace md flush events with pid and process name
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace md flush events with pid and process name

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces md flush events and displays the time, process ID, command, and device information of each event.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/genhd.h>
#include <linux/bio.h>
#endif

BEGIN
{
	printf("Tracing md flush events... Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-16s %s\n", "TIME", "PID", "COMM", "DEVICE");
}

kprobe:md_flush_request
{
	time("%H:%M:%S ");
	printf("%-6d %-16s %s\n", pid, comm,
	    ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);
}

```

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace md flush events with pid and process name

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/genhd.h>\n#include <linux/bio.h>\n\nBEGIN\n{\n  printf("Tracing md flush events... Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %s\\n", "TIME", "PID", "COMM", "DEVICE");\n}\n\nkprobe:md_flush_request\n{\n  time("%H:%M:%S ");\n  printf("%-6d %-16s %s\\n", pid, comm,\n      ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/genhd.h>
#include <linux/bio.h>

BEGIN
{
  printf("Tracing md flush events... Hit Ctrl-C to end.\n");
  printf("%-8s %-6s %-16s %s\n", "TIME", "PID", "COMM", "DEVICE");
}

kprobe:md_flush_request
{
  time("%H:%M:%S ");
  printf("%-6d %-16s %s\n", pid, comm,
      ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);
}
kill process 17084
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/genhd.h>\n#include <linux/bio.h>\n\nBEGIN\n{\n  printf(\"Tracing md flush events... Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-6s %-16s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"DEVICE\");\n}\n\nkprobe:md_flush_request\n{\n  time(\"%H:%M:%S \");\n  printf(\"%-6d %-16s %s\\n\", pid, comm,\n      ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);\n}", "stdout": "", "stderr": "definitions.h:2:10: fatal error: 'linux/genhd.h' file not found\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/genhd.h>\n#include <linux/bio.h>\n\nBEGIN\n{\n  printf("Tracing md flush events... Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %s\\n", "TIME", "PID", "COMM", "DEVICE");\n}\n\nkprobe:md_flush_request\n{\n  time("%H:%M:%S ");\n  printf("%-6d %-16s %s\\n", pid, comm,\n      ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);\n}', 'stdout': '', 'stderr': "definitions.h:2:10: fatal error: 'linux/genhd.h' file not found\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 7 out of 40 test cases so far.

Running test case: Print CPU scheduler run queue latency as a histogram
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Print CPU scheduler run queue latency as a histogram

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the CPU scheduler and records the latency of tasks in the run queue, using the sched_wakeup, sched_wakeup_new, and sched_switch tracepoints, and displays the latency as a histogram.

```
#include <linux/sched.h>

BEGIN
{
	printf("Tracing CPU scheduler... Hit Ctrl-C to end.\n");
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
	@qtime[args.pid] = nsecs;
}

tracepoint:sched:sched_switch
{
	if (args.prev_state == TASK_RUNNING) {
		@qtime[args.prev_pid] = nsecs;
	}

	$ns = @qtime[args.next_pid];
	if ($ns) {
		@usecs = hist((nsecs - $ns) / 1000);
	}
	delete(@qtime[args.next_pid]);
}

END
{
	clear(@qtime);
}

```

example: Write a BPF code that calculates and samples the length of the CPU scheduler run queue as a histogram, subtracting the currently running task from the total queue length.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>

// Until BTF is available, we'll need to declare some of this struct manually,
// since it isn't available to be #included. This will need maintenance to match
// your kernel version. It is from kernel/sched/sched.h:
struct cfs_rq {
	struct load_weight load;
	unsigned long runnable_weight;
	unsigned int nr_running;
	unsigned int h_nr_running;
};
#endif

BEGIN
{
	printf("Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n");
}

profile:hz:99
{
	$task = (struct task_struct *)curtask;
	$my_q = (struct cfs_rq *)$task->se.cfs_rq;
	$len = $my_q->nr_running;
	$len = $len > 0 ? $len - 1 : 0;	// subtract currently running task
	@runqlen = lhist($len, 0, 100, 1);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Print CPU scheduler run queue latency as a histogram

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/sched.h>\n\nBEGIN\n{\n\tprintf("Tracing CPU scheduler... Hit Ctrl-C to end.\\n");\n}\n\ntracepoint:sched:sched_wakeup,\ntracepoint:sched:sched_wakeup_new\n{\n\t@qtime[args.pid] = nsecs;\n}\n\ntracepoint:sched:sched_switch\n{\n\tif (args.prev_state == TASK_RUNNING) {\n\t\t@qtime[args.prev_pid] = nsecs;\n\t}\n\n\t$ns = @qtime[args.next_pid];\n\tif ($ns) {\n\t\t@usecs = hist((nsecs - $ns) / 1000);\n\t}\n\tdelete(@qtime[args.next_pid]);\n}\n\nEND\n{\n\tclear(@qtime);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>

BEGIN
{
	printf("Tracing CPU scheduler... Hit Ctrl-C to end.\n");
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
	@qtime[args.pid] = nsecs;
}

tracepoint:sched:sched_switch
{
	if (args.prev_state == TASK_RUNNING) {
		@qtime[args.prev_pid] = nsecs;
	}

	$ns = @qtime[args.next_pid];
	if ($ns) {
		@usecs = hist((nsecs - $ns) / 1000);
	}
	delete(@qtime[args.next_pid]);
}

END
{
	clear(@qtime);
}
kill process 17098
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n\tprintf(\"Tracing CPU scheduler... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:sched:sched_wakeup,\ntracepoint:sched:sched_wakeup_new\n{\n\t@qtime[args.pid] = nsecs;\n}\n\ntracepoint:sched:sched_switch\n{\n\tif (args.prev_state == TASK_RUNNING) {\n\t\t@qtime[args.prev_pid] = nsecs;\n\t}\n\n\t$ns = @qtime[args.next_pid];\n\tif ($ns) {\n\t\t@usecs = hist((nsecs - $ns) / 1000);\n\t}\n\tdelete(@qtime[args.next_pid]);\n}\n\nEND\n{\n\tclear(@qtime);\n}", "stdout": "", "stderr": "stdin:11:2-14: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_sched_sched_wakeup_new *'. Try dereferencing it first, or using '->'\n    @qtime[args.pid] = nsecs;\n    ~~~~~~~~~~~~\nstdin:16:5-11: ERROR: Can not access field 'prev_state' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    if (args.prev_state == TASK_RUNNING) {\n       ~~~~~~\nstdin:17:3-15: ERROR: Can not access field 'prev_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n        @qtime[args.prev_pid] = nsecs;\n        ~~~~~~~~~~~~\nstdin:20:8-20: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    $ns = @qtime[args.next_pid];\n          ~~~~~~~~~~~~\nstdin:24:2-21: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    delete(@qtime[args.next_pid]);\n    ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n\tprintf("Tracing CPU scheduler... Hit Ctrl-C to end.\\n");\n}\n\ntracepoint:sched:sched_wakeup,\ntracepoint:sched:sched_wakeup_new\n{\n\t@qtime[args.pid] = nsecs;\n}\n\ntracepoint:sched:sched_switch\n{\n\tif (args.prev_state == TASK_RUNNING) {\n\t\t@qtime[args.prev_pid] = nsecs;\n\t}\n\n\t$ns = @qtime[args.next_pid];\n\tif ($ns) {\n\t\t@usecs = hist((nsecs - $ns) / 1000);\n\t}\n\tdelete(@qtime[args.next_pid]);\n}\n\nEND\n{\n\tclear(@qtime);\n}', 'stdout': '', 'stderr': "stdin:11:2-14: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_sched_sched_wakeup_new *'. Try dereferencing it first, or using '->'\n    @qtime[args.pid] = nsecs;\n    ~~~~~~~~~~~~\nstdin:16:5-11: ERROR: Can not access field 'prev_state' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    if (args.prev_state == TASK_RUNNING) {\n       ~~~~~~\nstdin:17:3-15: ERROR: Can not access field 'prev_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n        @qtime[args.prev_pid] = nsecs;\n        ~~~~~~~~~~~~\nstdin:20:8-20: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    $ns = @qtime[args.next_pid];\n          ~~~~~~~~~~~~\nstdin:24:2-21: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    delete(@qtime[args.next_pid]);\n    ~~~~~~~~~~~~~~~~~~~\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 7 out of 40 test cases so far.

Running test case: Summarizes CPU scheduler run queue length as a histogram
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Summarizes CPU scheduler run queue length as a histogram

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that calculates and samples the length of the CPU scheduler run queue as a histogram, subtracting the currently running task from the total queue length.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>

// Until BTF is available, we'll need to declare some of this struct manually,
// since it isn't available to be #included. This will need maintenance to match
// your kernel version. It is from kernel/sched/sched.h:
struct cfs_rq {
	struct load_weight load;
	unsigned long runnable_weight;
	unsigned int nr_running;
	unsigned int h_nr_running;
};
#endif

BEGIN
{
	printf("Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n");
}

profile:hz:99
{
	$task = (struct task_struct *)curtask;
	$my_q = (struct cfs_rq *)$task->se.cfs_rq;
	$len = $my_q->nr_running;
	$len = $len > 0 ? $len - 1 : 0;	// subtract currently running task
	@runqlen = lhist($len, 0, 100, 1);
}

```

example: Write a BPF code that traces the CPU scheduler and records the latency of tasks in the run queue, using the sched_wakeup, sched_wakeup_new, and sched_switch tracepoints, and displays the latency as a histogram.

```
#include <linux/sched.h>

BEGIN
{
	printf("Tracing CPU scheduler... Hit Ctrl-C to end.\n");
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
	@qtime[args.pid] = nsecs;
}

tracepoint:sched:sched_switch
{
	if (args.prev_state == TASK_RUNNING) {
		@qtime[args.prev_pid] = nsecs;
	}

	$ns = @qtime[args.next_pid];
	if ($ns) {
		@usecs = hist((nsecs - $ns) / 1000);
	}
	delete(@qtime[args.next_pid]);
}

END
{
	clear(@qtime);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Summarizes CPU scheduler run queue length as a histogram

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/sched.h>\n\nBEGIN\n{\n  printf("Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\\n");\n}\n\nprofile:hz:99\n{\n  $task = (struct task_struct *)curtask;\n  $my_q = (struct cfs_rq *)$task->se.cfs_rq;\n  $len = $my_q->nr_running;\n  $len = $len > 0 ? $len - 1 : 0;\n  @runqlen = lhist($len, 0, 100, 1);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>

BEGIN
{
  printf("Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n");
}

profile:hz:99
{
  $task = (struct task_struct *)curtask;
  $my_q = (struct cfs_rq *)$task->se.cfs_rq;
  $len = $my_q->nr_running;
  $len = $len > 0 ? $len - 1 : 0;
  @runqlen = lhist($len, 0, 100, 1);
}
Attaching 2 probes...
Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.


@runqlen: 
[0, 1)              3329 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[1, 2)               352 |@@@@@                                               |
[2, 3)                28 |                                                    |
[3, 4)                 2 |                                                    |
[4, 5)                 1 |                                                    |

kill process 17114
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n  printf(\"Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\\n\");\n}\n\nprofile:hz:99\n{\n  $task = (struct task_struct *)curtask;\n  $my_q = (struct cfs_rq *)$task->se.cfs_rq;\n  $len = $my_q->nr_running;\n  $len = $len > 0 ? $len - 1 : 0;\n  @runqlen = lhist($len, 0, 100, 1);\n}", "stdout": "Attaching 2 probes...\nSampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n\n\n@runqlen: \n[0, 1)              3329 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[1, 2)               352 |@@@@@                                               |\n[2, 3)                28 |                                                    |\n[3, 4)                 2 |                                                    |\n[4, 5)                 1 |                                                    |\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n  printf("Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\\n");\n}\n\nprofile:hz:99\n{\n  $task = (struct task_struct *)curtask;\n  $my_q = (struct cfs_rq *)$task->se.cfs_rq;\n  $len = $my_q->nr_running;\n  $len = $len > 0 ? $len - 1 : 0;\n  @runqlen = lhist($len, 0, 100, 1);\n}', 'stdout': 'Attaching 2 probes...\nSampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n\n\n@runqlen: \n[0, 1)              3329 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[1, 2)               352 |@@@@@                                               |\n[2, 3)                28 |                                                    |\n[3, 4)                 2 |                                                    |\n[4, 5)                 1 |                                                    |\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 8 out of 40 test cases so far.

Running test case: List new thread creation with pid and thread identifies
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

List new thread creation with pid and thread identifies

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that lists new thread creations, printing the time in milliseconds, PID, process name, and function name where the thread was created.

```
BEGIN
{
	printf("%-10s %-6s %-16s %s\n", "TIME(ms)", "PID", "COMM", "FUNC");
}

uprobe:libpthread:pthread_create,
uprobe:libc:pthread_create
{
	printf("%-10u %-6d %-16s %s\n", elapsed / 1e6, pid, comm,
	    usym(arg2));
}

```

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

List new thread creation with pid and thread identifies

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("%-10s %-6s %-16s %s\\n", "TIME(ms)", "PID", "COMM", "FUNC");\n}\n\nuprobe:libpthread:pthread_create,\nuprobe:libc:pthread_create\n{\n\tprintf("%-10u %-6d %-16s %s\\n", elapsed / 1e6, pid, comm,\n\t    usym(arg2));\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("%-10s %-6s %-16s %s\n", "TIME(ms)", "PID", "COMM", "FUNC");
}

uprobe:libpthread:pthread_create,
uprobe:libc:pthread_create
{
	printf("%-10u %-6d %-16s %s\n", elapsed / 1e6, pid, comm,
	    usym(arg2));
}
Attaching 2 probes...
TIME(ms)   PID    COMM             FUNC


kill process 17127
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"%-10s %-6s %-16s %s\\n\", \"TIME(ms)\", \"PID\", \"COMM\", \"FUNC\");\n}\n\nuprobe:libpthread:pthread_create,\nuprobe:libc:pthread_create\n{\n\tprintf(\"%-10u %-6d %-16s %s\\n\", elapsed / 1e6, pid, comm,\n\t    usym(arg2));\n}", "stdout": "Attaching 2 probes...\nTIME(ms)   PID    COMM             FUNC\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("%-10s %-6s %-16s %s\\n", "TIME(ms)", "PID", "COMM", "FUNC");\n}\n\nuprobe:libpthread:pthread_create,\nuprobe:libc:pthread_create\n{\n\tprintf("%-10u %-6d %-16s %s\\n", elapsed / 1e6, pid, comm,\n\t    usym(arg2));\n}', 'stdout': 'Attaching 2 probes...\nTIME(ms)   PID    COMM             FUNC\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 9 out of 40 test cases so far.

Running test case: Display the exit_reason and its statistics of each vm exit in kvm
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Display the exit_reason and its statistics of each vm exit in kvm

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces key VFS calls, counts the number of times each call is invoked, and prints a per-second summary.

```
BEGIN
{
	printf("Tracing key VFS calls... Hit Ctrl-C to end.\n");

}

kprobe:vfs_read*,
kprobe:vfs_write*,
kprobe:vfs_fsync,
kprobe:vfs_open,
kprobe:vfs_create
{
	@[func] = count();
}

interval:s:1
{
	time();
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces file system writeback events, including the time of occurrence, device information, reason, and duration. This code can help identify performance issues related to writeback events.

```
BEGIN
{
	printf("Tracing writeback... Hit Ctrl-C to end.\n");
	printf("%-9s %-8s %-8s %-16s %s\n", "TIME", "DEVICE", "PAGES",
	    "REASON", "ms");

	// see /sys/kernel/debug/tracing/events/writeback/writeback_start/format
	@reason[0] = "background";
	@reason[1] = "vmscan";
	@reason[2] = "sync";
	@reason[3] = "periodic";
	@reason[4] = "laptop_timer";
	@reason[5] = "free_more_memory";
	@reason[6] = "fs_free_space";
	@reason[7] = "forker_thread";
}

tracepoint:writeback:writeback_start
{
	@start[args.sb_dev] = nsecs;
}

tracepoint:writeback:writeback_written
{
	$sb_dev = args.sb_dev;
	$s = @start[$sb_dev];
	delete(@start[$sb_dev]);
	$lat = $s ? (nsecs - $s) / 1000 : 0;

	time("%H:%M:%S  ");
	printf("%-8s %-8d %-16s %d.%03d\n", args.name,
	    args.nr_pages & 0xffff,	// TODO: explain these bitmasks
	    @reason[args.reason & 0xffffffff],
	    $lat / 1000, $lat % 1000);
}

END
{
	clear(@reason);
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Display the exit_reason and its statistics of each vm exit in kvm

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'kprobe:kvm_exit {\n  @exit_reason[reg("rax")] = count();\n}\n\ninterval:s:1 {\n  time();\n  print(@exit_reason);\n  clear(@exit_reason);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kvm_exit {
  @exit_reason[reg("rax")] = count();
}

interval:s:1 {
  time();
  print(@exit_reason);
  clear(@exit_reason);
}
kill process 17134
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kvm_exit {\n  @exit_reason[reg(\"rax\")] = count();\n}\n\ninterval:s:1 {\n  time();\n  print(@exit_reason);\n  clear(@exit_reason);\n}", "stdout": "", "stderr": "stdin:2:3-26: ERROR: 'rax' is not a valid register on this architecture (x86_64)\n  @exit_reason[reg(\"rax\")] = count();\n  ~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kvm_exit {\n  @exit_reason[reg("rax")] = count();\n}\n\ninterval:s:1 {\n  time();\n  print(@exit_reason);\n  clear(@exit_reason);\n}', 'stdout': '', 'stderr': 'stdin:2:3-26: ERROR: \'rax\' is not a valid register on this architecture (x86_64)\n  @exit_reason[reg("rax")] = count();\n  ~~~~~~~~~~~~~~~~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 9 out of 40 test cases so far.

Running test case: Trace mount and umount syscalls system-wide and print with pid
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace mount and umount syscalls system-wide and print with pid

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the syscalls statfs(), statx(), newstat(), and newlstat(), providing information about the PID, process name, error code, and path being accessed.

```
BEGIN
{
	printf("Tracing stat syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %3s %s\n", "PID", "COMM", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_statfs
{
	@filename[tid] = args.pathname;
}

tracepoint:syscalls:sys_enter_statx,
tracepoint:syscalls:sys_enter_newstat,
tracepoint:syscalls:sys_enter_newlstat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_statfs,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_newstat,
tracepoint:syscalls:sys_exit_newlstat
/@filename[tid]/
{
	$ret = args.ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %3d %s\n", pid, comm, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace mount and umount syscalls system-wide and print with pid

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:syscalls:sys_enter_mount, tracepoint:syscalls:sys_enter_umount { printf("%s syscall by PID %d\\n", probe, pid); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_mount, tracepoint:syscalls:sys_enter_umount { printf("%s syscall by PID %d\n", probe, pid); }
Attaching 2 probes...


kill process 17141
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_mount, tracepoint:syscalls:sys_enter_umount { printf(\"%s syscall by PID %d\\n\", probe, pid); }", "stdout": "Attaching 2 probes...\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_mount, tracepoint:syscalls:sys_enter_umount { printf("%s syscall by PID %d\\n", probe, pid); }', 'stdout': 'Attaching 2 probes...\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 10 out of 40 test cases so far.

Running test case: Trace bpf jit compile events
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace bpf jit compile events

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces new processes and counts the number of new process creations per second using the eBPF technology.

```
BEGIN
{
	printf("Tracing new processes... Hit Ctrl-C to end.\n");

}

tracepoint:sched:sched_process_fork
{
	@ = count();
}

interval:s:1
{
	time("%H:%M:%S PIDs/sec: ");
	print(@);
	clear(@);
}

END
{
	clear(@);
}

```

example: Write a BPF code that traces md flush events and displays the time, process ID, command, and device information of each event.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/genhd.h>
#include <linux/bio.h>
#endif

BEGIN
{
	printf("Tracing md flush events... Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-16s %s\n", "TIME", "PID", "COMM", "DEVICE");
}

kprobe:md_flush_request
{
	time("%H:%M:%S ");
	printf("%-6d %-16s %s\n", pid, comm,
	    ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace bpf jit compile events

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:bpf:bpf_jit_compile { printf("%s %d\\n", comm, pid); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:bpf:bpf_jit_compile { printf("%s %d\n", comm, pid); }
kill process 17148
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:bpf:bpf_jit_compile { printf(\"%s %d\\n\", comm, pid); }", "stdout": "", "stderr": "stdin:1:1-31: ERROR: tracepoint not found: bpf:bpf_jit_compile\ntracepoint:bpf:bpf_jit_compile { printf(\"%s %d\\n\", comm, pid); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:bpf:bpf_jit_compile { printf("%s %d\\n", comm, pid); }', 'stdout': '', 'stderr': 'stdin:1:1-31: ERROR: tracepoint not found: bpf:bpf_jit_compile\ntracepoint:bpf:bpf_jit_compile { printf("%s %d\\n", comm, pid); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 10 out of 40 test cases so far.

Running test case: Trace block device I/O with PID and latency
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace block device I/O with PID and latency

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces block I/O operations and displays the latency for each operation, along with the disk, process, and PID associated with it.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/blkdev.h>
#include <linux/blk-mq.h>
#endif

BEGIN
{
	printf("%-12s %-7s %-16s %-6s %7s\n", "TIME(ms)", "DISK", "COMM", "PID", "LAT(ms)");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
	@iopid[arg0] = pid;
	@iocomm[arg0] = comm;
	@disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0] != 0 && @iopid[arg0] != 0 && @iocomm[arg0] != ""/

{
	$now = nsecs;
	printf("%-12u %-7s %-16s %-6d %7d\n",
	    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],
	    ($now - @start[arg0]) / 1e6);

	delete(@start[arg0]);
	delete(@iopid[arg0]);
	delete(@iocomm[arg0]);
	delete(@disk[arg0]);
}

END
{
	clear(@start);
	clear(@iopid);
	clear(@iocomm);
	clear(@disk);
}

```

example: Write a BPF code that traces block device I/O latency by calculating the time difference between the start and completion of I/O operations and storing them in a histogram.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0]/
{
	@usecs = hist((nsecs - @start[arg0]) / 1000);
	delete(@start[arg0]);
}

END
{
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace block device I/O with PID and latency

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/blkdev.h>\n\nBEGIN\n{\n  printf("%-12s %-7s %-16s %-6s %7s\\n", "TIME(ms)", "DISK", "COMM", "PID", "LAT(ms)");\n}\n\nkprobe:blk_account_io_start\n{\n  @start[arg0] = nsecs;\n  @iopid[arg0] = pid;\n  @iocomm[arg0] = comm;\n  @disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;\n}\n\nkprobe:blk_account_io_done\n/@start[arg0] && @iopid[arg0] && @iocomm[arg0]/\n{\n  $now = nsecs;\n  printf("%-12u %-7s %-16s %-6d %7d\\n",\n    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],\n    ($now - @start[arg0]) / 1e6);\n\n  delete(@start[arg0]);\n  delete(@iopid[arg0]);\n  delete(@iocomm[arg0]);\n  delete(@disk[arg0]);\n}\n\nEND\n{\n  clear(@start);\n  clear(@iopid);\n  clear(@iocomm);\n  clear(@disk);\n}\n'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/blkdev.h>

BEGIN
{
  printf("%-12s %-7s %-16s %-6s %7s\n", "TIME(ms)", "DISK", "COMM", "PID", "LAT(ms)");
}

kprobe:blk_account_io_start
{
  @start[arg0] = nsecs;
  @iopid[arg0] = pid;
  @iocomm[arg0] = comm;
  @disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;
}

kprobe:blk_account_io_done
/@start[arg0] && @iopid[arg0] && @iocomm[arg0]/
{
  $now = nsecs;
  printf("%-12u %-7s %-16s %-6d %7d\n",
    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],
    ($now - @start[arg0]) / 1e6);

  delete(@start[arg0]);
  delete(@iopid[arg0]);
  delete(@iocomm[arg0]);
  delete(@disk[arg0]);
}

END
{
  clear(@start);
  clear(@iopid);
  clear(@iocomm);
  clear(@disk);
}

kill process 17156
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/blkdev.h>\n\nBEGIN\n{\n  printf(\"%-12s %-7s %-16s %-6s %7s\\n\", \"TIME(ms)\", \"DISK\", \"COMM\", \"PID\", \"LAT(ms)\");\n}\n\nkprobe:blk_account_io_start\n{\n  @start[arg0] = nsecs;\n  @iopid[arg0] = pid;\n  @iocomm[arg0] = comm;\n  @disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;\n}\n\nkprobe:blk_account_io_done\n/@start[arg0] && @iopid[arg0] && @iocomm[arg0]/\n{\n  $now = nsecs;\n  printf(\"%-12u %-7s %-16s %-6d %7d\\n\",\n    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],\n    ($now - @start[arg0]) / 1e6);\n\n  delete(@start[arg0]);\n  delete(@iopid[arg0]);\n  delete(@iocomm[arg0]);\n  delete(@disk[arg0]);\n}\n\nEND\n{\n  clear(@start);\n  clear(@iopid);\n  clear(@iocomm);\n  clear(@disk);\n}\n", "stdout": "", "stderr": "/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:41:9: warning: '__HAVE_BUILTIN_BSWAP32__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:42:9: warning: '__HAVE_BUILTIN_BSWAP64__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:43:9: warning: '__HAVE_BUILTIN_BSWAP16__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:24:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:28:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:42:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:46:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/arch/x86/include/asm/ibt.h:101:47: error: use of undeclared identifier 'false'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/blkdev.h>\n\nBEGIN\n{\n  printf("%-12s %-7s %-16s %-6s %7s\\n", "TIME(ms)", "DISK", "COMM", "PID", "LAT(ms)");\n}\n\nkprobe:blk_account_io_start\n{\n  @start[arg0] = nsecs;\n  @iopid[arg0] = pid;\n  @iocomm[arg0] = comm;\n  @disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;\n}\n\nkprobe:blk_account_io_done\n/@start[arg0] && @iopid[arg0] && @iocomm[arg0]/\n{\n  $now = nsecs;\n  printf("%-12u %-7s %-16s %-6d %7d\\n",\n    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],\n    ($now - @start[arg0]) / 1e6);\n\n  delete(@start[arg0]);\n  delete(@iopid[arg0]);\n  delete(@iocomm[arg0]);\n  delete(@disk[arg0]);\n}\n\nEND\n{\n  clear(@start);\n  clear(@iopid);\n  clear(@iocomm);\n  clear(@disk);\n}\n', 'stdout': '', 'stderr': "/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:41:9: warning: '__HAVE_BUILTIN_BSWAP32__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:42:9: warning: '__HAVE_BUILTIN_BSWAP64__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:43:9: warning: '__HAVE_BUILTIN_BSWAP16__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:24:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:28:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:42:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:46:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/arch/x86/include/asm/ibt.h:101:47: error: use of undeclared identifier 'false'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 10 out of 40 test cases so far.

Running test case: Trace btrfs operations system-wide
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace btrfs operations system-wide

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the latency of four common XFS file system operations (read, write, open, and fsync) and prints a summary of the operation latency, using the bpftrace and eBPF tools.

```
BEGIN
{
	printf("Tracing XFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:xfs_file_read_iter,
kprobe:xfs_file_write_iter,
kprobe:xfs_file_open,
kprobe:xfs_file_fsync
{
	@start[tid] = nsecs;
	@name[tid] = func;
}

kretprobe:xfs_file_read_iter,
kretprobe:xfs_file_write_iter,
kretprobe:xfs_file_open,
kretprobe:xfs_file_fsync
/@start[tid]/
{
	@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
	delete(@start[tid]);
	delete(@name[tid]);
}

END
{
	clear(@start);
	clear(@name);
}

```

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace btrfs operations system-wide

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing BTRFS operation latency... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:btrfs_file_read_iter,\nkprobe:btrfs_file_write_iter,\nkprobe:btrfs_file_open,\nkprobe:btrfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:btrfs_file_read_iter,\nkretprobe:btrfs_file_write_iter,\nkretprobe:btrfs_file_open,\nkretprobe:btrfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing BTRFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:btrfs_file_read_iter,
kprobe:btrfs_file_write_iter,
kprobe:btrfs_file_open,
kprobe:btrfs_file_fsync
{
	@start[tid] = nsecs;
	@name[tid] = func;
}

kretprobe:btrfs_file_read_iter,
kretprobe:btrfs_file_write_iter,
kretprobe:btrfs_file_open,
kretprobe:btrfs_file_fsync
/@start[tid]/
{
	@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
	delete(@start[tid]);
	delete(@name[tid]);
}

END
{
	clear(@start);
	clear(@name);
}
Attaching 10 probes...
Tracing BTRFS operation latency... Hit Ctrl-C to end.





kill process 17174
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing BTRFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:btrfs_file_read_iter,\nkprobe:btrfs_file_write_iter,\nkprobe:btrfs_file_open,\nkprobe:btrfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:btrfs_file_read_iter,\nkretprobe:btrfs_file_write_iter,\nkretprobe:btrfs_file_open,\nkretprobe:btrfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}", "stdout": "Attaching 10 probes...\nTracing BTRFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:8-9: WARNING: btrfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: btrfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:btrfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:btrfs_file_fsync, skipping.\n", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing BTRFS operation latency... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:btrfs_file_read_iter,\nkprobe:btrfs_file_write_iter,\nkprobe:btrfs_file_open,\nkprobe:btrfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:btrfs_file_read_iter,\nkretprobe:btrfs_file_write_iter,\nkretprobe:btrfs_file_open,\nkretprobe:btrfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}', 'stdout': 'Attaching 10 probes...\nTracing BTRFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n', 'stderr': 'stdin:8-9: WARNING: btrfs_file_fsync is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:17-18: WARNING: btrfs_file_fsync is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:btrfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:btrfs_file_fsync, skipping.\n', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 11 out of 40 test cases so far.

Running test case: Trace security capability checks events
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace security capability checks events

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the security capability checks (cap_capable()) and prints the UID, PID, command name, capability, capability name, and audit value for each syscall in a clear and organized manner.

```
BEGIN
{
	printf("Tracing cap_capable syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\n", "TIME", "UID", "PID",
	    "COMM", "CAP", "NAME");
	@cap[0] = "CAP_CHOWN";
	@cap[1] = "CAP_DAC_OVERRIDE";
	@cap[2] = "CAP_DAC_READ_SEARCH";
	@cap[3] = "CAP_FOWNER";
	@cap[4] = "CAP_FSETID";
	@cap[5] = "CAP_KILL";
	@cap[6] = "CAP_SETGID";
	@cap[7] = "CAP_SETUID";
	@cap[8] = "CAP_SETPCAP";
	@cap[9] = "CAP_LINUX_IMMUTABLE";
	@cap[10] = "CAP_NET_BIND_SERVICE";
	@cap[11] = "CAP_NET_BROADCAST";
	@cap[12] = "CAP_NET_ADMIN";
	@cap[13] = "CAP_NET_RAW";
	@cap[14] = "CAP_IPC_LOCK";
	@cap[15] = "CAP_IPC_OWNER";
	@cap[16] = "CAP_SYS_MODULE";
	@cap[17] = "CAP_SYS_RAWIO";
	@cap[18] = "CAP_SYS_CHROOT";
	@cap[19] = "CAP_SYS_PTRACE";
	@cap[20] = "CAP_SYS_PACCT";
	@cap[21] = "CAP_SYS_ADMIN";
	@cap[22] = "CAP_SYS_BOOT";
	@cap[23] = "CAP_SYS_NICE";
	@cap[24] = "CAP_SYS_RESOURCE";
	@cap[25] = "CAP_SYS_TIME";
	@cap[26] = "CAP_SYS_TTY_CONFIG";
	@cap[27] = "CAP_MKNOD";
	@cap[28] = "CAP_LEASE";
	@cap[29] = "CAP_AUDIT_WRITE";
	@cap[30] = "CAP_AUDIT_CONTROL";
	@cap[31] = "CAP_SETFCAP";
	@cap[32] = "CAP_MAC_OVERRIDE";
	@cap[33] = "CAP_MAC_ADMIN";
	@cap[34] = "CAP_SYSLOG";
	@cap[35] = "CAP_WAKE_ALARM";
	@cap[36] = "CAP_BLOCK_SUSPEND";
	@cap[37] = "CAP_AUDIT_READ";
	@cap[38] = "CAP_PERFMON";
	@cap[39] = "CAP_BPF";
	@cap[40] = "CAP_CHECKPOINT_RESTORE";
}

kprobe:cap_capable
{
	$cap = arg2;
	$audit = arg3;
	time("%H:%M:%S  ");
	printf("%-6d %-6d %-16s %-4d %-20s %d\n", uid, pid, comm, $cap,
	    @cap[$cap], $audit);
}

END
{
	clear(@cap);
}

```

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace security capability checks events

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing cap_capable syscalls... Hit Ctrl-C to end.\\n");\n\tprintf("%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\\n", "TIME", "UID", "PID",\n\t    "COMM", "CAP", "NAME");\n\t@cap[0] = "CAP_CHOWN";\n\t@cap[1] = "CAP_DAC_OVERRIDE";\n\t@cap[2] = "CAP_DAC_READ_SEARCH";\n\t@cap[3] = "CAP_FOWNER";\n\t@cap[4] = "CAP_FSETID";\n\t@cap[5] = "CAP_KILL";\n\t@cap[6] = "CAP_SETGID";\n\t@cap[7] = "CAP_SETUID";\n\t@cap[8] = "CAP_SETPCAP";\n\t@cap[9] = "CAP_LINUX_IMMUTABLE";\n\t@cap[10] = "CAP_NET_BIND_SERVICE";\n\t@cap[11] = "CAP_NET_BROADCAST";\n\t@cap[12] = "CAP_NET_ADMIN";\n\t@cap[13] = "CAP_NET_RAW";\n\t@cap[14] = "CAP_IPC_LOCK";\n\t@cap[15] = "CAP_IPC_OWNER";\n\t@cap[16] = "CAP_SYS_MODULE";\n\t@cap[17] = "CAP_SYS_RAWIO";\n\t@cap[18] = "CAP_SYS_CHROOT";\n\t@cap[19] = "CAP_SYS_PTRACE";\n\t@cap[20] = "CAP_SYS_PACCT";\n\t@cap[21] = "CAP_SYS_ADMIN";\n\t@cap[22] = "CAP_SYS_BOOT";\n\t@cap[23] = "CAP_SYS_NICE";\n\t@cap[24] = "CAP_SYS_RESOURCE";\n\t@cap[25] = "CAP_SYS_TIME";\n\t@cap[26] = "CAP_SYS_TTY_CONFIG";\n\t@cap[27] = "CAP_MKNOD";\n\t@cap[28] = "CAP_LEASE";\n\t@cap[29] = "CAP_AUDIT_WRITE";\n\t@cap[30] = "CAP_AUDIT_CONTROL";\n\t@cap[31] = "CAP_SETFCAP";\n\t@cap[32] = "CAP_MAC_OVERRIDE";\n\t@cap[33] = "CAP_MAC_ADMIN";\n\t@cap[34] = "CAP_SYSLOG";\n\t@cap[35] = "CAP_WAKE_ALARM";\n\t@cap[36] = "CAP_BLOCK_SUSPEND";\n\t@cap[37] = "CAP_AUDIT_READ";\n\t@cap[38] = "CAP_PERFMON";\n\t@cap[39] = "CAP_BPF";\n\t@cap[40] = "CAP_CHECKPOINT_RESTORE";\n}\n\nkprobe:cap_capable\n{\n\t$cap = arg2;\n\t$audit = arg3;\n\ttime("%H:%M:%S  ");\n\tprintf("%-6d %-6d %-16s %-4d %-20s %d\\n", uid, pid, comm, $cap,\n\t    @cap[$cap], $audit);\n}\n\nEND\n{\n\tclear(@cap);\n}\n'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing cap_capable syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\n", "TIME", "UID", "PID",
	    "COMM", "CAP", "NAME");
	@cap[0] = "CAP_CHOWN";
	@cap[1] = "CAP_DAC_OVERRIDE";
	@cap[2] = "CAP_DAC_READ_SEARCH";
	@cap[3] = "CAP_FOWNER";
	@cap[4] = "CAP_FSETID";
	@cap[5] = "CAP_KILL";
	@cap[6] = "CAP_SETGID";
	@cap[7] = "CAP_SETUID";
	@cap[8] = "CAP_SETPCAP";
	@cap[9] = "CAP_LINUX_IMMUTABLE";
	@cap[10] = "CAP_NET_BIND_SERVICE";
	@cap[11] = "CAP_NET_BROADCAST";
	@cap[12] = "CAP_NET_ADMIN";
	@cap[13] = "CAP_NET_RAW";
	@cap[14] = "CAP_IPC_LOCK";
	@cap[15] = "CAP_IPC_OWNER";
	@cap[16] = "CAP_SYS_MODULE";
	@cap[17] = "CAP_SYS_RAWIO";
	@cap[18] = "CAP_SYS_CHROOT";
	@cap[19] = "CAP_SYS_PTRACE";
	@cap[20] = "CAP_SYS_PACCT";
	@cap[21] = "CAP_SYS_ADMIN";
	@cap[22] = "CAP_SYS_BOOT";
	@cap[23] = "CAP_SYS_NICE";
	@cap[24] = "CAP_SYS_RESOURCE";
	@cap[25] = "CAP_SYS_TIME";
	@cap[26] = "CAP_SYS_TTY_CONFIG";
	@cap[27] = "CAP_MKNOD";
	@cap[28] = "CAP_LEASE";
	@cap[29] = "CAP_AUDIT_WRITE";
	@cap[30] = "CAP_AUDIT_CONTROL";
	@cap[31] = "CAP_SETFCAP";
	@cap[32] = "CAP_MAC_OVERRIDE";
	@cap[33] = "CAP_MAC_ADMIN";
	@cap[34] = "CAP_SYSLOG";
	@cap[35] = "CAP_WAKE_ALARM";
	@cap[36] = "CAP_BLOCK_SUSPEND";
	@cap[37] = "CAP_AUDIT_READ";
	@cap[38] = "CAP_PERFMON";
	@cap[39] = "CAP_BPF";
	@cap[40] = "CAP_CHECKPOINT_RESTORE";
}

kprobe:cap_capable
{
	$cap = arg2;
	$audit = arg3;
	time("%H:%M:%S  ");
	printf("%-6d %-6d %-16s %-4d %-20s %d\n", uid, pid, comm, $cap,
	    @cap[$cap], $audit);
}

END
{
	clear(@cap);
}

Attaching 3 probes...
Tracing cap_capable syscalls... Hit Ctrl-C to end.
TIME      UID    PID    COMM             CAP  NAME                 AUDIT



kill process 17184
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing cap_capable syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\\n\", \"TIME\", \"UID\", \"PID\",\n\t    \"COMM\", \"CAP\", \"NAME\");\n\t@cap[0] = \"CAP_CHOWN\";\n\t@cap[1] = \"CAP_DAC_OVERRIDE\";\n\t@cap[2] = \"CAP_DAC_READ_SEARCH\";\n\t@cap[3] = \"CAP_FOWNER\";\n\t@cap[4] = \"CAP_FSETID\";\n\t@cap[5] = \"CAP_KILL\";\n\t@cap[6] = \"CAP_SETGID\";\n\t@cap[7] = \"CAP_SETUID\";\n\t@cap[8] = \"CAP_SETPCAP\";\n\t@cap[9] = \"CAP_LINUX_IMMUTABLE\";\n\t@cap[10] = \"CAP_NET_BIND_SERVICE\";\n\t@cap[11] = \"CAP_NET_BROADCAST\";\n\t@cap[12] = \"CAP_NET_ADMIN\";\n\t@cap[13] = \"CAP_NET_RAW\";\n\t@cap[14] = \"CAP_IPC_LOCK\";\n\t@cap[15] = \"CAP_IPC_OWNER\";\n\t@cap[16] = \"CAP_SYS_MODULE\";\n\t@cap[17] = \"CAP_SYS_RAWIO\";\n\t@cap[18] = \"CAP_SYS_CHROOT\";\n\t@cap[19] = \"CAP_SYS_PTRACE\";\n\t@cap[20] = \"CAP_SYS_PACCT\";\n\t@cap[21] = \"CAP_SYS_ADMIN\";\n\t@cap[22] = \"CAP_SYS_BOOT\";\n\t@cap[23] = \"CAP_SYS_NICE\";\n\t@cap[24] = \"CAP_SYS_RESOURCE\";\n\t@cap[25] = \"CAP_SYS_TIME\";\n\t@cap[26] = \"CAP_SYS_TTY_CONFIG\";\n\t@cap[27] = \"CAP_MKNOD\";\n\t@cap[28] = \"CAP_LEASE\";\n\t@cap[29] = \"CAP_AUDIT_WRITE\";\n\t@cap[30] = \"CAP_AUDIT_CONTROL\";\n\t@cap[31] = \"CAP_SETFCAP\";\n\t@cap[32] = \"CAP_MAC_OVERRIDE\";\n\t@cap[33] = \"CAP_MAC_ADMIN\";\n\t@cap[34] = \"CAP_SYSLOG\";\n\t@cap[35] = \"CAP_WAKE_ALARM\";\n\t@cap[36] = \"CAP_BLOCK_SUSPEND\";\n\t@cap[37] = \"CAP_AUDIT_READ\";\n\t@cap[38] = \"CAP_PERFMON\";\n\t@cap[39] = \"CAP_BPF\";\n\t@cap[40] = \"CAP_CHECKPOINT_RESTORE\";\n}\n\nkprobe:cap_capable\n{\n\t$cap = arg2;\n\t$audit = arg3;\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-6d %-16s %-4d %-20s %d\\n\", uid, pid, comm, $cap,\n\t    @cap[$cap], $audit);\n}\n\nEND\n{\n\tclear(@cap);\n}\n", "stdout": "Attaching 3 probes...\nTracing cap_capable syscalls... Hit Ctrl-C to end.\nTIME      UID    PID    COMM             CAP  NAME                 AUDIT\n\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing cap_capable syscalls... Hit Ctrl-C to end.\\n");\n\tprintf("%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\\n", "TIME", "UID", "PID",\n\t    "COMM", "CAP", "NAME");\n\t@cap[0] = "CAP_CHOWN";\n\t@cap[1] = "CAP_DAC_OVERRIDE";\n\t@cap[2] = "CAP_DAC_READ_SEARCH";\n\t@cap[3] = "CAP_FOWNER";\n\t@cap[4] = "CAP_FSETID";\n\t@cap[5] = "CAP_KILL";\n\t@cap[6] = "CAP_SETGID";\n\t@cap[7] = "CAP_SETUID";\n\t@cap[8] = "CAP_SETPCAP";\n\t@cap[9] = "CAP_LINUX_IMMUTABLE";\n\t@cap[10] = "CAP_NET_BIND_SERVICE";\n\t@cap[11] = "CAP_NET_BROADCAST";\n\t@cap[12] = "CAP_NET_ADMIN";\n\t@cap[13] = "CAP_NET_RAW";\n\t@cap[14] = "CAP_IPC_LOCK";\n\t@cap[15] = "CAP_IPC_OWNER";\n\t@cap[16] = "CAP_SYS_MODULE";\n\t@cap[17] = "CAP_SYS_RAWIO";\n\t@cap[18] = "CAP_SYS_CHROOT";\n\t@cap[19] = "CAP_SYS_PTRACE";\n\t@cap[20] = "CAP_SYS_PACCT";\n\t@cap[21] = "CAP_SYS_ADMIN";\n\t@cap[22] = "CAP_SYS_BOOT";\n\t@cap[23] = "CAP_SYS_NICE";\n\t@cap[24] = "CAP_SYS_RESOURCE";\n\t@cap[25] = "CAP_SYS_TIME";\n\t@cap[26] = "CAP_SYS_TTY_CONFIG";\n\t@cap[27] = "CAP_MKNOD";\n\t@cap[28] = "CAP_LEASE";\n\t@cap[29] = "CAP_AUDIT_WRITE";\n\t@cap[30] = "CAP_AUDIT_CONTROL";\n\t@cap[31] = "CAP_SETFCAP";\n\t@cap[32] = "CAP_MAC_OVERRIDE";\n\t@cap[33] = "CAP_MAC_ADMIN";\n\t@cap[34] = "CAP_SYSLOG";\n\t@cap[35] = "CAP_WAKE_ALARM";\n\t@cap[36] = "CAP_BLOCK_SUSPEND";\n\t@cap[37] = "CAP_AUDIT_READ";\n\t@cap[38] = "CAP_PERFMON";\n\t@cap[39] = "CAP_BPF";\n\t@cap[40] = "CAP_CHECKPOINT_RESTORE";\n}\n\nkprobe:cap_capable\n{\n\t$cap = arg2;\n\t$audit = arg3;\n\ttime("%H:%M:%S  ");\n\tprintf("%-6d %-6d %-16s %-4d %-20s %d\\n", uid, pid, comm, $cap,\n\t    @cap[$cap], $audit);\n}\n\nEND\n{\n\tclear(@cap);\n}\n', 'stdout': 'Attaching 3 probes...\nTracing cap_capable syscalls... Hit Ctrl-C to end.\nTIME      UID    PID    COMM             CAP  NAME                 AUDIT\n\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 12 out of 40 test cases so far.

Running test case: Trace compact zone events with PID and latency
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace compact zone events with PID and latency

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces block I/O operations and displays the latency for each operation, along with the disk, process, and PID associated with it.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/blkdev.h>
#include <linux/blk-mq.h>
#endif

BEGIN
{
	printf("%-12s %-7s %-16s %-6s %7s\n", "TIME(ms)", "DISK", "COMM", "PID", "LAT(ms)");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
	@iopid[arg0] = pid;
	@iocomm[arg0] = comm;
	@disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0] != 0 && @iopid[arg0] != 0 && @iocomm[arg0] != ""/

{
	$now = nsecs;
	printf("%-12u %-7s %-16s %-6d %7d\n",
	    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],
	    ($now - @start[arg0]) / 1e6);

	delete(@start[arg0]);
	delete(@iopid[arg0]);
	delete(@iocomm[arg0]);
	delete(@disk[arg0]);
}

END
{
	clear(@start);
	clear(@iopid);
	clear(@iocomm);
	clear(@disk);
}

```

example: Write a BPF code that traces block device I/O latency by calculating the time difference between the start and completion of I/O operations and storing them in a histogram.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0]/
{
	@usecs = hist((nsecs - @start[arg0]) / 1000);
	delete(@start[arg0]);
}

END
{
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace compact zone events with PID and latency

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'kprobe:compact_zone { @start[tid] = nsecs; } kretprobe:compact_zone { @latency[tid] = hist((nsecs - @start[tid]) / 1000); delete(@start[tid]); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:compact_zone { @start[tid] = nsecs; } kretprobe:compact_zone { @latency[tid] = hist((nsecs - @start[tid]) / 1000); delete(@start[tid]); }
Attaching 2 probes...




kill process 17194
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:compact_zone { @start[tid] = nsecs; } kretprobe:compact_zone { @latency[tid] = hist((nsecs - @start[tid]) / 1000); delete(@start[tid]); }", "stdout": "Attaching 2 probes...\n\n\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:compact_zone { @start[tid] = nsecs; } kretprobe:compact_zone { @latency[tid] = hist((nsecs - @start[tid]) / 1000); delete(@start[tid]); }', 'stdout': 'Attaching 2 probes...\n\n\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 13 out of 40 test cases so far.

Running test case: Trace and report long atomic critical sections in the kernel
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace and report long atomic critical sections in the kernel

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces voluntary sleep calls, printing the time, parent process ID (PPID), parent process command (PCOMM), process ID (PID), process command (COMM), and duration in seconds.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/time.h>
#include <linux/sched.h>
#endif

BEGIN
{
	printf("Tracing sleeps. Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-16s %-6s %-16s %s\n", "TIME", "PPID", "PCOMM",
	    "PID", "COMM", "SECONDS");
}

tracepoint:syscalls:sys_enter_nanosleep
/args.rqtp->tv_sec + args.rqtp->tv_nsec/
{
	$task = (struct task_struct *)curtask;
	time("%H:%M:%S ");
	printf("%-6d %-16s %-6d %-16s %d.%03d\n", $task->real_parent->pid,
	    $task->real_parent->comm, pid, comm,
	    args.rqtp->tv_sec, (uint64)args.rqtp->tv_nsec / 1e6);
}

```

example: Write a BPF code that traces the CPU scheduler and records the latency of tasks in the run queue, using the sched_wakeup, sched_wakeup_new, and sched_switch tracepoints, and displays the latency as a histogram.

```
#include <linux/sched.h>

BEGIN
{
	printf("Tracing CPU scheduler... Hit Ctrl-C to end.\n");
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
	@qtime[args.pid] = nsecs;
}

tracepoint:sched:sched_switch
{
	if (args.prev_state == TASK_RUNNING) {
		@qtime[args.prev_pid] = nsecs;
	}

	$ns = @qtime[args.next_pid];
	if ($ns) {
		@usecs = hist((nsecs - $ns) / 1000);
	}
	delete(@qtime[args.next_pid]);
}

END
{
	clear(@qtime);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace and report long atomic critical sections in the kernel

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/sched.h>\n\nBEGIN\n{\n  printf("Tracing long atomic critical sections... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:preempt_disable\n{\n  @start[tid] = nsecs;\n}\n\nkprobe:preempt_enable\n/ @start[tid] /\n{\n  $time = nsecs - @start[tid];\n  if ($time > 1000000) {\n    printf("Long atomic section detected: %d us\\n", $time / 1000);\n  }\n  delete(@start[tid]);\n}\n\nEND\n{\n  clear(@start);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>

BEGIN
{
  printf("Tracing long atomic critical sections... Hit Ctrl-C to end.\n");
}

kprobe:preempt_disable
{
  @start[tid] = nsecs;
}

kprobe:preempt_enable
/ @start[tid] /
{
  $time = nsecs - @start[tid];
  if ($time > 1000000) {
    printf("Long atomic section detected: %d us\n", $time / 1000);
  }
  delete(@start[tid]);
}

END
{
  clear(@start);
}
Attaching 4 probes...
kill process 17202
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n  printf(\"Tracing long atomic critical sections... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:preempt_disable\n{\n  @start[tid] = nsecs;\n}\n\nkprobe:preempt_enable\n/ @start[tid] /\n{\n  $time = nsecs - @start[tid];\n  if ($time > 1000000) {\n    printf(\"Long atomic section detected: %d us\\n\", $time / 1000);\n  }\n  delete(@start[tid]);\n}\n\nEND\n{\n  clear(@start);\n}", "stdout": "Attaching 4 probes...\n", "stderr": "stdin:6-8: WARNING: preempt_disable is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:11-13: WARNING: preempt_enable is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kprobe:preempt_enable'\n", "returncode": 255}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n  printf("Tracing long atomic critical sections... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:preempt_disable\n{\n  @start[tid] = nsecs;\n}\n\nkprobe:preempt_enable\n/ @start[tid] /\n{\n  $time = nsecs - @start[tid];\n  if ($time > 1000000) {\n    printf("Long atomic section detected: %d us\\n", $time / 1000);\n  }\n  delete(@start[tid]);\n}\n\nEND\n{\n  clear(@start);\n}', 'stdout': 'Attaching 4 probes...\n', 'stderr': 'stdin:6-8: WARNING: preempt_disable is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:11-13: WARNING: preempt_enable is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: \'kprobe:preempt_enable\'\n', 'returncode': 255}
Test case completed. Output saved to: output.json

Passed 13 out of 40 test cases so far.

Running test case: Trace signals issued by the kill() syscall system-wide
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace signals issued by the kill() syscall system-wide

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Please write a BPF code that traces signals issued by the kill() syscall and prints information such as the timestamp, process ID, command, signal, target process ID, and the result of the kill() syscall.

```
BEGIN
{
	printf("Tracing kill() signals... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %-4s %-6s %s\n", "TIME", "PID", "COMM", "SIG",
	    "TPID", "RESULT");
}

tracepoint:syscalls:sys_enter_kill
{
	@tpid[tid] = args.pid;
	@tsig[tid] = args.sig;
}

tracepoint:syscalls:sys_exit_kill
/@tpid[tid]/
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %-4d %-6d %d\n", pid, comm, @tsig[tid], @tpid[tid],
	    args.ret);
	delete(@tpid[tid]);
	delete(@tsig[tid]);
}

```

example: Write a BPF code that traces the syscalls statfs(), statx(), newstat(), and newlstat(), providing information about the PID, process name, error code, and path being accessed.

```
BEGIN
{
	printf("Tracing stat syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %3s %s\n", "PID", "COMM", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_statfs
{
	@filename[tid] = args.pathname;
}

tracepoint:syscalls:sys_enter_statx,
tracepoint:syscalls:sys_enter_newstat,
tracepoint:syscalls:sys_enter_newlstat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_statfs,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_newstat,
tracepoint:syscalls:sys_exit_newlstat
/@filename[tid]/
{
	$ret = args.ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %3d %s\n", pid, comm, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace signals issued by the kill() syscall system-wide

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing kill() signals... Hit Ctrl-C to end.\\n");\n\tprintf("%-9s %-6s %-16s %-4s %-6s %s\\n", "TIME", "PID", "COMM", "SIG",\n\t    "TPID", "RESULT");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime("%H:%M:%S  ");\n\tprintf("%-6d %-16s %-4d %-6d %d\\n", pid, comm, @tsig[tid], @tpid[tid],\n\t    args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}\n'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing kill() signals... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %-4s %-6s %s\n", "TIME", "PID", "COMM", "SIG",
	    "TPID", "RESULT");
}

tracepoint:syscalls:sys_enter_kill
{
	@tpid[tid] = args.pid;
	@tsig[tid] = args.sig;
}

tracepoint:syscalls:sys_exit_kill
/@tpid[tid]/
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %-4d %-6d %d\n", pid, comm, @tsig[tid], @tpid[tid],
	    args.ret);
	delete(@tpid[tid]);
	delete(@tsig[tid]);
}

kill process 17219
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing kill() signals... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %-4s %-6s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"SIG\",\n\t    \"TPID\", \"RESULT\");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid],\n\t    args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}\n", "stdout": "", "stderr": "stdin:10:15-20: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tpid[tid] = args.pid;\n                 ~~~~~\nstdin:11:15-20: ERROR: Can not access field 'sig' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tsig[tid] = args.sig;\n                 ~~~~~\nstdin:19:6-11: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_kill *'. Try dereferencing it first, or using '->'\n        args.ret);\n        ~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing kill() signals... Hit Ctrl-C to end.\\n");\n\tprintf("%-9s %-6s %-16s %-4s %-6s %s\\n", "TIME", "PID", "COMM", "SIG",\n\t    "TPID", "RESULT");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime("%H:%M:%S  ");\n\tprintf("%-6d %-16s %-4d %-6d %d\\n", pid, comm, @tsig[tid], @tpid[tid],\n\t    args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}\n', 'stdout': '', 'stderr': "stdin:10:15-20: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tpid[tid] = args.pid;\n                 ~~~~~\nstdin:11:15-20: ERROR: Can not access field 'sig' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tsig[tid] = args.sig;\n                 ~~~~~\nstdin:19:6-11: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_kill *'. Try dereferencing it first, or using '->'\n        args.ret);\n        ~~~~~\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 13 out of 40 test cases so far.

Running test case: Traces kernel mutex lock events and display locks statistics.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Traces kernel mutex lock events and display locks statistics.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the CPU scheduler and records the latency of tasks in the run queue, using the sched_wakeup, sched_wakeup_new, and sched_switch tracepoints, and displays the latency as a histogram.

```
#include <linux/sched.h>

BEGIN
{
	printf("Tracing CPU scheduler... Hit Ctrl-C to end.\n");
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
{
	@qtime[args.pid] = nsecs;
}

tracepoint:sched:sched_switch
{
	if (args.prev_state == TASK_RUNNING) {
		@qtime[args.prev_pid] = nsecs;
	}

	$ns = @qtime[args.next_pid];
	if ($ns) {
		@usecs = hist((nsecs - $ns) / 1000);
	}
	delete(@qtime[args.next_pid]);
}

END
{
	clear(@qtime);
}

```

example: Write a BPF code that traces md flush events and displays the time, process ID, command, and device information of each event.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/genhd.h>
#include <linux/bio.h>
#endif

BEGIN
{
	printf("Tracing md flush events... Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-16s %s\n", "TIME", "PID", "COMM", "DEVICE");
}

kprobe:md_flush_request
{
	time("%H:%M:%S ");
	printf("%-6d %-16s %s\n", pid, comm,
	    ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Traces kernel mutex lock events and display locks statistics.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <linux/mutex.h>\n\nBEGIN\n{\n  printf("Tracing kernel mutex lock events... Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %-16s %-16s\\n", "TIME", "PID", "COMM", "MUTEX", "STATE");\n}\n\nkprobe:mutex_lock\n{\n  $mutex = (struct mutex *)arg0;\n  printf("%-8s %-6d %-16s %-16p %-16s\\n", strftime("%H:%M:%S"), pid, comm, $mutex, "LOCK");\n  @lock[$mutex] = count();\n}\n\nkprobe:mutex_unlock\n{\n  $mutex = (struct mutex *)arg0;\n  printf("%-8s %-6d %-16s %-16p %-16s\\n", strftime("%H:%M:%S"), pid, comm, $mutex, "UNLOCK");\n  @unlock[$mutex] = count();\n}\n\nEND\n{\n  printf("\\nMutex lock statistics:\\n");\n  printf("%-16s %-8s %-8s\\n", "MUTEX", "LOCKS", "UNLOCKS");\n  foreach ($mutex in @lock) {\n    printf("%-16p %-8d %-8d\\n", $mutex, @lock[$mutex], @unlock[$mutex]);\n  }\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/mutex.h>

BEGIN
{
  printf("Tracing kernel mutex lock events... Hit Ctrl-C to end.\n");
  printf("%-8s %-6s %-16s %-16s %-16s\n", "TIME", "PID", "COMM", "MUTEX", "STATE");
}

kprobe:mutex_lock
{
  $mutex = (struct mutex *)arg0;
  printf("%-8s %-6d %-16s %-16p %-16s\n", strftime("%H:%M:%S"), pid, comm, $mutex, "LOCK");
  @lock[$mutex] = count();
}

kprobe:mutex_unlock
{
  $mutex = (struct mutex *)arg0;
  printf("%-8s %-6d %-16s %-16p %-16s\n", strftime("%H:%M:%S"), pid, comm, $mutex, "UNLOCK");
  @unlock[$mutex] = count();
}

END
{
  printf("\nMutex lock statistics:\n");
  printf("%-16s %-8s %-8s\n", "MUTEX", "LOCKS", "UNLOCKS");
  foreach ($mutex in @lock) {
    printf("%-16p %-8d %-8d\n", $mutex, @lock[$mutex], @unlock[$mutex]);
  }
}
kill process 17234
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/mutex.h>\n\nBEGIN\n{\n  printf(\"Tracing kernel mutex lock events... Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-6s %-16s %-16s %-16s\\n\", \"TIME\", \"PID\", \"COMM\", \"MUTEX\", \"STATE\");\n}\n\nkprobe:mutex_lock\n{\n  $mutex = (struct mutex *)arg0;\n  printf(\"%-8s %-6d %-16s %-16p %-16s\\n\", strftime(\"%H:%M:%S\"), pid, comm, $mutex, \"LOCK\");\n  @lock[$mutex] = count();\n}\n\nkprobe:mutex_unlock\n{\n  $mutex = (struct mutex *)arg0;\n  printf(\"%-8s %-6d %-16s %-16p %-16s\\n\", strftime(\"%H:%M:%S\"), pid, comm, $mutex, \"UNLOCK\");\n  @unlock[$mutex] = count();\n}\n\nEND\n{\n  printf(\"\\nMutex lock statistics:\\n\");\n  printf(\"%-16s %-8s %-8s\\n\", \"MUTEX\", \"LOCKS\", \"UNLOCKS\");\n  foreach ($mutex in @lock) {\n    printf(\"%-16p %-8d %-8d\\n\", $mutex, @lock[$mutex], @unlock[$mutex]);\n  }\n}", "stdout": "", "stderr": "stdin:27:19-21: ERROR: syntax error, unexpected identifier, expecting ) or \",\"\n  foreach ($mutex in @lock) {\n                  ~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/mutex.h>\n\nBEGIN\n{\n  printf("Tracing kernel mutex lock events... Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %-16s %-16s\\n", "TIME", "PID", "COMM", "MUTEX", "STATE");\n}\n\nkprobe:mutex_lock\n{\n  $mutex = (struct mutex *)arg0;\n  printf("%-8s %-6d %-16s %-16p %-16s\\n", strftime("%H:%M:%S"), pid, comm, $mutex, "LOCK");\n  @lock[$mutex] = count();\n}\n\nkprobe:mutex_unlock\n{\n  $mutex = (struct mutex *)arg0;\n  printf("%-8s %-6d %-16s %-16p %-16s\\n", strftime("%H:%M:%S"), pid, comm, $mutex, "UNLOCK");\n  @unlock[$mutex] = count();\n}\n\nEND\n{\n  printf("\\nMutex lock statistics:\\n");\n  printf("%-16s %-8s %-8s\\n", "MUTEX", "LOCKS", "UNLOCKS");\n  foreach ($mutex in @lock) {\n    printf("%-16p %-8d %-8d\\n", $mutex, @lock[$mutex], @unlock[$mutex]);\n  }\n}', 'stdout': '', 'stderr': 'stdin:27:19-21: ERROR: syntax error, unexpected identifier, expecting ) or ","\n  foreach ($mutex in @lock) {\n                  ~~\n', 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 13 out of 40 test cases so far.

Running test case: Trace System V shared memory syscalls and display the size of the shared memory segment
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace System V shared memory syscalls and display the size of the shared memory segment

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the syscalls statfs(), statx(), newstat(), and newlstat(), providing information about the PID, process name, error code, and path being accessed.

```
BEGIN
{
	printf("Tracing stat syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %3s %s\n", "PID", "COMM", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_statfs
{
	@filename[tid] = args.pathname;
}

tracepoint:syscalls:sys_enter_statx,
tracepoint:syscalls:sys_enter_newstat,
tracepoint:syscalls:sys_enter_newlstat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_statfs,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_newstat,
tracepoint:syscalls:sys_exit_newlstat
/@filename[tid]/
{
	$ret = args.ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %3d %s\n", pid, comm, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace System V shared memory syscalls and display the size of the shared memory segment

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n    printf("Tracing System V shared memory syscalls... Hit Ctrl-C to end.\\n");\n    printf("%-6s %-16s %-6s %-6s\\n", "PID", "COMM", "KEY", "SIZE");\n}\n\ntracepoint:syscalls:sys_enter_shmget\n{\n    @key[tid] = args.key;\n    @size[tid] = args.size;\n}\n\ntracepoint:syscalls:sys_exit_shmget\n/@key[tid] && @size[tid]/\n{\n    printf("%-6d %-16s %-6d %-6d\\n", pid, comm, @key[tid], @size[tid]);\n    delete(@key[tid]);\n    delete(@size[tid]);\n}\n\nEND\n{\n    clear(@key);\n    clear(@size);\n}\n'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
    printf("Tracing System V shared memory syscalls... Hit Ctrl-C to end.\n");
    printf("%-6s %-16s %-6s %-6s\n", "PID", "COMM", "KEY", "SIZE");
}

tracepoint:syscalls:sys_enter_shmget
{
    @key[tid] = args.key;
    @size[tid] = args.size;
}

tracepoint:syscalls:sys_exit_shmget
/@key[tid] && @size[tid]/
{
    printf("%-6d %-16s %-6d %-6d\n", pid, comm, @key[tid], @size[tid]);
    delete(@key[tid]);
    delete(@size[tid]);
}

END
{
    clear(@key);
    clear(@size);
}

kill process 17247
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n    printf(\"Tracing System V shared memory syscalls... Hit Ctrl-C to end.\\n\");\n    printf(\"%-6s %-16s %-6s %-6s\\n\", \"PID\", \"COMM\", \"KEY\", \"SIZE\");\n}\n\ntracepoint:syscalls:sys_enter_shmget\n{\n    @key[tid] = args.key;\n    @size[tid] = args.size;\n}\n\ntracepoint:syscalls:sys_exit_shmget\n/@key[tid] && @size[tid]/\n{\n    printf(\"%-6d %-16s %-6d %-6d\\n\", pid, comm, @key[tid], @size[tid]);\n    delete(@key[tid]);\n    delete(@size[tid]);\n}\n\nEND\n{\n    clear(@key);\n    clear(@size);\n}\n", "stdout": "", "stderr": "stdin:9:17-22: ERROR: Can not access field 'key' on type '(ctx) struct _tracepoint_syscalls_sys_enter_shmget *'. Try dereferencing it first, or using '->'\n    @key[tid] = args.key;\n                ~~~~~\nstdin:10:18-23: ERROR: Can not access field 'size' on type '(ctx) struct _tracepoint_syscalls_sys_enter_shmget *'. Try dereferencing it first, or using '->'\n    @size[tid] = args.size;\n                 ~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n    printf("Tracing System V shared memory syscalls... Hit Ctrl-C to end.\\n");\n    printf("%-6s %-16s %-6s %-6s\\n", "PID", "COMM", "KEY", "SIZE");\n}\n\ntracepoint:syscalls:sys_enter_shmget\n{\n    @key[tid] = args.key;\n    @size[tid] = args.size;\n}\n\ntracepoint:syscalls:sys_exit_shmget\n/@key[tid] && @size[tid]/\n{\n    printf("%-6d %-16s %-6d %-6d\\n", pid, comm, @key[tid], @size[tid]);\n    delete(@key[tid]);\n    delete(@size[tid]);\n}\n\nEND\n{\n    clear(@key);\n    clear(@size);\n}\n', 'stdout': '', 'stderr': "stdin:9:17-22: ERROR: Can not access field 'key' on type '(ctx) struct _tracepoint_syscalls_sys_enter_shmget *'. Try dereferencing it first, or using '->'\n    @key[tid] = args.key;\n                ~~~~~\nstdin:10:18-23: ERROR: Can not access field 'size' on type '(ctx) struct _tracepoint_syscalls_sys_enter_shmget *'. Try dereferencing it first, or using '->'\n    @size[tid] = args.size;\n                 ~~~~~\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 13 out of 40 test cases so far.

Running test case: Summarizes Kernel SLAB/SLUB memory cache allocation rate top
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Summarizes Kernel SLAB/SLUB memory cache allocation rate top

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the kernel OOM killer and prints basic details, including the system load averages, providing context on the system state at the time of the OOM.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/oom.h>
#endif

BEGIN
{
	printf("Tracing oom_kill_process()... Hit Ctrl-C to end.\n");
}

kprobe:oom_kill_process
{
	$oc = (struct oom_control *)arg0;
	time("%H:%M:%S ");
	printf("Triggered by PID %d (\"%s\"), ", pid, comm);
	printf("OOM kill of PID %d (\"%s\"), %d pages, loadavg: ",
	    $oc->chosen->pid, $oc->chosen->comm, $oc->totalpages);
	cat("/proc/loadavg");
}

```

example: Write a BPF code that monitors the swapins by process.

```
kprobe:swap_readpage
{
        @[comm, pid] = count();
}

interval:s:1
{
        time();
        print(@);
        clear(@);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Summarizes Kernel SLAB/SLUB memory cache allocation rate top

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'kprobe:kmem_cache_alloc { @[comm, pid] = count(); } interval:s:1 { time(); print(@); clear(@); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmem_cache_alloc { @[comm, pid] = count(); } interval:s:1 { time(); print(@); clear(@); }
Attaching 2 probes...
11:00:47
@[node, 1635]: 1
@[vmtoolsd, 528]: 2
@[systemd-journal, 407]: 2
@[kworker/u256:2, 17201]: 4
@[bpftrace, 17268]: 5
@[node, 1624]: 7
@[node, 1648]: 20
11:00:48
@[containerd, 1172]: 1
@[node, 1635]: 1
@[node, 1624]: 12
@[node, 1648]: 20
11:00:49
@[node, 1635]: 1
@[node, 1624]: 8
@[jbd2/sda2-8, 345]: 13
@[node, 1648]: 20
11:00:50
@[containerd, 1172]: 1
@[node, 1635]: 1
@[node, 1624]: 7
@[node, 1648]: 20
11:00:51
@[containerd, 1172]: 1
@[node, 1635]: 1
@[node, 1624]: 12
@[node, 1648]: 20
11:00:52
@[node, 1635]: 1
@[vmtoolsd, 528]: 2
@[node, 1624]: 7
@[node, 1648]: 20
@[irqbalance, 804]: 23
11:00:53
@[node, 1635]: 1
@[node, 1624]: 12
@[node, 1648]: 20
11:00:54
@[node, 1635]: 1
@[jbd2/sda2-8, 345]: 6
@[node, 1624]: 8
@[node, 1648]: 20
11:00:55
@[node, 1635]: 1
@[node, 1624]: 7
@[node, 1648]: 16
11:00:56
@[node, 1635]: 1
@[node, 1624]: 12
@[node, 1648]: 20
@[kworker/u256:2, 17201]: 22
11:00:57
@[containerd, 1172]: 1
@[node, 1635]: 1
@[vmtoolsd, 528]: 5
@[node, 1624]: 7
@[node, 1648]: 20
11:00:58
@[node, 1635]: 1
@[node, 1624]: 12
@[node, 1648]: 20
11:00:59
@[node, 1635]: 1
@[node, 1624]: 8
@[jbd2/sda2-8, 345]: 19
@[node, 1648]: 20
11:01:00
@[node, 1635]: 1
@[node, 1624]: 7
@[node, 1648]: 20
11:01:01
@[node, 1635]: 1
@[kworker/u256:0, 15236]: 7
@[node, 1624]: 12
@[node, 1648]: 20
11:01:02
@[node, 1635]: 1
@[cron, 903]: 5
@[node, 1624]: 7
@[node, 1648]: 20
@[irqbalance, 804]: 23
@[vmtoolsd, 528]: 65
11:01:03
@[node, 1635]: 1
@[containerd, 1172]: 2
@[node, 1624]: 12
@[node, 1648]: 20
11:01:04
@[node, 1635]: 1
@[jbd2/sda2-8, 345]: 6
@[node, 1624]: 8
@[node, 1648]: 20
11:01:05
@[node, 1635]: 1
@[systemd, 1]: 5
@[node, 1624]: 7
@[systemd-timesyn, 515]: 12
@[node, 1648]: 20


@[node, 1635]: 1
@[timeout, 17267]: 1
@[node, 1624]: 12
@[node, 1648]: 16
kill process 17265
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmem_cache_alloc { @[comm, pid] = count(); } interval:s:1 { time(); print(@); clear(@); }", "stdout": "Attaching 2 probes...\n11:00:47\n@[node, 1635]: 1\n@[vmtoolsd, 528]: 2\n@[systemd-journal, 407]: 2\n@[kworker/u256:2, 17201]: 4\n@[bpftrace, 17268]: 5\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:00:48\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:49\n@[node, 1635]: 1\n@[node, 1624]: 8\n@[jbd2/sda2-8, 345]: 13\n@[node, 1648]: 20\n11:00:50\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:00:51\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:52\n@[node, 1635]: 1\n@[vmtoolsd, 528]: 2\n@[node, 1624]: 7\n@[node, 1648]: 20\n@[irqbalance, 804]: 23\n11:00:53\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:54\n@[node, 1635]: 1\n@[jbd2/sda2-8, 345]: 6\n@[node, 1624]: 8\n@[node, 1648]: 20\n11:00:55\n@[node, 1635]: 1\n@[node, 1624]: 7\n@[node, 1648]: 16\n11:00:56\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n@[kworker/u256:2, 17201]: 22\n11:00:57\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[vmtoolsd, 528]: 5\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:00:58\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:59\n@[node, 1635]: 1\n@[node, 1624]: 8\n@[jbd2/sda2-8, 345]: 19\n@[node, 1648]: 20\n11:01:00\n@[node, 1635]: 1\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:01:01\n@[node, 1635]: 1\n@[kworker/u256:0, 15236]: 7\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:01:02\n@[node, 1635]: 1\n@[cron, 903]: 5\n@[node, 1624]: 7\n@[node, 1648]: 20\n@[irqbalance, 804]: 23\n@[vmtoolsd, 528]: 65\n11:01:03\n@[node, 1635]: 1\n@[containerd, 1172]: 2\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:01:04\n@[node, 1635]: 1\n@[jbd2/sda2-8, 345]: 6\n@[node, 1624]: 8\n@[node, 1648]: 20\n11:01:05\n@[node, 1635]: 1\n@[systemd, 1]: 5\n@[node, 1624]: 7\n@[systemd-timesyn, 515]: 12\n@[node, 1648]: 20\n\n\n@[node, 1635]: 1\n@[timeout, 17267]: 1\n@[node, 1624]: 12\n@[node, 1648]: 16\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmem_cache_alloc { @[comm, pid] = count(); } interval:s:1 { time(); print(@); clear(@); }', 'stdout': 'Attaching 2 probes...\n11:00:47\n@[node, 1635]: 1\n@[vmtoolsd, 528]: 2\n@[systemd-journal, 407]: 2\n@[kworker/u256:2, 17201]: 4\n@[bpftrace, 17268]: 5\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:00:48\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:49\n@[node, 1635]: 1\n@[node, 1624]: 8\n@[jbd2/sda2-8, 345]: 13\n@[node, 1648]: 20\n11:00:50\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:00:51\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:52\n@[node, 1635]: 1\n@[vmtoolsd, 528]: 2\n@[node, 1624]: 7\n@[node, 1648]: 20\n@[irqbalance, 804]: 23\n11:00:53\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:54\n@[node, 1635]: 1\n@[jbd2/sda2-8, 345]: 6\n@[node, 1624]: 8\n@[node, 1648]: 20\n11:00:55\n@[node, 1635]: 1\n@[node, 1624]: 7\n@[node, 1648]: 16\n11:00:56\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n@[kworker/u256:2, 17201]: 22\n11:00:57\n@[containerd, 1172]: 1\n@[node, 1635]: 1\n@[vmtoolsd, 528]: 5\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:00:58\n@[node, 1635]: 1\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:00:59\n@[node, 1635]: 1\n@[node, 1624]: 8\n@[jbd2/sda2-8, 345]: 19\n@[node, 1648]: 20\n11:01:00\n@[node, 1635]: 1\n@[node, 1624]: 7\n@[node, 1648]: 20\n11:01:01\n@[node, 1635]: 1\n@[kworker/u256:0, 15236]: 7\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:01:02\n@[node, 1635]: 1\n@[cron, 903]: 5\n@[node, 1624]: 7\n@[node, 1648]: 20\n@[irqbalance, 804]: 23\n@[vmtoolsd, 528]: 65\n11:01:03\n@[node, 1635]: 1\n@[containerd, 1172]: 2\n@[node, 1624]: 12\n@[node, 1648]: 20\n11:01:04\n@[node, 1635]: 1\n@[jbd2/sda2-8, 345]: 6\n@[node, 1624]: 8\n@[node, 1648]: 20\n11:01:05\n@[node, 1635]: 1\n@[systemd, 1]: 5\n@[node, 1624]: 7\n@[systemd-timesyn, 515]: 12\n@[node, 1648]: 20\n\n\n@[node, 1635]: 1\n@[timeout, 17267]: 1\n@[node, 1624]: 12\n@[node, 1648]: 16\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 14 out of 40 test cases so far.

Running test case: Trace sync() syscall and print the caller pid
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace sync() syscall and print the caller pid

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces sync-related system calls, such as sync(), syncfs(), fsync(), and fdatasync(), and prints the time, process ID, command, and event for each traced system call.

```
BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-6s %-16s %s\n", "TIME", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range*,
tracepoint:syscalls:sys_enter_msync
{
	time("%H:%M:%S  ");
	printf("%-6d %-16s %s\n", pid, comm, probe);
}

```

example: Write a BPF code that traces the syscalls statfs(), statx(), newstat(), and newlstat(), providing information about the PID, process name, error code, and path being accessed.

```
BEGIN
{
	printf("Tracing stat syscalls... Hit Ctrl-C to end.\n");
	printf("%-6s %-16s %3s %s\n", "PID", "COMM", "ERR", "PATH");
}

tracepoint:syscalls:sys_enter_statfs
{
	@filename[tid] = args.pathname;
}

tracepoint:syscalls:sys_enter_statx,
tracepoint:syscalls:sys_enter_newstat,
tracepoint:syscalls:sys_enter_newlstat
{
	@filename[tid] = args.filename;
}

tracepoint:syscalls:sys_exit_statfs,
tracepoint:syscalls:sys_exit_statx,
tracepoint:syscalls:sys_exit_newstat,
tracepoint:syscalls:sys_exit_newlstat
/@filename[tid]/
{
	$ret = args.ret;
	$errno = $ret >= 0 ? 0 : - $ret;

	printf("%-6d %-16s %3d %s\n", pid, comm, $errno,
	    str(@filename[tid]));
	delete(@filename[tid]);
}

END
{
	clear(@filename);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace sync() syscall and print the caller pid

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'tracepoint:syscalls:sys_enter_sync { printf("PID %d called sync()\\n", pid); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_sync { printf("PID %d called sync()\n", pid); }
Attaching 1 probe...


kill process 17272
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_sync { printf(\"PID %d called sync()\\n\", pid); }", "stdout": "Attaching 1 probe...\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_sync { printf("PID %d called sync()\\n", pid); }', 'stdout': 'Attaching 1 probe...\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 15 out of 40 test cases so far.

Running test case: Trace TCP round trip time (RTT) and print the sender and receiver IP addresses and ports
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Trace TCP round trip time (RTT) and print the sender and receiver IP addresses and ports

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces TCP connections by dynamically tracing kernel functions and prints out the time, PID, and addresses and ports of the source and destination of each connection.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
  printf("Tracing tcp connections. Hit Ctrl-C to end.\n");
  printf("%-8s %-8s %-16s ", "TIME", "PID", "COMM");
  printf("%-39s %-6s %-39s %-6s\n", "SADDR", "SPORT", "DADDR", "DPORT");
}

kprobe:tcp_connect
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = bswap($dport);

    time("%H:%M:%S ");
    printf("%-8d %-16s ", pid, comm);
    printf("%-39s %-6d %-39s %-6d\n", $saddr, $lport, $daddr, $dport);
  }
}

```

example: Write a BPF code that traces TCP session lifespans and prints details of the connections, including the process ID, command, local and remote addresses and ports, and data transmission statistics.

```
#ifndef BPFTRACE_HAVE_BTF
#include <net/tcp_states.h>
#include <net/sock.h>
#include <linux/socket.h>
#include <linux/tcp.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
	printf("%-5s %-10s %-15s %-5s %-15s %-5s ", "PID", "COMM",
	    "LADDR", "LPORT", "RADDR", "RPORT");
	printf("%5s %5s %s\n", "TX_KB", "RX_KB", "MS");
}

kprobe:tcp_set_state
{
	$sk = (struct sock *)arg0;
	$newstate = arg1;

	

	// record first timestamp seen for this socket
	if ($newstate < TCP_FIN_WAIT1 && @birth[$sk] == 0) {
		@birth[$sk] = nsecs;
	}

	// record PID & comm on SYN_SENT
	if ($newstate == TCP_SYN_SENT || $newstate == TCP_LAST_ACK) {
		@skpid[$sk] = pid;
		@skcomm[$sk] = comm;
	}

	// session ended: calculate lifespan and print
	if ($newstate == TCP_CLOSE && @birth[$sk]) {
		$delta_ms = (nsecs - @birth[$sk]) / 1e6;
		$lport = $sk->__sk_common.skc_num;
		$dport = $sk->__sk_common.skc_dport;
		$dport = bswap($dport);
		$tp = (struct tcp_sock *)$sk;
		$pid = @skpid[$sk];
		$comm = @skcomm[$sk];
		if ($comm == "") {
			// not cached, use current task
			$pid = pid;
			$comm = comm;
		}

		$family = $sk->__sk_common.skc_family;
		$saddr = ntop(0);
		$daddr = ntop(0);
		if ($family == AF_INET) {
			$saddr = ntop(AF_INET, $sk->__sk_common.skc_rcv_saddr);
			$daddr = ntop(AF_INET, $sk->__sk_common.skc_daddr);
		} else {
			// AF_INET6
			$saddr = ntop(AF_INET6,
			    $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
			$daddr = ntop(AF_INET6,
			    $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
		}
		printf("%-5d %-10.10s %-15s %-5d %-15s %-6d ", $pid,
		    $comm, $saddr, $lport, $daddr, $dport);
		printf("%5d %5d %d\n", $tp->bytes_acked / 1024,
		    $tp->bytes_received / 1024, $delta_ms);

		delete(@birth[$sk]);
		delete(@skpid[$sk]);
		delete(@skcomm[$sk]);
	}
}

END
{
	clear(@birth); clear(@skpid); clear(@skcomm);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Trace TCP round trip time (RTT) and print the sender and receiver IP addresses and ports

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <net/tcp_states.h>\n#include <net/sock.h>\n#include <linux/socket.h>\n#include <linux/tcp.h>\n\nBEGIN\n{\n  printf("%-8s %-8s %-16s %-39s %-6s %-39s %-6s %-6s\\n", "TIME", "PID", "COMM", "SADDR", "SPORT", "DADDR", "DPORT", "RTT");\n}\n\nkprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET) {\n    $daddr = ntop($sk->__sk_common.skc_daddr);\n    $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n    $lport = $sk->__sk_common.skc_num;\n    $dport = $sk->__sk_common.skc_dport;\n\n    // Destination port is big endian, it must be flipped\n    $dport = bswap($dport);\n\n    @start_time[$sk] = nsecs;\n    @saddr[$sk] = $saddr;\n    @daddr[$sk] = $daddr;\n    @lport[$sk] = $lport;\n    @dport[$sk] = $dport;\n  }\n}\n\nkretprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $ret = (int) arg1;\n\n  if ($ret == 0) {\n    $rtt = (nsecs - @start_time[$sk]) / 1e6;\n\n    time("%H:%M:%S ");\n    printf("%-8d %-16s %-39s %-6d %-39s %-6d %-6d\\n", pid, comm, @saddr[$sk], @lport[$sk], @daddr[$sk], @dport[$sk], $rtt);\n\n    delete(@start_time[$sk]);\n    delete(@saddr[$sk]);\n    delete(@daddr[$sk]);\n    delete(@lport[$sk]);\n    delete(@dport[$sk]);\n  }\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/tcp_states.h>
#include <net/sock.h>
#include <linux/socket.h>
#include <linux/tcp.h>

BEGIN
{
  printf("%-8s %-8s %-16s %-39s %-6s %-39s %-6s %-6s\n", "TIME", "PID", "COMM", "SADDR", "SPORT", "DADDR", "DPORT", "RTT");
}

kprobe:tcp_v4_connect
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET) {
    $daddr = ntop($sk->__sk_common.skc_daddr);
    $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = bswap($dport);

    @start_time[$sk] = nsecs;
    @saddr[$sk] = $saddr;
    @daddr[$sk] = $daddr;
    @lport[$sk] = $lport;
    @dport[$sk] = $dport;
  }
}

kretprobe:tcp_v4_connect
{
  $sk = ((struct sock *) arg0);
  $ret = (int) arg1;

  if ($ret == 0) {
    $rtt = (nsecs - @start_time[$sk]) / 1e6;

    time("%H:%M:%S ");
    printf("%-8d %-16s %-39s %-6d %-39s %-6d %-6d\n", pid, comm, @saddr[$sk], @lport[$sk], @daddr[$sk], @dport[$sk], $rtt);

    delete(@start_time[$sk]);
    delete(@saddr[$sk]);
    delete(@daddr[$sk]);
    delete(@lport[$sk]);
    delete(@dport[$sk]);
  }
}
kill process 17279
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/tcp_states.h>\n#include <net/sock.h>\n#include <linux/socket.h>\n#include <linux/tcp.h>\n\nBEGIN\n{\n  printf(\"%-8s %-8s %-16s %-39s %-6s %-39s %-6s %-6s\\n\", \"TIME\", \"PID\", \"COMM\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\", \"RTT\");\n}\n\nkprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET) {\n    $daddr = ntop($sk->__sk_common.skc_daddr);\n    $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n    $lport = $sk->__sk_common.skc_num;\n    $dport = $sk->__sk_common.skc_dport;\n\n    // Destination port is big endian, it must be flipped\n    $dport = bswap($dport);\n\n    @start_time[$sk] = nsecs;\n    @saddr[$sk] = $saddr;\n    @daddr[$sk] = $daddr;\n    @lport[$sk] = $lport;\n    @dport[$sk] = $dport;\n  }\n}\n\nkretprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $ret = (int) arg1;\n\n  if ($ret == 0) {\n    $rtt = (nsecs - @start_time[$sk]) / 1e6;\n\n    time(\"%H:%M:%S \");\n    printf(\"%-8d %-16s %-39s %-6d %-39s %-6d %-6d\\n\", pid, comm, @saddr[$sk], @lport[$sk], @daddr[$sk], @dport[$sk], $rtt);\n\n    delete(@start_time[$sk]);\n    delete(@saddr[$sk]);\n    delete(@daddr[$sk]);\n    delete(@lport[$sk]);\n    delete(@dport[$sk]);\n  }\n}", "stdout": "", "stderr": "stdin:35:27-31: ERROR: The arg0 builtin can only be used with 'kprobes', 'uprobes' and 'usdt' probes\n  $sk = ((struct sock *) arg0);\n                          ~~~~\nstdin:36:16-20: ERROR: The arg1 builtin can only be used with 'kprobes', 'uprobes' and 'usdt' probes\n  $ret = (int) arg1;\n               ~~~~\nstdin:36:10-15: ERROR: Unknown struct/union: 'int'\n  $ret = (int) arg1;\n         ~~~~~\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/tcp_states.h>\n#include <net/sock.h>\n#include <linux/socket.h>\n#include <linux/tcp.h>\n\nBEGIN\n{\n  printf("%-8s %-8s %-16s %-39s %-6s %-39s %-6s %-6s\\n", "TIME", "PID", "COMM", "SADDR", "SPORT", "DADDR", "DPORT", "RTT");\n}\n\nkprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET) {\n    $daddr = ntop($sk->__sk_common.skc_daddr);\n    $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n    $lport = $sk->__sk_common.skc_num;\n    $dport = $sk->__sk_common.skc_dport;\n\n    // Destination port is big endian, it must be flipped\n    $dport = bswap($dport);\n\n    @start_time[$sk] = nsecs;\n    @saddr[$sk] = $saddr;\n    @daddr[$sk] = $daddr;\n    @lport[$sk] = $lport;\n    @dport[$sk] = $dport;\n  }\n}\n\nkretprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $ret = (int) arg1;\n\n  if ($ret == 0) {\n    $rtt = (nsecs - @start_time[$sk]) / 1e6;\n\n    time("%H:%M:%S ");\n    printf("%-8d %-16s %-39s %-6d %-39s %-6d %-6d\\n", pid, comm, @saddr[$sk], @lport[$sk], @daddr[$sk], @dport[$sk], $rtt);\n\n    delete(@start_time[$sk]);\n    delete(@saddr[$sk]);\n    delete(@daddr[$sk]);\n    delete(@lport[$sk]);\n    delete(@dport[$sk]);\n  }\n}', 'stdout': '', 'stderr': "stdin:35:27-31: ERROR: The arg0 builtin can only be used with 'kprobes', 'uprobes' and 'usdt' probes\n  $sk = ((struct sock *) arg0);\n                          ~~~~\nstdin:36:16-20: ERROR: The arg1 builtin can only be used with 'kprobes', 'uprobes' and 'usdt' probes\n  $ret = (int) arg1;\n               ~~~~\nstdin:36:10-15: ERROR: Unknown struct/union: 'int'\n  $ret = (int) arg1;\n         ~~~~~\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 15 out of 40 test cases so far.

Running test case: Summarize ZFS operation latency distribution as a histogram
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Summarize ZFS operation latency distribution as a histogram

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the latency of four common XFS file system operations (read, write, open, and fsync) and prints a summary of the operation latency, using the bpftrace and eBPF tools.

```
BEGIN
{
	printf("Tracing XFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:xfs_file_read_iter,
kprobe:xfs_file_write_iter,
kprobe:xfs_file_open,
kprobe:xfs_file_fsync
{
	@start[tid] = nsecs;
	@name[tid] = func;
}

kretprobe:xfs_file_read_iter,
kretprobe:xfs_file_write_iter,
kretprobe:xfs_file_open,
kretprobe:xfs_file_fsync
/@start[tid]/
{
	@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
	delete(@start[tid]);
	delete(@name[tid]);
}

END
{
	clear(@start);
	clear(@name);
}

```

example: Write a BPF code that traces block device I/O latency by calculating the time difference between the start and completion of I/O operations and storing them in a histogram.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0]/
{
	@usecs = hist((nsecs - @start[arg0]) / 1000);
	delete(@start[arg0]);
}

END
{
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Summarize ZFS operation latency distribution as a histogram

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing ZFS operation latency... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:zfs_read,\nkprobe:zfs_write,\nkprobe:zfs_open,\nkprobe:zfs_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:zfs_read,\nkretprobe:zfs_write,\nkretprobe:zfs_open,\nkretprobe:zfs_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}\n'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing ZFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:zfs_read,
kprobe:zfs_write,
kprobe:zfs_open,
kprobe:zfs_fsync
{
	@start[tid] = nsecs;
	@name[tid] = func;
}

kretprobe:zfs_read,
kretprobe:zfs_write,
kretprobe:zfs_open,
kretprobe:zfs_fsync
/@start[tid]/
{
	@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
	delete(@start[tid]);
	delete(@name[tid]);
}

END
{
	clear(@start);
	clear(@name);
}

Attaching 10 probes...
Tracing ZFS operation latency... Hit Ctrl-C to end.





kill process 17294
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing ZFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:zfs_read,\nkprobe:zfs_write,\nkprobe:zfs_open,\nkprobe:zfs_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:zfs_read,\nkretprobe:zfs_write,\nkretprobe:zfs_open,\nkretprobe:zfs_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}\n", "stdout": "Attaching 10 probes...\nTracing ZFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:4-6: WARNING: zfs_read is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:6-7: WARNING: zfs_write is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:7-8: WARNING: zfs_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:8-9: WARNING: zfs_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:13-15: WARNING: zfs_read is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:15-16: WARNING: zfs_write is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:16-17: WARNING: zfs_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: zfs_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_read, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_read, skipping.\n", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing ZFS operation latency... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:zfs_read,\nkprobe:zfs_write,\nkprobe:zfs_open,\nkprobe:zfs_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:zfs_read,\nkretprobe:zfs_write,\nkretprobe:zfs_open,\nkretprobe:zfs_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}\n', 'stdout': 'Attaching 10 probes...\nTracing ZFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n', 'stderr': 'stdin:4-6: WARNING: zfs_read is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:6-7: WARNING: zfs_write is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:7-8: WARNING: zfs_open is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:8-9: WARNING: zfs_fsync is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:13-15: WARNING: zfs_read is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:15-16: WARNING: zfs_write is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:16-17: WARNING: zfs_open is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:17-18: WARNING: zfs_fsync is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_read, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_read, skipping.\n', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 16 out of 40 test cases so far.

Running test case: Counts swapins by process, to show which process is affected by swapping
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

Counts swapins by process, to show which process is affected by swapping

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that monitors the swapins by process.

```
kprobe:swap_readpage
{
        @[comm, pid] = count();
}

interval:s:1
{
        time();
        print(@);
        clear(@);
}

```

example: Write a BPF code that counts the number of system calls and the number of processes. It also prints the top 10 system call IDs and the top 10 processes at the end.

```
BEGIN
{
	printf("Counting syscalls... Hit Ctrl-C to end.\n");
	// ausyscall --dump | awk 'NR > 1 { printf("\t@sysname[%d] = \"%s\";\n", $1, $2); }'
}

tracepoint:raw_syscalls:sys_enter
{
	@syscall[args.id] = count();
	@process[comm] = count();
}

END
{
	printf("\nTop 10 syscalls IDs:\n");
	print(@syscall, 10);
	clear(@syscall);

	printf("\nTop 10 processes:\n");
	print(@process, 10);
	clear(@process);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

Counts swapins by process, to show which process is affected by swapping

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'kprobe:swap_readpage { @[comm] = count(); } interval:s:1 { print(@); clear(@); }'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:swap_readpage { @[comm] = count(); } interval:s:1 { print(@); clear(@); }
Attaching 2 probes...






















kill process 17309
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:swap_readpage { @[comm] = count(); } interval:s:1 { print(@); clear(@); }", "stdout": "Attaching 2 probes...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "stderr": "", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:swap_readpage { @[comm] = count(); } interval:s:1 { print(@); clear(@); }', 'stdout': 'Attaching 2 probes...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'stderr': '', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 17 out of 40 test cases so far.

Running test case: traces the kernel function performing active TCP connections(eg, via a connect() syscall; accept() are passive connections).
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

traces the kernel function performing active TCP connections(eg, via a connect() syscall; accept() are passive connections).

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces TCP accept()s by dynamically tracing the kernel inet_csk_accept() socket function and prints information such as the time, process ID, communication, remote and local addresses and ports, and backlog length.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
	printf("Tracing TCP accepts. Hit Ctrl-C to end.\n");
	printf("%-8s %-6s %-14s ", "TIME", "PID", "COMM");
	printf("%-39s %-5s %-39s %-5s %s\n", "RADDR", "RPORT", "LADDR",
	    "LPORT", "BL");
}

kretprobe:inet_csk_accept
{
	$sk = (struct sock *)retval;
	$inet_family = $sk->__sk_common.skc_family;

	if ($inet_family == AF_INET || $inet_family == AF_INET6) {
		// initialize variable type:
		$daddr = ntop(0);
		$saddr = ntop(0);
		if ($inet_family == AF_INET) {
			$daddr = ntop($sk->__sk_common.skc_daddr);
			$saddr = ntop($sk->__sk_common.skc_rcv_saddr);
		} else {
			$daddr = ntop(
			    $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
			$saddr = ntop(
			    $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
		}
		$lport = $sk->__sk_common.skc_num;
		$dport = $sk->__sk_common.skc_dport;
		$qlen  = $sk->sk_ack_backlog;
		$qmax  = $sk->sk_max_ack_backlog;

		// Destination port is big endian, it must be flipped
		$dport = bswap($dport);

		time("%H:%M:%S ");
		printf("%-6d %-14s ", pid, comm);
		printf("%-39s %-5d %-39s %-5d ", $daddr, $dport, $saddr,
		    $lport);
		printf("%d/%d\n", $qlen, $qmax);
	}
}

```

example: Write a BPF code that traces TCP connections by dynamically tracing kernel functions and prints out the time, PID, and addresses and ports of the source and destination of each connection.

```
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif

BEGIN
{
  printf("Tracing tcp connections. Hit Ctrl-C to end.\n");
  printf("%-8s %-8s %-16s ", "TIME", "PID", "COMM");
  printf("%-39s %-6s %-39s %-6s\n", "SADDR", "SPORT", "DADDR", "DPORT");
}

kprobe:tcp_connect
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = bswap($dport);

    time("%H:%M:%S ");
    printf("%-8d %-16s ", pid, comm);
    printf("%-39s %-6d %-39s %-6d\n", $saddr, $lport, $daddr, $dport);
  }
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

traces the kernel function performing active TCP connections(eg, via a connect() syscall; accept() are passive connections).

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': '#include <net/sock.h>\n#include <bcc/proto.h>\n\nBEGIN\n{\n  printf("Tracing active TCP connections. Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %-39s %-6s %-39s %-6s\\n", "TIME", "PID", "COMM", "SADDR", "SPORT", "DADDR", "DPORT");\n}\n\nkprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $daddr = ntop($sk->__sk_common.skc_daddr);\n  $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n  $lport = $sk->__sk_common.skc_num;\n  $dport = $sk->__sk_common.skc_dport;\n\n  // Destination port is big endian, it must be flipped\n  $dport = bswap($dport);\n\n  time("%H:%M:%S ");\n  printf("%-6d %-16s %-39s %-6d %-39s %-6d\\n", pid, comm, $saddr, $lport, $daddr, $dport);\n}'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>
#include <bcc/proto.h>

BEGIN
{
  printf("Tracing active TCP connections. Hit Ctrl-C to end.\n");
  printf("%-8s %-6s %-16s %-39s %-6s %-39s %-6s\n", "TIME", "PID", "COMM", "SADDR", "SPORT", "DADDR", "DPORT");
}

kprobe:tcp_v4_connect
{
  $sk = ((struct sock *) arg0);
  $daddr = ntop($sk->__sk_common.skc_daddr);
  $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
  $lport = $sk->__sk_common.skc_num;
  $dport = $sk->__sk_common.skc_dport;

  // Destination port is big endian, it must be flipped
  $dport = bswap($dport);

  time("%H:%M:%S ");
  printf("%-6d %-16s %-39s %-6d %-39s %-6d\n", pid, comm, $saddr, $lport, $daddr, $dport);
}
kill process 17317
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>\n#include <bcc/proto.h>\n\nBEGIN\n{\n  printf(\"Tracing active TCP connections. Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-6s %-16s %-39s %-6s %-39s %-6s\\n\", \"TIME\", \"PID\", \"COMM\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\");\n}\n\nkprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $daddr = ntop($sk->__sk_common.skc_daddr);\n  $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n  $lport = $sk->__sk_common.skc_num;\n  $dport = $sk->__sk_common.skc_dport;\n\n  // Destination port is big endian, it must be flipped\n  $dport = bswap($dport);\n\n  time(\"%H:%M:%S \");\n  printf(\"%-6d %-16s %-39s %-6d %-39s %-6d\\n\", pid, comm, $saddr, $lport, $daddr, $dport);\n}", "stdout": "", "stderr": "/lib/modules/6.2.0-32-generic/build/arch/x86/include/asm/processor.h:497:17: warning: taking address of packed member 'sp0' of class or structure 'x86_hw_tss' may result in an unaligned pointer value [-Waddress-of-packed-member]\n/lib/modules/6.2.0-32-generic/build/include/linux/cgroup-defs.h:537:16: warning: field 'cgrp' with variable sized type 'struct cgroup' not at the end of a struct or class is a GNU extension [-Wgnu-variable-sized-type-not-at-end]\ndefinitions.h:3:10: fatal error: 'bcc/proto.h' file not found\n", "returncode": 1}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e #include <net/sock.h>\n#include <bcc/proto.h>\n\nBEGIN\n{\n  printf("Tracing active TCP connections. Hit Ctrl-C to end.\\n");\n  printf("%-8s %-6s %-16s %-39s %-6s %-39s %-6s\\n", "TIME", "PID", "COMM", "SADDR", "SPORT", "DADDR", "DPORT");\n}\n\nkprobe:tcp_v4_connect\n{\n  $sk = ((struct sock *) arg0);\n  $daddr = ntop($sk->__sk_common.skc_daddr);\n  $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n  $lport = $sk->__sk_common.skc_num;\n  $dport = $sk->__sk_common.skc_dport;\n\n  // Destination port is big endian, it must be flipped\n  $dport = bswap($dport);\n\n  time("%H:%M:%S ");\n  printf("%-6d %-16s %-39s %-6d %-39s %-6d\\n", pid, comm, $saddr, $lport, $daddr, $dport);\n}', 'stdout': '', 'stderr': "/lib/modules/6.2.0-32-generic/build/arch/x86/include/asm/processor.h:497:17: warning: taking address of packed member 'sp0' of class or structure 'x86_hw_tss' may result in an unaligned pointer value [-Waddress-of-packed-member]\n/lib/modules/6.2.0-32-generic/build/include/linux/cgroup-defs.h:537:16: warning: field 'cgrp' with variable sized type 'struct cgroup' not at the end of a struct or class is a GNU extension [-Wgnu-variable-sized-type-not-at-end]\ndefinitions.h:3:10: fatal error: 'bcc/proto.h' file not found\n", 'returncode': 1}
Test case completed. Output saved to: output.json

Passed 17 out of 40 test cases so far.

Running test case: traces XFS reads, writes, opens, and fsyncs, and summarizes their latency as a power-of-2 histogram.
Output will be saved to: output.json
input prompt:  
Write a bpftrace program that traces or profile the following user request:

### User Request

traces XFS reads, writes, opens, and fsyncs, and summarizes their latency as a power-of-2 histogram.

### Examples

Here are some simple examples to help you get started with bpftrace:


Below are some simple examples of bpftrace usage:

# trace processes calling sleep
'kprobe:do_nanosleep { printf("PID %d sleeping...
", pid); }'

# count syscalls by process name
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Files opened by process
'tracepoint:syscalls:sys_enter_open { printf("%s %s
", comm, str(args->filename)); }'

# Syscall count by program
'tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }'

# Read bytes by process:
'tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }'

# Read size distribution by process:
'tracepoint:syscalls:sys_exit_read { @[comm] = hist(args->ret); }'

# Show per-second syscall rates:
'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

# Trace disk size by process
'tracepoint:block:block_rq_issue { printf("%d %s %d
", pid, comm, args->bytes); }'

# Count page faults by process
'software:faults:1 { @[comm] = count(); }'

# Count LLC cache misses by process name and PID (uses PMCs):
'hardware:cache-misses:1000000 { @[comm, pid] = count(); }'

# Profile user-level stacks at 99 Hertz, for PID 189:
'profile:hz:99 /pid == 189/ { @[ustack] = count(); }'

# Files opened, for processes in the root cgroup-v2
'tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid("/sys/fs/cgroup/unified/mycg")/ { printf("%s
", str(args->filename)); }'



Here are some complex examples may be related to your user request:

example: Write a BPF code that traces the latency of four common XFS file system operations (read, write, open, and fsync) and prints a summary of the operation latency, using the bpftrace and eBPF tools.

```
BEGIN
{
	printf("Tracing XFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:xfs_file_read_iter,
kprobe:xfs_file_write_iter,
kprobe:xfs_file_open,
kprobe:xfs_file_fsync
{
	@start[tid] = nsecs;
	@name[tid] = func;
}

kretprobe:xfs_file_read_iter,
kretprobe:xfs_file_write_iter,
kretprobe:xfs_file_open,
kretprobe:xfs_file_fsync
/@start[tid]/
{
	@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
	delete(@start[tid]);
	delete(@name[tid]);
}

END
{
	clear(@start);
	clear(@name);
}

```

example: Write a BPF code that traces block device I/O latency by calculating the time difference between the start and completion of I/O operations and storing them in a histogram.

```
BEGIN
{
	printf("Tracing block device I/O... Hit Ctrl-C to end.\n");
}

kprobe:blk_account_io_start,
kprobe:__blk_account_io_start
{
	@start[arg0] = nsecs;
}

kprobe:blk_account_io_done,
kprobe:__blk_account_io_done
/@start[arg0]/
{
	@usecs = hist((nsecs - @start[arg0]) / 1000);
	delete(@start[arg0]);
}

END
{
	clear(@start);
}

```


You can refer to the above examples to write your own bpftrace program to help user with:

traces XFS reads, writes, opens, and fsyncs, and summarizes their latency as a power-of-2 histogram.

Use a tool provided to execute your bpftrace program.
You should only write the bpftrace program itself. 
 

{'prog': 'BEGIN\n{\n\tprintf("Tracing XFS operation latency... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:xfs_file_read_iter,\nkprobe:xfs_file_write_iter,\nkprobe:xfs_file_open,\nkprobe:xfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:xfs_file_read_iter,\nkretprobe:xfs_file_write_iter,\nkretprobe:xfs_file_open,\nkretprobe:xfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}\n'}
The bpf program to run is: sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN
{
	printf("Tracing XFS operation latency... Hit Ctrl-C to end.\n");
}

kprobe:xfs_file_read_iter,
kprobe:xfs_file_write_iter,
kprobe:xfs_file_open,
kprobe:xfs_file_fsync
{
	@start[tid] = nsecs;
	@name[tid] = func;
}

kretprobe:xfs_file_read_iter,
kretprobe:xfs_file_write_iter,
kretprobe:xfs_file_open,
kretprobe:xfs_file_fsync
/@start[tid]/
{
	@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);
	delete(@start[tid]);
	delete(@name[tid]);
}

END
{
	clear(@start);
	clear(@name);
}

Attaching 10 probes...
Tracing XFS operation latency... Hit Ctrl-C to end.





kill process 17329
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing XFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:xfs_file_read_iter,\nkprobe:xfs_file_write_iter,\nkprobe:xfs_file_open,\nkprobe:xfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:xfs_file_read_iter,\nkretprobe:xfs_file_write_iter,\nkretprobe:xfs_file_open,\nkretprobe:xfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}\n", "stdout": "Attaching 10 probes...\nTracing XFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:4-6: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:6-7: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:7-8: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:8-9: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:13-15: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:15-16: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:16-17: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_read_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_read_iter, skipping.\n", "returncode": 0}
{'command': 'sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf("Tracing XFS operation latency... Hit Ctrl-C to end.\\n");\n}\n\nkprobe:xfs_file_read_iter,\nkprobe:xfs_file_write_iter,\nkprobe:xfs_file_open,\nkprobe:xfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:xfs_file_read_iter,\nkretprobe:xfs_file_write_iter,\nkretprobe:xfs_file_open,\nkretprobe:xfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}\n', 'stdout': 'Attaching 10 probes...\nTracing XFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n', 'stderr': 'stdin:4-6: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:6-7: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:7-8: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:8-9: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:13-15: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:15-16: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:16-17: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\nstdin:17-18: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as "notrace"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_read_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_read_iter, skipping.\n', 'returncode': 0}
Test case completed. Output saved to: output.json

Passed 18 out of 40 test cases so far.

