{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n    printf(\"Tracing hardware interrupts... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:irq:irq_handler_entry\n{\n    printf(\"Interrupt source: %s\\n\", str(args->irq_desc));\n}\n", "stdout": "", "stderr": "stdin:8:38-56: ERROR: Struct/union of type 'struct _tracepoint_irq_irq_handler_entry' does not contain a field named 'irq_desc'\n    printf(\"Interrupt source: %s\\n\", str(args->irq_desc));\n                                     ~~~~~~~~~~~~~~~~~~\nstdin:8:38-57: ERROR: str() expects an integer or a pointer type as first argument (none provided)\n    printf(\"Interrupt source: %s\\n\", str(args->irq_desc));\n                                     ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"%-10s %-5s %s\\n\", \"TIME(ms)\", \"PID\", \"ARGS\");\n}\n\ntracepoint:syscalls:sys_enter_exec*\n{\n\tprintf(\"%-10u %-5d \", elapsed / 1e6, pid);\n\tjoin(args.argv);\n}", "stdout": "", "stderr": "stdin:9:2-12: ERROR: Can not access field 'argv' on type '(ctx) struct _tracepoint_syscalls_sys_enter_execve *'. Try dereferencing it first, or using '->'\n    join(args.argv);\n    ~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n  printf(\"Tracing memory allocations... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:kmalloc\n{\n  @[kstack] = hist(args[0]->size);\n}\n\nEND\n{\n  printf(\"\\nAllocation size histograms by kernel stack:\\n\");\n}", "stdout": "", "stderr": "stdin:8:15-24: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (kprobe used here)\n  @[kstack] = hist(args[0]->size);\n              ~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_open { printf(\"%s %s\n\", comm, str(args->filename)); }", "stdout": "", "stderr": "stdin:1:38-52: ERROR: unterminated string\ntracepoint:syscalls:sys_enter_open { printf(\"%s %s\n                                     ~~~~~~~~~~~~~\nstdin:2:1-33: ERROR: unterminated string\n\", comm, str(args->filename)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:2:1-33: ERROR: syntax error, unexpected end of file\n\", comm, str(args->filename)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing signals... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %-4s %-6s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"SIG\", \"TPID\", \"RESULT\");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid], args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}", "stdout": "", "stderr": "stdin:9:15-20: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tpid[tid] = args.pid;\n                 ~~~~~\nstdin:10:15-20: ERROR: Can not access field 'sig' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tsig[tid] = args.sig;\n                 ~~~~~\nstdin:17:73-78: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_kill *'. Try dereferencing it first, or using '->'\n    printf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid], args.ret);\n                                                                           ~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter { if (pid == 1234 && (retval == -2 || retval == -13)) { @errors = count(); } } interval:s:1 { printf(\"Process 1234: Error rate: %d/s\\n\", @errors); clear(@errors); }", "stdout": "", "stderr": "stdin:1:1-30: ERROR: tracepoint not found: syscalls:sys_enter\ntracepoint:syscalls:sys_enter { if (pid == 1234 && (retval == -2 || retval == -13)) { @errors = count(); } } interval:s:1 { printf(\"Process 1234: Error rate: %d/s\\n\", @errors); clear(@errors); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:tcp_v4_syn_recv_sock,kprobe:tcp_v6_syn_recv_sock { printf(\"Source IP: %s, Source Port: %d, Destination IP: %s, Destination Port: %d\\n\", ntop(arg1), arg2, ntop(arg3), arg4); }", "stdout": "Attaching 2 probes...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Monitoring system calls... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:raw_syscalls:sys_enter\n{\n\t@[comm] = count();\n}\n\nEND\n{\n\tprintf(\"\\nHeavily used system calls:\\n\");\n\tprint(@, 10);\n}", "stdout": "Attaching 3 probes...\nMonitoring system calls... Hit Ctrl-C to end.\n\nHeavily used system calls:\n@[systemd-timesyn]: 20\n@[systemd]: 28\n@[irqbalance]: 28\n@[multipathd]: 136\n@[cpptools]: 162\n@[bpftrace]: 200\n@[vmtoolsd]: 1577\n@[sshd]: 1889\n@[containerd]: 4353\n@[node]: 9370\n\n\n@[python3]: 1\n@[systemd-journal]: 5\n@[timeout]: 9\n@[systemd-resolve]: 15\n@[systemd-network]: 15\n@[dockerd]: 17\n@[HangDetector]: 20\n@[systemd-timesyn]: 20\n@[systemd]: 28\n@[irqbalance]: 28\n@[multipathd]: 136\n@[cpptools]: 162\n@[bpftrace]: 200\n@[vmtoolsd]: 1577\n@[sshd]: 1889\n@[containerd]: 4353\n@[node]: 9370\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }", "stdout": "Attaching 2 probes...\n@: 861\n@: 555\n@: 588\n@: 719\n@: 1120\n@: 641\n@: 559\n@: 652\n@: 516\n@: 684\n@: 521\n@: 604\n@: 785\n@: 586\n@: 603\n@: 687\n@: 550\n@: 666\n@: 527\n\n\n@: 499\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:inet_csk_accept { printf(\"Socket Type: %s, PID: %d\\n\", args->sk->__sk_common.skc_family == AF_INET ? \"IPv4\" : \"IPv6\", pid); }", "stdout": "", "stderr": "stdin:1:63-67: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (kprobe used here)\nkprobe:inet_csk_accept { printf(\"Socket Type: %s, PID: %d\\n\", args->sk->__sk_common.skc_family == AF_INET ? \"IPv4\" : \"IPv6\", pid); }\n                                                              ~~~~\nstdin:1:99-106: ERROR: Unknown identifier: 'AF_INET'\nkprobe:inet_csk_accept { printf(\"Socket Type: %s, PID: %d\\n\", args->sk->__sk_common.skc_family == AF_INET ? \"IPv4\" : \"IPv6\", pid); }\n                                                                                                  ~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing file I/O... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:syscalls:sys_enter_read\n{\n\t@[args->filename] = hist(args->count);\n}\n\ntracepoint:syscalls:sys_enter_write\n{\n\t@[args->filename] = hist(args->count);\n}\n\nEND\n{\n\tprintf(\"\\nI/O size distribution by file:\\n\");\n}", "stdout": "", "stderr": "stdin:8:2-18: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_read' does not contain a field named 'filename'\n    @[args->filename] = hist(args->count);\n    ~~~~~~~~~~~~~~~~\nstdin:13:2-18: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_write' does not contain a field named 'filename'\n    @[args->filename] = hist(args->count);\n    ~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_exit_read /args->ret/ { @[comm] = sum(args->ret); }", "stdout": "Attaching 1 probe...\n\n\n@[dockerd]: 1\n@[systemd-udevd]: 8\n@[systemd-journal]: 8\n@[containerd]: 14\n@[systemd]: 44\n@[cpptools]: 340\n@[sleep]: 832\n@[sshd]: 9870\n@[irqbalance]: 14336\n@[vmtoolsd]: 20246\n@[node]: 23090\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:net_namespace_create { printf(\"Network namespace created: %s\\n\", str(arg1)); }\nkprobe:net_namespace_destroy { printf(\"Network namespace destroyed: %s\\n\", str(arg1)); }", "stdout": "Attaching 2 probes...\n", "stderr": "stdin:1:1-28: WARNING: net_namespace_create is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nkprobe:net_namespace_create { printf(\"Network namespace created: %s\\n\", str(arg1)); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:1-2: WARNING: net_namespace_destroy is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kprobe:net_namespace_destroy'\n", "returncode": 255}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing open syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-6s %-16s %4s %3s %s\\n\", \"PID\", \"COMM\", \"FD\", \"ERR\", \"PATH\");\n}\n\ntracepoint:syscalls:sys_enter_open,\ntracepoint:syscalls:sys_enter_openat\n{\n\t@filename[tid] = args.filename;\n}\n\ntracepoint:syscalls:sys_exit_open,\ntracepoint:syscalls:sys_exit_openat\n/@filename[tid]/\n{\n\t$ret = args.ret;\n\t$fd = $ret >= 0 ? $ret : -1;\n\t$errno = $ret >= 0 ? 0 : - $ret;\n\n\tprintf(\"%-6d %-16s %4d %3d %s\\n\", pid, comm, $fd, $errno,\n\t    str(@filename[tid]));\n\tdelete(@filename[tid]);\n}\n\nEND\n{\n\tclear(@filename);\n}", "stdout": "", "stderr": "stdin:10:19-24: ERROR: Can not access field 'filename' on type '(ctx) struct _tracepoint_syscalls_sys_enter_openat *'. Try dereferencing it first, or using '->'\n    @filename[tid] = args.filename;\n                     ~~~~~\nstdin:17:9-14: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_openat *'. Try dereferencing it first, or using '->'\n    $ret = args.ret;\n           ~~~~~\nstdin:22:6-25: ERROR: str() expects an integer or a pointer type as first argument (none provided)\n        str(@filename[tid]));\n        ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:hardware:cache-misses { @[comm] = count(); }", "stdout": "", "stderr": "stdin:1:1-33: ERROR: tracepoint not found: hardware:cache-misses\ntracepoint:hardware:cache-misses { @[comm] = count(); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e software:faults:1 { @[comm] = count(); }", "stdout": "Attaching 1 probe...\n\n\n@[timeout]: 3\n@[cpptools]: 8\n@[python3]: 89\n@[git]: 2990\n@[node]: 31487\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing bash commands... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %s\\n\", \"TIME\", \"PID\", \"COMMAND\");\n}\n\nuretprobe:/bin/bash:readline\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %s\\n\", pid, str(retval));\n}", "stdout": "Attaching 2 probes...\nTracing bash commands... Hit Ctrl-C to end.\nTIME      PID    COMMAND\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/fs.h>\n#include <linux/sched.h>\n\n// from fs/namei.c:\nstruct nameidata {\n        struct path     path;\n        struct qstr     last;\n        // [...]\n};\n#endif\n\nBEGIN\n{\n\tprintf(\"Tracing dcache lookups... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-8s %-6s %-16s %1s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"T\", \"FILE\");\n}\n\n// comment out this block to avoid showing hits:\nkprobe:lookup_fast,\nkprobe:lookup_fast.constprop.*\n{\n\t$nd = (struct nameidata *)arg0;\n\tprintf(\"%-8d %-6d %-16s R %s\\n\", elapsed / 1e6, pid, comm,\n\t    str($nd->last.name));\n}\n\nkprobe:d_lookup\n{\n\t$name = (struct qstr *)arg1;\n\t@fname[tid] = $name->name;\n}\n\nkretprobe:d_lookup\n/@fname[tid]/\n{\n\tprintf(\"%-8d %-6d %-16s M %s\\n\", elapsed / 1e6, pid, comm,\n\t    str(@fname[tid]));\n\tdelete(@fname[tid]);\n}", "stdout": "", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing md flush events... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-8s %-6s %-16s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"DEVICE\");\n}\n\nkprobe:md_flush_request\n{\n\ttime(\"%H:%M:%S \");\n\tprintf(\"%-6d %-16s %s\\n\", pid, comm, ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);\n}", "stdout": "Attaching 2 probes...\nTracing md flush events... Hit Ctrl-C to end.\nTIME     PID    COMM             DEVICE\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n\tprintf(\"Tracing CPU scheduler... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:sched:sched_wakeup,\ntracepoint:sched:sched_wakeup_new\n{\n\t@qtime[args.pid] = nsecs;\n}\n\ntracepoint:sched:sched_switch\n{\n\tif (args.prev_state == TASK_RUNNING) {\n\t\t@qtime[args.prev_pid] = nsecs;\n\t}\n\n\t$ns = @qtime[args.next_pid];\n\tif ($ns) {\n\t\t@usecs = hist((nsecs - $ns) / 1000);\n\t}\n\tdelete(@qtime[args.next_pid]);\n}\n\nEND\n{\n\tclear(@qtime);\n}", "stdout": "", "stderr": "stdin:11:2-14: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_sched_sched_wakeup_new *'. Try dereferencing it first, or using '->'\n    @qtime[args.pid] = nsecs;\n    ~~~~~~~~~~~~\nstdin:16:5-11: ERROR: Can not access field 'prev_state' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    if (args.prev_state == TASK_RUNNING) {\n       ~~~~~~\nstdin:17:3-15: ERROR: Can not access field 'prev_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n        @qtime[args.prev_pid] = nsecs;\n        ~~~~~~~~~~~~\nstdin:20:8-20: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    $ns = @qtime[args.next_pid];\n          ~~~~~~~~~~~~\nstdin:24:2-21: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    delete(@qtime[args.next_pid]);\n    ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/sched.h>\n\n// Until BTF is available, we'll need to declare some of this struct manually,\n// since it isn't available to be #included. This will need maintenance to match\n// your kernel version. It is from kernel/sched/sched.h:\nstruct cfs_rq {\n\tstruct load_weight load;\n\tunsigned long runnable_weight;\n\tunsigned int nr_running;\n\tunsigned int h_nr_running;\n};\n#endif\n\nBEGIN\n{\n\tprintf(\"Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\\n\");\n}\n\nprofile:hz:99\n{\n\t$task = (struct task_struct *)curtask;\n\t$my_q = (struct cfs_rq *)$task->se.cfs_rq;\n\t$len = $my_q->nr_running;\n\t$len = $len > 0 ? $len - 1 : 0;\t// subtract currently running task\n\t@runqlen = lhist($len, 0, 100, 1);\n}", "stdout": "Attaching 2 probes...\nSampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n\n\n@runqlen: \n[0, 1)              3381 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[1, 2)               459 |@@@@@@@                                             |\n[2, 3)                18 |                                                    |\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"%-10s %-6s %-16s %s\\n\", \"TIME(ms)\", \"PID\", \"COMM\", \"FUNC\");\n}\n\nuprobe:libpthread:pthread_create,\nuprobe:libc:pthread_create\n{\n\tprintf(\"%-10u %-6d %-16s %s\\n\", elapsed / 1e6, pid, comm,\n\t    usym(arg2));\n}", "stdout": "Attaching 2 probes...\nTIME(ms)   PID    COMM             FUNC\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kvm_exit { printf(\"exit_reason: %d\\n\", args->exit_reason); @[args->exit_reason] = count(); }", "stdout": "", "stderr": "stdin:1:47-51: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (kprobe used here)\nkprobe:kvm_exit { printf(\"exit_reason: %d\\n\", args->exit_reason); @[args->exit_reason] = count(); }\n                                              ~~~~\nstdin:1:67-73: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (kprobe used here)\nkprobe:kvm_exit { printf(\"exit_reason: %d\\n\", args->exit_reason); @[args->exit_reason] = count(); }\n                                                                  ~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_mount { printf(\"PID %d mount syscall\\n\", pid); }\ntracepoint:syscalls:sys_enter_umount { printf(\"PID %d umount syscall\\n\", pid); }", "stdout": "Attaching 2 probes...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:bpf_jit_compile { printf(\"BPF JIT compile event\\n\"); }", "stdout": "Attaching 1 probe...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/blkdev.h>\n#include <linux/blk-mq.h>\n#endif\n\nBEGIN\n{\n\tprintf(\"%-12s %-7s %-16s %-6s %7s\\n\", \"TIME(ms)\", \"DISK\", \"COMM\", \"PID\", \"LAT(ms)\");\n}\n\nkprobe:blk_account_io_start,\nkprobe:__blk_account_io_start\n{\n\t@start[arg0] = nsecs;\n\t@iopid[arg0] = pid;\n\t@iocomm[arg0] = comm;\n\t@disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;\n}\n\nkprobe:blk_account_io_done,\nkprobe:__blk_account_io_done\n/@start[arg0] != 0 && @iopid[arg0] != 0 && @iocomm[arg0] != \"\"/\n\n{\n\t$now = nsecs;\n\tprintf(\"%-12u %-7s %-16s %-6d %7d\\n\",\n\t    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],\n\t    ($now - @start[arg0]) / 1e6);\n\n\tdelete(@start[arg0]);\n\tdelete(@iopid[arg0]);\n\tdelete(@iocomm[arg0]);\n\tdelete(@disk[arg0]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@iopid);\n\tclear(@iocomm);\n\tclear(@disk);\n}", "stdout": "Attaching 6 probes...\nTIME(ms)     DISK    COMM             PID    LAT(ms)\n\n\n\n\n\n\n", "stderr": "stdin:9-11: WARNING: blk_account_io_start is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:11-12: WARNING: __blk_account_io_start is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:18-20: WARNING: blk_account_io_done is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:blk_account_io_done, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:__blk_account_io_start, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:blk_account_io_start, skipping.\n", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:btrfs_* { printf(\"%s\\n\", probe); }", "stdout": "", "stderr": "ERROR: Failed to compile: Your program is trying to generate more than 1159 BPF programs, which exceeds the current limit of 512.\nYou can increase the limit through the BPFTRACE_MAX_BPF_PROGS environment variable.\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing cap_capable syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\\n\", \"TIME\", \"UID\", \"PID\",\n\t    \"COMM\", \"CAP\", \"NAME\");\n\t@cap[0] = \"CAP_CHOWN\";\n\t@cap[1] = \"CAP_DAC_OVERRIDE\";\n\t@cap[2] = \"CAP_DAC_READ_SEARCH\";\n\t@cap[3] = \"CAP_FOWNER\";\n\t@cap[4] = \"CAP_FSETID\";\n\t@cap[5] = \"CAP_KILL\";\n\t@cap[6] = \"CAP_SETGID\";\n\t@cap[7] = \"CAP_SETUID\";\n\t@cap[8] = \"CAP_SETPCAP\";\n\t@cap[9] = \"CAP_LINUX_IMMUTABLE\";\n\t@cap[10] = \"CAP_NET_BIND_SERVICE\";\n\t@cap[11] = \"CAP_NET_BROADCAST\";\n\t@cap[12] = \"CAP_NET_ADMIN\";\n\t@cap[13] = \"CAP_NET_RAW\";\n\t@cap[14] = \"CAP_IPC_LOCK\";\n\t@cap[15] = \"CAP_IPC_OWNER\";\n\t@cap[16] = \"CAP_SYS_MODULE\";\n\t@cap[17] = \"CAP_SYS_RAWIO\";\n\t@cap[18] = \"CAP_SYS_CHROOT\";\n\t@cap[19] = \"CAP_SYS_PTRACE\";\n\t@cap[20] = \"CAP_SYS_PACCT\";\n\t@cap[21] = \"CAP_SYS_ADMIN\";\n\t@cap[22] = \"CAP_SYS_BOOT\";\n\t@cap[23] = \"CAP_SYS_NICE\";\n\t@cap[24] = \"CAP_SYS_RESOURCE\";\n\t@cap[25] = \"CAP_SYS_TIME\";\n\t@cap[26] = \"CAP_SYS_TTY_CONFIG\";\n\t@cap[27] = \"CAP_MKNOD\";\n\t@cap[28] = \"CAP_LEASE\";\n\t@cap[29] = \"CAP_AUDIT_WRITE\";\n\t@cap[30] = \"CAP_AUDIT_CONTROL\";\n\t@cap[31] = \"CAP_SETFCAP\";\n\t@cap[32] = \"CAP_MAC_OVERRIDE\";\n\t@cap[33] = \"CAP_MAC_ADMIN\";\n\t@cap[34] = \"CAP_SYSLOG\";\n\t@cap[35] = \"CAP_WAKE_ALARM\";\n\t@cap[36] = \"CAP_BLOCK_SUSPEND\";\n\t@cap[37] = \"CAP_AUDIT_READ\";\n\t@cap[38] = \"CAP_PERFMON\";\n\t@cap[39] = \"CAP_BPF\";\n\t@cap[40] = \"CAP_CHECKPOINT_RESTORE\";\n}\n\nkprobe:cap_capable\n{\n\t$cap = arg2;\n\t$audit = arg3;\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-6d %-16s %-4d %-20s %d\\n\", uid, pid, comm, $cap,\n\t    @cap[$cap], $audit);\n}\n\nEND\n{\n\tclear(@cap);\n}", "stdout": "Attaching 3 probes...\nTracing cap_capable syscalls... Hit Ctrl-C to end.\nTIME      UID    PID    COMM             CAP  NAME                 AUDIT\n\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:compact_zone { printf(\"PID %d compact zone event\\n\", pid); }", "stdout": "Attaching 1 probe...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:do_nanosleep { printf(\"PID %d sleeping...\\n\", pid); }", "stdout": "Attaching 1 probe...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1101 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1624 sleeping...\nPID 1172 sleeping...\nPID 442 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\nPID 1172 sleeping...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing kill() signals... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %-4s %-6s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"SIG\",\n\t    \"TPID\", \"RESULT\");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid],\n\t    args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}\n", "stdout": "", "stderr": "stdin:10:15-20: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tpid[tid] = args.pid;\n                 ~~~~~\nstdin:11:15-20: ERROR: Can not access field 'sig' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tsig[tid] = args.sig;\n                 ~~~~~\nstdin:19:6-11: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_kill *'. Try dereferencing it first, or using '->'\n        args.ret);\n        ~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:mutex_lock { @[args->name] = count(); }", "stdout": "", "stderr": "stdin:1:21-27: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (kprobe used here)\nkprobe:mutex_lock { @[args->name] = count(); }\n                    ~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:syscalls:sys_enter_shmat { printf(\"Shared memory segment size: %d\\n\", args->shmflg); }", "stdout": "Attaching 1 probe...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmalloc { @[kstack] = count(); }", "stdout": "Attaching 1 probe...\n", "stderr": "stdin:1:1-15: WARNING: kmalloc is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nkprobe:kmalloc { @[kstack] = count(); }\n~~~~~~~~~~~~~~\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kprobe:kmalloc'\n", "returncode": 255}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing sync syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"EVENT\");\n}\n\ntracepoint:syscalls:sys_enter_sync,\ntracepoint:syscalls:sys_enter_syncfs,\ntracepoint:syscalls:sys_enter_fsync,\ntracepoint:syscalls:sys_enter_fdatasync,\ntracepoint:syscalls:sys_enter_sync_file_range*,\ntracepoint:syscalls:sys_enter_msync\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %s\\n\", pid, comm, probe);\n}", "stdout": "Attaching 7 probes...\nTracing sync syscalls... Hit Ctrl-C to end.\nTIME      PID    COMM             EVENT\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"%-8s %-8s %-16s \", \"TIME\", \"PID\", \"COMM\"); printf(\"%-39s %-6s %-39s %-6s\\n\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\"); } kprobe:tcp_connect { $sk = ((struct sock *) arg0); $inet_family = $sk->__sk_common.skc_family; if ($inet_family == AF_INET || $inet_family == AF_INET6) { if ($inet_family == AF_INET) { $daddr = ntop($sk->__sk_common.skc_daddr); $saddr = ntop($sk->__sk_common.skc_rcv_saddr); } else { $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8); $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8); } $lport = $sk->__sk_common.skc_num; $dport = $sk->__sk_common.skc_dport; $dport = bswap($dport); time(\"%H:%M:%S \"); printf(\"%-8d %-16s \", pid, comm); printf(\"%-39s %-6d %-39s %-6d\\n\", $saddr, $lport, $daddr, $dport); } }", "stdout": "", "stderr": "stdin:1:249-256: ERROR: Unknown identifier: 'AF_INET'\nBEGIN { printf(\"%-8s %-8s %-16s \", \"TIME\", \"PID\", \"COMM\"); printf(\"%-39s %-6s %-39s %-6s\\n\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\"); } kprobe:tcp_connect { $sk = ((struct sock *) arg0); $inet_family = $sk->__sk_common.skc_family; if ($inet_family == AF_INET || $inet_family == AF_INET6) { if ($inet_family == AF_INET) { $daddr = ntop($sk->__sk_common.skc_daddr); $saddr = ntop($sk->__sk_common.skc_rcv_saddr); } else { $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8); $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8); } $lport = $sk->__sk_common.skc_num; $dport = $sk->__sk_common.skc_dport; $dport = bswap($dport); time(\"%H:%M:%S \"); printf(\"%-8d %-16s \", pid, comm); printf(\"%-39s %-6d %-39s %-6d\\n\", $saddr, $lport, $daddr, $dport); } }\n                                                                                                                                                                                                                                                        ~~~~~~~\nstdin:1:276-284: ERROR: Unknown identifier: 'AF_INET6'\nBEGIN { printf(\"%-8s %-8s %-16s \", \"TIME\", \"PID\", \"COMM\"); printf(\"%-39s %-6s %-39s %-6s\\n\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\"); } kprobe:tcp_connect { $sk = ((struct sock *) arg0); $inet_family = $sk->__sk_common.skc_family; if ($inet_family == AF_INET || $inet_family == AF_INET6) { if ($inet_family == AF_INET) { $daddr = ntop($sk->__sk_common.skc_daddr); $saddr = ntop($sk->__sk_common.skc_rcv_saddr); } else { $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8); $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8); } $lport = $sk->__sk_common.skc_num; $dport = $sk->__sk_common.skc_dport; $dport = bswap($dport); time(\"%H:%M:%S \"); printf(\"%-8d %-16s \", pid, comm); printf(\"%-39s %-6d %-39s %-6d\\n\", $saddr, $lport, $daddr, $dport); } }\n                                                                                                                                                                                                                                                                                   ~~~~~~~~\nstdin:1:308-315: ERROR: Unknown identifier: 'AF_INET'\nBEGIN { printf(\"%-8s %-8s %-16s \", \"TIME\", \"PID\", \"COMM\"); printf(\"%-39s %-6s %-39s %-6s\\n\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\"); } kprobe:tcp_connect { $sk = ((struct sock *) arg0); $inet_family = $sk->__sk_common.skc_family; if ($inet_family == AF_INET || $inet_family == AF_INET6) { if ($inet_family == AF_INET) { $daddr = ntop($sk->__sk_common.skc_daddr); $saddr = ntop($sk->__sk_common.skc_rcv_saddr); } else { $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8); $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8); } $lport = $sk->__sk_common.skc_num; $dport = $sk->__sk_common.skc_dport; $dport = bswap($dport); time(\"%H:%M:%S \"); printf(\"%-8d %-16s \", pid, comm); printf(\"%-39s %-6d %-39s %-6d\\n\", $saddr, $lport, $daddr, $dport); } }\n                                                                                                                                                                                                                                                                                                                   ~~~~~~~\n", "returncode": 1}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing ZFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:zfs_vnop_read,\nkprobe:zfs_vnop_write,\nkprobe:zfs_vnop_open,\nkprobe:zfs_vnop_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:zfs_vnop_read,\nkretprobe:zfs_vnop_write,\nkretprobe:zfs_vnop_open,\nkretprobe:zfs_vnop_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}", "stdout": "Attaching 10 probes...\nTracing ZFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:4-6: WARNING: zfs_vnop_read is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:6-7: WARNING: zfs_vnop_write is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:7-8: WARNING: zfs_vnop_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:8-9: WARNING: zfs_vnop_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:13-15: WARNING: zfs_vnop_read is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:15-16: WARNING: zfs_vnop_write is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:16-17: WARNING: zfs_vnop_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: zfs_vnop_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_read, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_read, skipping.\n", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:swap_readpage\n{\n\t@[comm, pid] = count();\n}\n\ninterval:s:1\n{\n\ttime();\n\tprint(@);\n\tclear(@);\n}", "stdout": "Attaching 2 probes...\n10:44:37\n\n10:44:38\n\n10:44:39\n\n10:44:40\n\n10:44:41\n\n10:44:42\n\n10:44:43\n\n10:44:44\n\n10:44:45\n\n10:44:46\n\n10:44:47\n\n10:44:48\n\n10:44:49\n\n10:44:50\n\n10:44:51\n\n10:44:52\n\n10:44:53\n\n10:44:53\n\n10:44:54\n\n\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:tcp_connect { printf(\"Active TCP connection: PID %d, COMM %s, SADDR %s, SPORT %d, DADDR %s, DPORT %d\\n\", pid, comm, ntop(arg1), arg2, ntop(arg3), arg4); }", "stdout": "Attaching 1 probe...\n\n\n", "stderr": "", "returncode": 0}
{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing XFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:xfs_file_read_iter,\nkprobe:xfs_file_write_iter,\nkprobe:xfs_file_open,\nkprobe:xfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:xfs_file_read_iter,\nkretprobe:xfs_file_write_iter,\nkretprobe:xfs_file_open,\nkretprobe:xfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}", "stdout": "Attaching 10 probes...\nTracing XFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:4-6: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:6-7: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:7-8: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:8-9: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:13-15: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:15-16: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:16-17: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_read_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_read_iter, skipping.\n", "returncode": 0}