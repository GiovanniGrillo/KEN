{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing hardware interrupts... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:irq_handler_entry\n{\n\t@[irq] = count();\n}\n\ninterval:s:1\n{\n\ttime();\n\tprint(@);\n\tclear(@);\n}\n\nEND\n{\n\tclear(@);\n}", "stdout": "", "stderr": "stdin:8:2-7: ERROR: Unknown identifier: 'irq'\n    @[irq] = count();\n    ~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"%-10s %-5s %s\\n\", \"TIME(ms)\", \"PID\", \"ARGS\");\n}\n\ntracepoint:syscalls:sys_enter_exec*\n{\n\tprintf(\"%-10u %-5d \", elapsed / 1e6, pid);\n\tjoin(args.argv);\n}", "stdout": "", "stderr": "stdin:9:2-12: ERROR: Can not access field 'argv' on type '(ctx) struct _tracepoint_syscalls_sys_enter_execve *'. Try dereferencing it first, or using '->'\n    join(args.argv);\n    ~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n  printf(\"Tracing memory allocations... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:kmalloc\n{\n  @[kstack] = hist(args.size);\n}\n\nEND\n{\n  printf(\"\\nAllocation size histograms by stack trace:\\n\");\n}", "stdout": "", "stderr": "stdin:8:15-24: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (kprobe used here)\n  @[kstack] = hist(args.size);\n              ~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n  printf(\"Tracing process resource limits... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:syscalls:sys_enter_setrlimit\n{\n  printf(\"Process %s is setting resource limit %d to %d\\n\", comm, args->resource, args->rlim_new.rlim_cur);\n}\n\ntracepoint:syscalls:sys_enter_prctl\n{\n  if (args->option == PR_SET_MM_MAP_SIZE)\n  {\n    printf(\"Process %s is changing memory map size to %lu\\n\", comm, args->arg2);\n  }\n}\n\ntracepoint:syscalls:sys_enter_open\n{\n  if (args->flags & O_CREAT)\n  {\n    printf(\"Process %s is opening file %s with mode %o\\n\", comm, str(args->filename), args->mode);\n  }\n}\n\ntracepoint:syscalls:sys_enter_dup\n{\n  printf(\"Process %s is duplicating file descriptor %d\\n\", comm, args->oldfd);\n}\n\ntracepoint:syscalls:sys_enter_close\n{\n  printf(\"Process %s is closing file descriptor %d\\n\", comm, args->fd);\n}\n\nEND\n{\n  printf(\"Tracing ended.\\n\");\n}", "stdout": "", "stderr": "stdin:8:83-97: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_setrlimit' does not contain a field named 'rlim_new'\n  printf(\"Process %s is setting resource limit %d to %d\\n\", comm, args->resource, args->rlim_new.rlim_cur);\n                                                                                  ~~~~~~~~~~~~~~\nstdin:13:23-41: ERROR: Unknown identifier: 'PR_SET_MM_MAP_SIZE'\n  if (args->option == PR_SET_MM_MAP_SIZE)\n                      ~~~~~~~~~~~~~~~~~~\nstdin:21:21-28: ERROR: Unknown identifier: 'O_CREAT'\n  if (args->flags & O_CREAT)\n                    ~~~~~~~\nstdin:29:66-77: ERROR: Struct/union of type 'struct _tracepoint_syscalls_sys_enter_dup' does not contain a field named 'oldfd'\n  printf(\"Process %s is duplicating file descriptor %d\\n\", comm, args->oldfd);\n                                                                 ~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing signals... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %-4s %-6s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"SIG\", \"TPID\", \"RESULT\");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid], args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}", "stdout": "", "stderr": "stdin:9:15-20: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tpid[tid] = args.pid;\n                 ~~~~~\nstdin:10:15-20: ERROR: Can not access field 'sig' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tsig[tid] = args.sig;\n                 ~~~~~\nstdin:17:73-78: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_kill *'. Try dereferencing it first, or using '->'\n    printf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid], args.ret);\n                                                                           ~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing system call errors... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:syscalls:sys_enter\n{\n\tif (args.ret < 0)\n\t{\n\t\tprintf(\"Error: %s\\n\", strerror(-args.ret));\n\t}\n}\n\nEND\n{\n\tclear(@);\n}", "stdout": "", "stderr": "stdin:4-6: ERROR: tracepoint not found: syscalls:sys_enter\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/socket.h>\n#include <net/sock.h>\n#else\n#include <sys/socket.h>\n#endif\n\nBEGIN\n{\n  printf(\"Tracing tcp connections. Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-8s %-16s \", \"TIME\", \"PID\", \"COMM\");\n  printf(\"%-39s %-6s %-39s %-6s\\n\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\");\n}\n\nkprobe:tcp_connect\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET || $inet_family == AF_INET6) {\n    if ($inet_family == AF_INET) {\n      $daddr = ntop($sk->__sk_common.skc_daddr);\n      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n    } else {\n      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);\n      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);\n    }\n    $lport = $sk->__sk_common.skc_num;\n    $dport = $sk->__sk_common.skc_dport;\n\n    // Destination port is big endian, it must be flipped\n    $dport = bswap($dport);\n\n    time(\"%H:%M:%S \");\n    printf(\"%-8d %-16s \", pid, comm);\n    printf(\"%-39s %-6d %-39s %-6d\\n\", $saddr, $lport, $daddr, $dport);\n  }\n}", "stdout": "Attaching 2 probes...\nTracing tcp connections. Hit Ctrl-C to end.\nTIME     PID      COMM             SADDR                                   SPORT  DADDR                                   DPORT \n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Monitoring system calls... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:raw_syscalls:sys_enter\n{\n\t@syscall[comm, args.id] = count();\n}\n\nEND\n{\n\tprintf(\"\\nHeavily used system calls:\\n\");\n\tprint(@syscall, 10);\n}", "stdout": "", "stderr": "stdin:8:17-22: ERROR: Can not access field 'id' on type '(ctx) struct _tracepoint_raw_syscalls_sys_enter *'. Try dereferencing it first, or using '->'\n    @syscall[comm, args.id] = count();\n                   ~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Monitoring the rate of syscalls per second... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:syscalls:sys_enter_*\n{\n\t@[probe] = count();\n}\n\ninterval:s:1\n{\n\ttime();\n\tprint(@);\n\tclear(@);\n}\n\nEND\n{\n\tclear(@);\n}", "stdout": "", "stderr": "stdin:4-6: ERROR: kprobe probe type requires 1 argument\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/socket.h>\n#include <net/sock.h>\n#else\n#include <sys/socket.h>\n#endif\n\nBEGIN\n{\n  printf(\"Tracing socket operations. Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-6s %-14s %-10s\\n\", \"TIME\", \"PID\", \"COMM\", \"SOCKET TYPE\");\n}\n\nkprobe:sys_connect\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET || $inet_family == AF_INET6) {\n    if ($inet_family == AF_INET) {\n      printf(\"%H:%M:%S \", gettimeofday_ns() / 1000000000);\n      printf(\"%-6d %-14s %-10s\\n\", pid, comm, \"IPv4\");\n    } else {\n      printf(\"%H:%M:%S \", gettimeofday_ns() / 1000000000);\n      printf(\"%-6d %-14s %-10s\\n\", pid, comm, \"IPv6\");\n    }\n  }\n}\n\nkprobe:sys_accept\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET || $inet_family == AF_INET6) {\n    if ($inet_family == AF_INET) {\n      printf(\"%H:%M:%S \", gettimeofday_ns() / 1000000000);\n      printf(\"%-6d %-14s %-10s\\n\", pid, comm, \"IPv4\");\n    } else {\n      printf(\"%H:%M:%S \", gettimeofday_ns() / 1000000000);\n      printf(\"%-6d %-14s %-10s\\n\", pid, comm, \"IPv6\");\n    }\n  }\n}", "stdout": "", "stderr": "stdin:21:27-42: ERROR: Unknown function: gettimeofday_ns\n      printf(\"%H:%M:%S \", gettimeofday_ns() / 1000000000);\n                          ~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing file I/O... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:syscalls:sys_enter_read\n{\n\t@reads[comm] = hist(args->count);\n}\n\ntracepoint:syscalls:sys_enter_write\n{\n\t@writes[comm] = hist(args->count);\n}\n\nEND\n{\n\tprintf(\"\\nI/O size (bytes) histograms by process name:\\n\");\n}", "stdout": "Attaching 4 probes...\nTracing file I/O... Hit Ctrl-C to end.\n\nI/O size (bytes) histograms by process name:\n\n\n@reads[bpftrace]: \n[4K, 8K)               1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[dockerd]: \n[16, 32)               1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[python3]: \n[4K, 8K)               1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[systemd-timesyn]: \n[8, 16)                1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[systemd-udevd]: \n[8, 16)                1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[systemd]: \n[1K, 2K)               4 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[cpptools]: \n[1K, 2K)               7 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[containerd]: \n[16, 32)              14 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[irqbalance]: \n[1K, 2K)              14 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@reads[vmtoolsd]: \n[1K, 2K)              35 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[2K, 4K)               0 |                                                    |\n[4K, 8K)               3 |@@@@                                                |\n\n@reads[sshd]: \n[32K, 64K)            46 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[64K, 128K)            0 |                                                    |\n[128K, 256K)           0 |                                                    |\n[256K, 512K)          27 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      |\n\n@reads[node]: \n[16, 32)              19 |@@                                                  |\n[32, 64)               0 |                                                    |\n[64, 128)              0 |                                                    |\n[128, 256)             0 |                                                    |\n[256, 512)             0 |                                                    |\n[512, 1K)              0 |                                                    |\n[1K, 2K)             392 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[2K, 4K)               7 |                                                    |\n[4K, 8K)               0 |                                                    |\n[8K, 16K)             38 |@@@@@                                               |\n[16K, 32K)             0 |                                                    |\n[32K, 64K)             0 |                                                    |\n[64K, 128K)           30 |@@@                                                 |\n\n@writes[bpftrace]: \n[32, 64)               1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@writes[dockerd]: \n[1]                    1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@writes[containerd]: \n[1]                   14 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@writes[multipathd]: \n[8, 16)               42 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@writes[sshd]: \n[8, 16)                8 |@@@@@@@@@                                           |\n[16, 32)              19 |@@@@@@@@@@@@@@@@@@@@@                               |\n[32, 64)              46 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n\n@writes[node]: \n[4, 8)                 4 |                                                    |\n[8, 16)              324 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[16, 32)              27 |@@@@                                                |\n[32, 64)               0 |                                                    |\n[64, 128)              8 |@                                                   |\n[128, 256)            19 |@@@                                                 |\n[256, 512)             0 |                                                    |\n[512, 1K)              0 |                                                    |\n[1K, 2K)               1 |                                                    |\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing file read and write events... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:syscalls:sys_enter_read\n{\n\t@reads[comm] = sum(args.count);\n}\n\ntracepoint:syscalls:sys_enter_write\n{\n\t@writes[comm] = sum(args.count);\n}\n\nEND\n{\n\tprintf(\"Read bytes by process:\\n\");\n\tprint(@reads);\n\tprintf(\"\\nWrite bytes by process:\\n\");\n\tprint(@writes);\n}", "stdout": "", "stderr": "stdin:8:17-26: ERROR: Can not access field 'count' on type '(ctx) struct _tracepoint_syscalls_sys_enter_read *'. Try dereferencing it first, or using '->'\n    @reads[comm] = sum(args.count);\n                   ~~~~~~~~~\nstdin:13:18-27: ERROR: Can not access field 'count' on type '(ctx) struct _tracepoint_syscalls_sys_enter_write *'. Try dereferencing it first, or using '->'\n    @writes[comm] = sum(args.count);\n                    ~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Tracing network namespace creation and deletion... Hit Ctrl-C to end.\\n\"); } net:net_namespace_create { printf(\"Network namespace created: %s\\n\", str(arg1)); } net:net_namespace_destroy { printf(\"Network namespace deleted: %s\\n\", str(arg1)); }", "stdout": "", "stderr": "FATAL: Invalid probe type made it to attachpoint parser\ntimeout: the monitored command dumped core\n", "returncode": -6}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing open syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-6s %-16s %4s %3s %s\\n\", \"PID\", \"COMM\", \"FD\", \"ERR\", \"PATH\");\n}\n\ntracepoint:syscalls:sys_enter_open,\ntracepoint:syscalls:sys_enter_openat\n{\n\t@filename[tid] = args.filename;\n}\n\ntracepoint:syscalls:sys_exit_open,\ntracepoint:syscalls:sys_exit_openat\n/@filename[tid]/\n{\n\t$ret = args.ret;\n\t$fd = $ret >= 0 ? $ret : -1;\n\t$errno = $ret >= 0 ? 0 : - $ret;\n\n\tprintf(\"%-6d %-16s %4d %3d %s\\n\", pid, comm, $fd, $errno,\n\t    str(@filename[tid]));\n\tdelete(@filename[tid]);\n}\n\nEND\n{\n\tclear(@filename);\n}", "stdout": "", "stderr": "stdin:10:19-24: ERROR: Can not access field 'filename' on type '(ctx) struct _tracepoint_syscalls_sys_enter_openat *'. Try dereferencing it first, or using '->'\n    @filename[tid] = args.filename;\n                     ~~~~~\nstdin:17:9-14: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_openat *'. Try dereferencing it first, or using '->'\n    $ret = args.ret;\n           ~~~~~\nstdin:22:6-25: ERROR: str() expects an integer or a pointer type as first argument (none provided)\n        str(@filename[tid]));\n        ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:perf_event_raw_tp{ args->type == 0x01 && args->config == 0x412e } /args->comm/ { @count[args->comm] = count() }", "stdout": "", "stderr": "stdin:1:1-1: ERROR: No attach points for probe\nkprobe:perf_event_raw_tp{ args->type == 0x01 && args->config == 0x412e } /args->comm/ { @count[args->comm] = count() }\n\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:page_fault\n{\n  @[comm, pid] = count();\n}\n\ninterval:s:1\n{\n  time();\n  print(@);\n  clear(@);\n}", "stdout": "Attaching 2 probes...\n", "stderr": "stdin:1:1-18: WARNING: page_fault is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nkprobe:page_fault\n~~~~~~~~~~~~~~~~~\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kprobe:page_fault'\n", "returncode": 255}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing bash commands... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %s\\n\", \"TIME\", \"PID\", \"COMMAND\");\n}\n\nuretprobe:/bin/bash:readline\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %s\\n\", pid, str(retval));\n}", "stdout": "Attaching 2 probes...\nTracing bash commands... Hit Ctrl-C to end.\nTIME      PID    COMMAND\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/fs.h>\n#include <linux/sched.h>\n\n// from fs/namei.c:\nstruct nameidata {\n        struct path     path;\n        struct qstr     last;\n        // [...]\n};\n#endif\n\nBEGIN\n{\n\tprintf(\"Tracing dcache lookups... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-8s %-6s %-16s %1s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"T\", \"FILE\");\n}\n\n// comment out this block to avoid showing hits:\nkprobe:lookup_fast,\nkprobe:lookup_fast.constprop.*\n{\n\t$nd = (struct nameidata *)arg0;\n\tprintf(\"%-8d %-6d %-16s R %s\\n\", elapsed / 1e6, pid, comm,\n\t    str($nd->last.name));\n}\n\nkprobe:d_lookup\n{\n\t$name = (struct qstr *)arg1;\n\t@fname[tid] = $name->name;\n}\n\nkretprobe:d_lookup\n/@fname[tid]/\n{\n\tprintf(\"%-8d %-6d %-16s M %s\\n\", elapsed / 1e6, pid, comm,\n\t    str(@fname[tid]));\n\tdelete(@fname[tid]);\n}", "stdout": "", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/genhd.h>\n#include <linux/bio.h>\n#endif\n\nBEGIN\n{\n\tprintf(\"Tracing md flush events... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-8s %-6s %-16s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"DEVICE\");\n}\n\nkprobe:md_flush_request\n{\n\ttime(\"%H:%M:%S \");\n\tprintf(\"%-6d %-16s %s\\n\", pid, comm, ((struct bio *)arg1)->bi_bdev->bd_disk->disk_name);\n}\n", "stdout": "Attaching 2 probes...\nTracing md flush events... Hit Ctrl-C to end.\nTIME     PID    COMM             DEVICE\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/sched.h>\n\nBEGIN\n{\n\tprintf(\"Tracing CPU scheduler... Hit Ctrl-C to end.\\n\");\n}\n\ntracepoint:sched:sched_wakeup,\ntracepoint:sched:sched_wakeup_new\n{\n\t@qtime[args.pid] = nsecs;\n}\n\ntracepoint:sched:sched_switch\n{\n\tif (args.prev_state == TASK_RUNNING) {\n\t\t@qtime[args.prev_pid] = nsecs;\n\t}\n\n\t$ns = @qtime[args.next_pid];\n\tif ($ns) {\n\t\t@usecs = hist((nsecs - $ns) / 1000);\n\t}\n\tdelete(@qtime[args.next_pid]);\n}\n\nEND\n{\n\tclear(@qtime);\n}", "stdout": "", "stderr": "stdin:11:2-14: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_sched_sched_wakeup_new *'. Try dereferencing it first, or using '->'\n    @qtime[args.pid] = nsecs;\n    ~~~~~~~~~~~~\nstdin:16:5-11: ERROR: Can not access field 'prev_state' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    if (args.prev_state == TASK_RUNNING) {\n       ~~~~~~\nstdin:17:3-15: ERROR: Can not access field 'prev_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n        @qtime[args.prev_pid] = nsecs;\n        ~~~~~~~~~~~~\nstdin:20:8-20: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    $ns = @qtime[args.next_pid];\n          ~~~~~~~~~~~~\nstdin:24:2-21: ERROR: Can not access field 'next_pid' on type '(ctx) struct _tracepoint_sched_sched_switch *'. Try dereferencing it first, or using '->'\n    delete(@qtime[args.next_pid]);\n    ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/sched.h>\n\n// Until BTF is available, we'll need to declare some of this struct manually,\n// since it isn't available to be #included. This will need maintenance to match\n// your kernel version. It is from kernel/sched/sched.h:\nstruct cfs_rq {\n\tstruct load_weight load;\n\tunsigned long runnable_weight;\n\tunsigned int nr_running;\n\tunsigned int h_nr_running;\n};\n#endif\n\nBEGIN\n{\n\tprintf(\"Sampling run queue length at 99 Hertz... Hit Ctrl-C to end.\\n\");\n}\n\nprofile:hz:99\n{\n\t$task = (struct task_struct *)curtask;\n\t$my_q = (struct cfs_rq *)$task->se.cfs_rq;\n\t$len = $my_q->nr_running;\n\t$len = $len > 0 ? $len - 1 : 0;\t// subtract currently running task\n\t@runqlen = lhist($len, 0, 100, 1);\n}", "stdout": "Attaching 2 probes...\nSampling run queue length at 99 Hertz... Hit Ctrl-C to end.\n\n\n@runqlen: \n[0, 1)              3525 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|\n[1, 2)               284 |@@@@                                                |\n[2, 3)                20 |                                                    |\n[3, 4)                 1 |                                                    |\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"%-10s %-6s %-16s %s\\n\", \"TIME(ms)\", \"PID\", \"COMM\", \"FUNC\");\n}\n\nuprobe:libpthread:pthread_create,\nuprobe:libc:pthread_create\n{\n\tprintf(\"%-10u %-6d %-16s %s\\n\", elapsed / 1e6, pid, comm,\n\t    usym(arg2));\n}", "stdout": "Attaching 2 probes...\nTIME(ms)   PID    COMM             FUNC\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kvm_exit\n{\n  @exit_reason[retval] = count();\n}\n\ninterval:s:1\n{\n  time();\n  print(@exit_reason);\n  clear(@exit_reason);\n}", "stdout": "", "stderr": "stdin:3:3-22: ERROR: The retval builtin can only be used with 'kretprobe' and 'uretprobe' and 'kfunc' probes\n  @exit_reason[retval] = count();\n  ~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing mount and umount syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-6s %-16s %s\\n\", \"PID\", \"COMM\", \"EVENT\");\n}\n\ntracepoint:syscalls:sys_enter_mount\n{\n\tprintf(\"%-6d %-16s mount\\n\", pid, comm);\n}\n\ntracepoint:syscalls:sys_enter_umount\n{\n\tprintf(\"%-6d %-16s umount\\n\", pid, comm);\n}", "stdout": "Attaching 3 probes...\nTracing mount and umount syscalls... Hit Ctrl-C to end.\nPID    COMM             EVENT\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e tracepoint:bpf:bpf_jit_compile { printf(\"BPF JIT compile event\\n\"); }", "stdout": "", "stderr": "stdin:1:1-31: ERROR: tracepoint not found: bpf:bpf_jit_compile\ntracepoint:bpf:bpf_jit_compile { printf(\"BPF JIT compile event\\n\"); }\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/blkdev.h>\n#include <linux/blk-mq.h>\n#endif\n\nBEGIN\n{\n\tprintf(\"%-12s %-7s %-16s %-6s %7s\\n\", \"TIME(ms)\", \"DISK\", \"COMM\", \"PID\", \"LAT(ms)\");\n}\n\nkprobe:blk_account_io_start,\nkprobe:__blk_account_io_start\n{\n\t@start[arg0] = nsecs;\n\t@iopid[arg0] = pid;\n\t@iocomm[arg0] = comm;\n\t@disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;\n}\n\nkprobe:blk_account_io_done,\nkprobe:__blk_account_io_done\n/@start[arg0] != 0 && @iopid[arg0] != 0 && @iocomm[arg0] != \"\"/\n\n{\n\t$now = nsecs;\n\tprintf(\"%-12u %-7s %-16s %-6d %7d\\n\",\n\t    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],\n\t    ($now - @start[arg0]) / 1e6);\n\n\tdelete(@start[arg0]);\n\tdelete(@iopid[arg0]);\n\tdelete(@iocomm[arg0]);\n\tdelete(@disk[arg0]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@iopid);\n\tclear(@iocomm);\n\tclear(@disk);\n}", "stdout": "Attaching 6 probes...\nTIME(ms)     DISK    COMM             PID    LAT(ms)\n\n\n\n\n\n\n", "stderr": "stdin:9-11: WARNING: blk_account_io_start is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:11-12: WARNING: __blk_account_io_start is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:18-20: WARNING: blk_account_io_done is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:blk_account_io_done, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:__blk_account_io_start, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:blk_account_io_start, skipping.\n", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing btrfs operations... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:btrfs_file_read_iter,\nkprobe:btrfs_file_write_iter,\nkprobe:btrfs_file_open,\nkprobe:btrfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:btrfs_file_read_iter,\nkretprobe:btrfs_file_write_iter,\nkretprobe:btrfs_file_open,\nkretprobe:btrfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}", "stdout": "Attaching 10 probes...\nTracing btrfs operations... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:8-9: WARNING: btrfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: btrfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:btrfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:btrfs_file_fsync, skipping.\n", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing cap_capable syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-6s %-16s %-4s %-20s AUDIT\\n\", \"TIME\", \"UID\", \"PID\",\n\t    \"COMM\", \"CAP\", \"NAME\");\n\t@cap[0] = \"CAP_CHOWN\";\n\t@cap[1] = \"CAP_DAC_OVERRIDE\";\n\t@cap[2] = \"CAP_DAC_READ_SEARCH\";\n\t@cap[3] = \"CAP_FOWNER\";\n\t@cap[4] = \"CAP_FSETID\";\n\t@cap[5] = \"CAP_KILL\";\n\t@cap[6] = \"CAP_SETGID\";\n\t@cap[7] = \"CAP_SETUID\";\n\t@cap[8] = \"CAP_SETPCAP\";\n\t@cap[9] = \"CAP_LINUX_IMMUTABLE\";\n\t@cap[10] = \"CAP_NET_BIND_SERVICE\";\n\t@cap[11] = \"CAP_NET_BROADCAST\";\n\t@cap[12] = \"CAP_NET_ADMIN\";\n\t@cap[13] = \"CAP_NET_RAW\";\n\t@cap[14] = \"CAP_IPC_LOCK\";\n\t@cap[15] = \"CAP_IPC_OWNER\";\n\t@cap[16] = \"CAP_SYS_MODULE\";\n\t@cap[17] = \"CAP_SYS_RAWIO\";\n\t@cap[18] = \"CAP_SYS_CHROOT\";\n\t@cap[19] = \"CAP_SYS_PTRACE\";\n\t@cap[20] = \"CAP_SYS_PACCT\";\n\t@cap[21] = \"CAP_SYS_ADMIN\";\n\t@cap[22] = \"CAP_SYS_BOOT\";\n\t@cap[23] = \"CAP_SYS_NICE\";\n\t@cap[24] = \"CAP_SYS_RESOURCE\";\n\t@cap[25] = \"CAP_SYS_TIME\";\n\t@cap[26] = \"CAP_SYS_TTY_CONFIG\";\n\t@cap[27] = \"CAP_MKNOD\";\n\t@cap[28] = \"CAP_LEASE\";\n\t@cap[29] = \"CAP_AUDIT_WRITE\";\n\t@cap[30] = \"CAP_AUDIT_CONTROL\";\n\t@cap[31] = \"CAP_SETFCAP\";\n\t@cap[32] = \"CAP_MAC_OVERRIDE\";\n\t@cap[33] = \"CAP_MAC_ADMIN\";\n\t@cap[34] = \"CAP_SYSLOG\";\n\t@cap[35] = \"CAP_WAKE_ALARM\";\n\t@cap[36] = \"CAP_BLOCK_SUSPEND\";\n\t@cap[37] = \"CAP_AUDIT_READ\";\n\t@cap[38] = \"CAP_PERFMON\";\n\t@cap[39] = \"CAP_BPF\";\n\t@cap[40] = \"CAP_CHECKPOINT_RESTORE\";\n}\n\nkprobe:cap_capable\n{\n\t$cap = arg2;\n\t$audit = arg3;\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-6d %-16s %-4d %-20s %d\\n\", uid, pid, comm, $cap,\n\t    @cap[$cap], $audit);\n}\n\nEND\n{\n\tclear(@cap);\n}", "stdout": "Attaching 3 probes...\nTracing cap_capable syscalls... Hit Ctrl-C to end.\nTIME      UID    PID    COMM             CAP  NAME                 AUDIT\n\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/blkdev.h>\n#include <linux/blk-mq.h>\n\nBEGIN\n{\n\tprintf(\"%-12s %-7s %-16s %-6s %7s\\n\", \"TIME(ms)\", \"DISK\", \"COMM\", \"PID\", \"LAT(ms)\");\n}\n\nkprobe:blk_account_io_start,\nkprobe:__blk_account_io_start\n{\n\t@start[arg0] = nsecs;\n\t@iopid[arg0] = pid;\n\t@iocomm[arg0] = comm;\n\t@disk[arg0] = ((struct request *)arg0)->q->disk->disk_name;\n}\n\nkprobe:blk_account_io_done,\nkprobe:__blk_account_io_done\n/@start[arg0] != 0 && @iopid[arg0] != 0 && @iocomm[arg0] != \"\"/\n\n{\n\t$now = nsecs;\n\tprintf(\"%-12u %-7s %-16s %-6d %7d\\n\",\n\t    elapsed / 1e6, @disk[arg0], @iocomm[arg0], @iopid[arg0],\n\t    ($now - @start[arg0]) / 1e6);\n\n\tdelete(@start[arg0]);\n\tdelete(@iopid[arg0]);\n\tdelete(@iocomm[arg0]);\n\tdelete(@disk[arg0]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@iopid);\n\tclear(@iocomm);\n\tclear(@disk);\n}", "stdout": "", "stderr": "/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:41:9: warning: '__HAVE_BUILTIN_BSWAP32__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:42:9: warning: '__HAVE_BUILTIN_BSWAP64__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:43:9: warning: '__HAVE_BUILTIN_BSWAP16__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:24:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:28:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:42:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:46:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/arch/x86/include/asm/ibt.h:101:47: error: use of undeclared identifier 'false'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Tracing long atomic critical sections... Hit Ctrl-C to end.\\n\"); } kprobe:do_raw_spin_lock { @start[tid] = nsecs; } kretprobe:do_raw_spin_lock { $ns = @start[tid]; if ($ns) { @duration = hist(nsecs - $ns); } delete(@start[tid]); } END { clear(@start); }", "stdout": "Attaching 4 probes...\n", "stderr": "stdin:1:83-107: WARNING: do_raw_spin_lock is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nBEGIN { printf(\"Tracing long atomic critical sections... Hit Ctrl-C to end.\\n\"); } kprobe:do_raw_spin_lock { @start[tid] = nsecs; } kretprobe:do_raw_spin_lock { $ns = @start[tid]; if ($ns) { @duration = hist(nsecs - $ns); } delete(@start[tid]); } END { clear(@start); }\n                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~\nstdin:1:132-159: WARNING: do_raw_spin_lock is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nBEGIN { printf(\"Tracing long atomic critical sections... Hit Ctrl-C to end.\\n\"); } kprobe:do_raw_spin_lock { @start[tid] = nsecs; } kretprobe:do_raw_spin_lock { $ns = @start[tid]; if ($ns) { @duration = hist(nsecs - $ns); } delete(@start[tid]); } END { clear(@start); }\n                                                                                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kretprobe:do_raw_spin_lock'\n", "returncode": 255}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing kill() signals... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %-4s %-6s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"SIG\",\n\t    \"TPID\", \"RESULT\");\n}\n\ntracepoint:syscalls:sys_enter_kill\n{\n\t@tpid[tid] = args.pid;\n\t@tsig[tid] = args.sig;\n}\n\ntracepoint:syscalls:sys_exit_kill\n/@tpid[tid]/\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %-4d %-6d %d\\n\", pid, comm, @tsig[tid], @tpid[tid],\n\t    args.ret);\n\tdelete(@tpid[tid]);\n\tdelete(@tsig[tid]);\n}\n", "stdout": "", "stderr": "stdin:10:15-20: ERROR: Can not access field 'pid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tpid[tid] = args.pid;\n                 ~~~~~\nstdin:11:15-20: ERROR: Can not access field 'sig' on type '(ctx) struct _tracepoint_syscalls_sys_enter_kill *'. Try dereferencing it first, or using '->'\n    @tsig[tid] = args.sig;\n                 ~~~~~\nstdin:19:6-11: ERROR: Can not access field 'ret' on type '(ctx) struct _tracepoint_syscalls_sys_exit_kill *'. Try dereferencing it first, or using '->'\n        args.ret);\n        ~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN { printf(\"Tracing kernel mutex lock events... Hit Ctrl-C to end.\\n\"); } kprobe:mutex_lock { @locks[probefunc] = count(); } END { printf(\"\\nLocks Statistics:\\n\"); printf(\"%-30s %s\\n\", \"Lock Function\", \"Count\"); print(@locks); }", "stdout": "", "stderr": "stdin:1:99-115: ERROR: Unknown identifier: 'probefunc'\nBEGIN { printf(\"Tracing kernel mutex lock events... Hit Ctrl-C to end.\\n\"); } kprobe:mutex_lock { @locks[probefunc] = count(); } END { printf(\"\\nLocks Statistics:\\n\"); printf(\"%-30s %s\\n\", \"Lock Function\", \"Count\"); print(@locks); }\n                                                                                                  ~~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing System V shared memory syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-6s %-16s %s\\n\", \"PID\", \"COMM\", \"SIZE\");\n}\n\ntracepoint:syscalls:sys_enter_shmat\n{\n\tprintf(\"%-6d %-16s %d\\n\", pid, comm, args.shmid);\n}\n\nEND\n{\n\tclear(args.shmid);\n}", "stdout": "", "stderr": "stdin:9:39-44: ERROR: Can not access field 'shmid' on type '(ctx) struct _tracepoint_syscalls_sys_enter_shmat *'. Try dereferencing it first, or using '->'\n    printf(\"%-6d %-16s %d\\n\", pid, comm, args.shmid);\n                                         ~~~~~\nstdin:14:2-12: ERROR: The args builtin can only be used with tracepoint/kfunc/uprobeprobes (special used here)\n    clear(args.shmid);\n    ~~~~~~~~~~\nstdin:14:2-19: ERROR: clear() expects a map to be provided\n    clear(args.shmid);\n    ~~~~~~~~~~~~~~~~~\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:kmalloc\n{\n  @[kstack] = count();\n}\n\ninterval:s:1\n{\n  time();\n  print(@);\n  clear(@);\n}", "stdout": "Attaching 2 probes...\n", "stderr": "stdin:1:1-15: WARNING: kmalloc is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nkprobe:kmalloc\n~~~~~~~~~~~~~~\ncannot attach kprobe, probe entry may not exist\nERROR: Error attaching probe: 'kprobe:kmalloc'\n", "returncode": 255}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing sync syscalls... Hit Ctrl-C to end.\\n\");\n\tprintf(\"%-9s %-6s %-16s %s\\n\", \"TIME\", \"PID\", \"COMM\", \"EVENT\");\n}\n\ntracepoint:syscalls:sys_enter_sync,\ntracepoint:syscalls:sys_enter_syncfs,\ntracepoint:syscalls:sys_enter_fsync,\ntracepoint:syscalls:sys_enter_fdatasync,\ntracepoint:syscalls:sys_enter_sync_file_range*,\ntracepoint:syscalls:sys_enter_msync\n{\n\ttime(\"%H:%M:%S  \");\n\tprintf(\"%-6d %-16s %s\\n\", pid, comm, probe);\n}", "stdout": "Attaching 7 probes...\nTracing sync syscalls... Hit Ctrl-C to end.\nTIME      PID    COMM             EVENT\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #include <linux/tcp.h>\n\nBEGIN\n{\n  printf(\"%-15s %-15s %-10s %-10s\\n\", \"Sender IP\", \"Sender Port\", \"Receiver IP\", \"Receiver Port\");\n}\n\nkprobe:tcp_rcv_established\n{\n  $saddr = ntop($tcp->saddr);\n  $sport = $tcp->sport;\n  $daddr = ntop($tcp->daddr);\n  $dport = $tcp->dport;\n\n  printf(\"%-15s %-15d %-15s %-15d\\n\", $saddr, $sport, $daddr, $dport);\n}\n", "stdout": "", "stderr": "/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:41:9: warning: '__HAVE_BUILTIN_BSWAP32__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:42:9: warning: '__HAVE_BUILTIN_BSWAP64__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/compiler-clang.h:43:9: warning: '__HAVE_BUILTIN_BSWAP16__' macro redefined [-Wmacro-redefined]\nnote: previous definition is here\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:24:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:28:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:42:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/include/linux/kasan-checks.h:46:9: error: use of undeclared identifier 'true'\n/lib/modules/6.2.0-32-generic/build/arch/x86/include/asm/ibt.h:101:47: error: use of undeclared identifier 'false'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:21:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:36:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:41:2: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\n/lib/modules/6.2.0-32-generic/build/include/asm-generic/bitops/le.h:56:9: error: use of undeclared identifier 'uintptr_t'\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n", "returncode": 1}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing ZFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:zfs_vnop_read,\nkprobe:zfs_vnop_write,\nkprobe:zfs_vnop_open,\nkprobe:zfs_vnop_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:zfs_vnop_read,\nkretprobe:zfs_vnop_write,\nkretprobe:zfs_vnop_open,\nkretprobe:zfs_vnop_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}", "stdout": "Attaching 10 probes...\nTracing ZFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:4-6: WARNING: zfs_vnop_read is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:6-7: WARNING: zfs_vnop_write is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:7-8: WARNING: zfs_vnop_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:8-9: WARNING: zfs_vnop_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:13-15: WARNING: zfs_vnop_read is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:15-16: WARNING: zfs_vnop_write is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:16-17: WARNING: zfs_vnop_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: zfs_vnop_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_read, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:zfs_vnop_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_write, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:zfs_vnop_read, skipping.\n", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e kprobe:swap_readpage\n{\n\t@[comm, pid] = count();\n}\n\ninterval:s:1\n{\n\ttime();\n\tprint(@);\n\tclear(@);\n}", "stdout": "Attaching 2 probes...\n12:00:32\n\n12:00:33\n\n12:00:34\n\n12:00:35\n\n12:00:36\n\n12:00:37\n\n12:00:38\n\n12:00:39\n\n12:00:40\n\n12:00:41\n\n12:00:42\n\n12:00:43\n\n12:00:44\n\n12:00:45\n\n12:00:46\n\n12:00:47\n\n12:00:48\n\n12:00:49\n\n12:00:50\n\n\n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e #ifndef BPFTRACE_HAVE_BTF\n#include <linux/socket.h>\n#include <net/sock.h>\n#else\n#include <sys/socket.h>\n#endif\n\nBEGIN\n{\n  printf(\"Tracing TCP connections. Hit Ctrl-C to end.\\n\");\n  printf(\"%-8s %-8s %-16s \", \"TIME\", \"PID\", \"COMM\");\n  printf(\"%-39s %-6s %-39s %-6s\\n\", \"SADDR\", \"SPORT\", \"DADDR\", \"DPORT\");\n}\n\nkprobe:tcp_connect\n{\n  $sk = ((struct sock *) arg0);\n  $inet_family = $sk->__sk_common.skc_family;\n\n  if ($inet_family == AF_INET || $inet_family == AF_INET6) {\n    if ($inet_family == AF_INET) {\n      $daddr = ntop($sk->__sk_common.skc_daddr);\n      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);\n    } else {\n      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);\n      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);\n    }\n    $lport = $sk->__sk_common.skc_num;\n    $dport = $sk->__sk_common.skc_dport;\n\n    // Destination port is big endian, it must be flipped\n    $dport = bswap($dport);\n\n    time(\"%H:%M:%S \");\n    printf(\"%-8d %-16s \", pid, comm);\n    printf(\"%-39s %-6d %-39s %-6d\\n\", $saddr, $lport, $daddr, $dport);\n  }\n}", "stdout": "Attaching 2 probes...\nTracing TCP connections. Hit Ctrl-C to end.\nTIME     PID      COMM             SADDR                                   SPORT  DADDR                                   DPORT \n\n\n", "stderr": "", "returncode": 0}{"command": "sudo timeout --preserve-status -s 2 20 bpftrace -e BEGIN\n{\n\tprintf(\"Tracing XFS operation latency... Hit Ctrl-C to end.\\n\");\n}\n\nkprobe:xfs_file_read_iter,\nkprobe:xfs_file_write_iter,\nkprobe:xfs_file_open,\nkprobe:xfs_file_fsync\n{\n\t@start[tid] = nsecs;\n\t@name[tid] = func;\n}\n\nkretprobe:xfs_file_read_iter,\nkretprobe:xfs_file_write_iter,\nkretprobe:xfs_file_open,\nkretprobe:xfs_file_fsync\n/@start[tid]/\n{\n\t@us[@name[tid]] = hist((nsecs - @start[tid]) / 1000);\n\tdelete(@start[tid]);\n\tdelete(@name[tid]);\n}\n\nEND\n{\n\tclear(@start);\n\tclear(@name);\n}", "stdout": "Attaching 10 probes...\nTracing XFS operation latency... Hit Ctrl-C to end.\n\n\n\n\n\n", "stderr": "stdin:4-6: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:6-7: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:7-8: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:8-9: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:13-15: WARNING: xfs_file_read_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:15-16: WARNING: xfs_file_write_iter is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:16-17: WARNING: xfs_file_open is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\nstdin:17-18: WARNING: xfs_file_fsync is not traceable (either non-existing, inlined, or marked as \"notrace\"); attaching to it will likely fail\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_read_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kretprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_fsync, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_open, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_write_iter, skipping.\ncannot attach kprobe, probe entry may not exist\nWARNING: could not attach probe kprobe:xfs_file_read_iter, skipping.\n", "returncode": 0}